import { spawnSync } from "child_process";
import * as path from "path";
import { existsSync, mkdirSync } from "fs";
import { TestRunner } from "umbra-test-runner";
import { ArgsParser } from "./Config/ArgsParser";
import { ConfigMerger } from "./Config/ConfigMerger";
import { StockReporterMap } from "./Reporter/Stock/StockReporterMap";
import { ModuleResolver } from "./ModuleResolver";
import { DefaultConfig } from "./Config/DefaultConfig";
import { FancyReporter } from "./Reporter/Stock/FancyReporter";
const parser = new ArgsParser();
const argConfig = parser.parse();
const configMerger = new ConfigMerger();
let finalConfig;
if (existsSync(argConfig.configPath)) {
    const cacheDir = argConfig.cacheDir ? argConfig.cacheDir : DefaultConfig.cacheDir;
    if (!existsSync(cacheDir)) {
        mkdirSync(cacheDir);
    }
    let finalPath = argConfig.configPath;
    if (path.extname(argConfig.configPath) === "ts") {
        finalPath = path.resolve(cacheDir, "config.js");
        spawnSync("tsc", ["--outFile", finalPath, argConfig.configPath], { stdio: "inherit" });
    }
    const fileConfig = require(finalPath);
    finalConfig = configMerger.merge(DefaultConfig, fileConfig, argConfig);
}
else {
    finalConfig = configMerger.merge(DefaultConfig, argConfig);
}
const runner = new TestRunner({
    timeoutMs: finalConfig.timeoutMs,
    stopOnFirstFail: false
});
const reporterNames = finalConfig.reporting.reporters;
let reporters;
if (reporterNames.length === 0) {
    reporters = [new FancyReporter()];
}
else {
    reporters = reporterNames.map((name) => {
        try {
            return require(name);
        }
        catch (e) {
            if (StockReporterMap[name]) {
                return new StockReporterMap[name]();
            }
            throw new Error(`Unable to load reporter: ${name}`);
        }
    });
}
for (const reporter of reporters) {
    runner.on("activeFileChanged", reporter.activeFileChanged);
    runner.on("beforeTest", reporter.beforeTest);
    runner.on("testSuccess", reporter.testSuccess);
    runner.on("testFail", reporter.testFail);
    runner.on("testTimeout", reporter.testTimeout);
    runner.on("beforeDescribe", reporter.beforeDescribe);
    runner.on("afterDescribe", reporter.afterDescribe);
}
const globalFunctions = ["it", "describe", "after", "afterEach", "before", "beforeEach"];
for (const fnName of globalFunctions) {
    global[fnName] = runner[fnName];
}
global["__testRunner"] = runner;
const moduleResolver = new ModuleResolver(runner);
Promise.all(reporters.map((reporter) => reporter.initialize()))
    .then(() => moduleResolver.resolveGlob(finalConfig.input))
    .then(() => {
    for (const reporter of reporters) {
        reporter.runStart();
    }
})
    .then(() => runner.run())
    .then((results) => {
    for (const reporter of reporters) {
        reporter.runEnd(results);
    }
})
    .catch((error) => {
    console.error(error);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLElBQUksQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDN0MsT0FBTyxFQUFDLFVBQVUsRUFBYSxNQUFNLHFCQUFxQixDQUFDO0FBQzNELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVuRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUNuRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RCxNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sU0FBUyxHQUFlLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUU3QyxNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQ3hDLElBQUksV0FBd0IsQ0FBQztBQUM3QixJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUU7SUFDbEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNsRixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDckMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDN0MsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hELFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO0tBQ3hGO0lBRUQsTUFBTSxVQUFVLEdBQWdCLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuRCxXQUFXLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQzFFO0tBQU07SUFDSCxXQUFXLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDOUQ7QUFFRCxNQUFNLE1BQU0sR0FBZSxJQUFJLFVBQVUsQ0FBQztJQUN0QyxTQUFTLEVBQUUsV0FBVyxDQUFDLFNBQVM7SUFDaEMsZUFBZSxFQUFFLEtBQUs7Q0FDekIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDdEQsSUFBSSxTQUFxQixDQUFDO0FBQzFCLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDNUIsU0FBUyxHQUFHLENBQUMsSUFBSSxhQUFhLEVBQUUsQ0FBQyxDQUFDO0NBQ3JDO0tBQU07SUFDSCxTQUFTLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ25DLElBQUk7WUFDQSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDeEIsT0FBTyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDdkM7WUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0wsQ0FBQyxDQUFDLENBQUM7Q0FDTjtBQUVELEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO0lBQzlCLE1BQU0sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztDQUN0RDtBQWVELE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN6RixLQUFLLE1BQU0sTUFBTSxJQUFJLGVBQWUsRUFBRTtJQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ25DO0FBQ0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUVoQyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUVsRCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0tBQzFELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN6RCxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ1AsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDOUIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3ZCO0FBQ0wsQ0FBQyxDQUFDO0tBQ0QsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN4QixJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtJQUNkLEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1FBQzlCLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDNUI7QUFDTCxDQUFDLENBQUM7S0FDRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQixDQUFDLENBQUMsQ0FBQyJ9