"use strict";var TestResult,child_process=require("child_process"),path=require("path"),fs=require("fs"),umbraTestRunner=require("umbra-test-runner"),argparse=require("argparse"),chalk=require("chalk"),ansiEscapes=require("ansi-escapes"),createCallsiteRecord=require("callsite-record"),fastGlob=require("fast-glob");class ArgsParser{constructor(){this.argsParser=new argparse.ArgumentParser({description:"Run tests using the Umbra test framework."}),this.addGeneralOptions(),this.addTimeoutOptions(),this.addReportingOptions(),this.addParallelOptions()}parse(){const e=this.argsParser.parseArgs();return this.cloneNonNullValues({input:e.input[0].length>0?e.input[0]:void 0,cacheDir:e.cacheDir,configPath:path.resolve(e.configPath),debug:e.debug,debugBreak:e.debugBrk,watch:e.watch,timeoutMs:this.cloneNonNullValues({it:e.timeoutMs||e.itTimeoutMs,before:e.timeoutMs||e.beforeTimeoutMs,beforeEach:e.timeoutMs||e.beforeEachTimeoutMs,after:e.timeoutMs||e.afterTimeoutMs,afterEach:e.timeoutMs||e.afterEachTimeoutMs}),reporting:this.cloneNonNullValues({reporters:e.reporter?[e.reporter]:[],outputPath:e.outputPath}),parallel:this.cloneNonNullValues({idempotentFiles:e.idempotentFiles,idempotentTests:e.idempotentTests})})}cloneNonNullValues(e){const t={};for(const r of Object.keys(e)){const s=e[r];void 0!==s&&null!=s&&(("boolean"!=typeof s||s)&&(t[r]=s))}return Object.keys(t).length>0?t:void 0}addGeneralOptions(){this.argsParser.addArgument("input",{help:"Files, or globs, to run with the Umbra Test Runner",required:!1,action:"append",nargs:"*"}),this.argsParser.addArgument(["-d","--debug"],{help:"Enables the Node debugger",required:!1,action:"storeTrue",dest:"debug"}),this.argsParser.addArgument(["-db","--debug-brk"],{help:"Enables the Node debugger, breaking once the first test is evaluated",required:!1,action:"storeTrue",dest:"debugBrk"}),this.argsParser.addArgument(["-w","--watch"],{help:"Enables watch mode, which will evaluate all tests first and then again once changes occur.",required:!1,action:"storeTrue",dest:"watch"}),this.argsParser.addArgument(["-c","--config"],{help:"Sets the config file path.",required:!1,dest:"configPath",defaultValue:"./umbra.config.ts"}),this.argsParser.addArgument(["--cacheDir"],{help:"The directory in which to store umbra cache files used for dynamic optimization.",required:!1,dest:"cacheDir"})}addTimeoutOptions(){this.argsParser.addArgument(["--timeoutMs"],{help:"Specifies the general asynchronous timeout value in milliseconds. This affects *all* async methods (it, before, after, etc.)",required:!1,dest:"timeoutMs"});for(const e of["it","before","beforeEach","after","afterEach"])this.argsParser.addArgument([`--${e}TimeoutMs`],{help:`Specifies the asynchronous timeout value for \`${e}\` blocks in milliseconds. This overrides general settings.`,required:!1,dest:`${e}TimeoutMs`})}addReportingOptions(){this.argsParser.addArgument(["-o","--outputPath"],{help:"The output directory to write the final results to.",required:!1,dest:"outputPath"}),this.argsParser.addArgument(["-r","--reporter"],{help:"The reporter to use.",required:!1,dest:"reporter"})}addParallelOptions(){this.argsParser.addArgument(["--idempotentFiles"],{help:"If set, files are treated as idempotent (meaning other file execution does not affect it).",required:!1,action:"storeTrue",dest:"idempotentFiles"}),this.argsParser.addArgument(["--idempotentTests"],{help:"If set, tests are treated as idempotent (meaning other test execution does not affect it). Requires idempotent files.",required:!1,action:"storeTrue",dest:"idempotentTests"})}}class ConfigMerger{merge(e,...t){for(const r of t)for(const t in r)if(r.hasOwnProperty(t)){const s=r[t];if(void 0===s)continue;"timeoutMs"===t&&"number"==typeof s?e.timeoutMs={it:s,before:s,beforeEach:s,after:s,afterEach:s}:e[t]=r[t]}return e}}class WriteStreamInterceptor{constructor(){this.started=!1}start(e,t){if(this.started)throw new Error("WriteStreamInterceptor has already been started!");this.started=!0,this.streamToIntercept=e,this.originalStreamWrite=this.streamToIntercept.write,this.streamToIntercept.write=e=>{const r=t(e);return"string"==typeof r&&this.writeDirect(r),!0}}stop(){if(!this.started)throw new Error("WriteStreamInterceptor has not been started!");this.streamToIntercept.write=this.originalStreamWrite,this.started=!1}writeDirect(e){if(!this.started)throw new Error("WriteStreamInterceptor has not been started!");this.originalStreamWrite.apply(this.streamToIntercept,[e])}}!function(e){e[e.SUCCESS=0]="SUCCESS",e[e.FAIL=1]="FAIL",e[e.SKIPPED=2]="SKIPPED",e[e.TIMEOUT=3]="TIMEOUT"}(TestResult||(TestResult={}));class FancyReporter{constructor(e=new WriteStreamInterceptor,t=new WriteStreamInterceptor){this.timer=null,this.currentIndentLevel=0,this.lines=[],this.spinnerIndex=0,this.spinnerIcons=["‚ó¥","‚ó∑","‚ó∂","‚óµ"],this.activeFileChanged=e=>{this.activeFilePath=e,this.lines.push(chalk.cyan(">>")+` ${this.activeFilePath}`)},this.afterDescribe=(e,t)=>{this.currentIndentLevel--},this.beforeDescribe=e=>{this.writeLine(this.getIndentedText(chalk.cyan("‚§∑")+` ${e}`)),this.currentIndentLevel++},this.beforeTest=e=>{this.startSpinner(e),this.pending++,this.currentIndentLevel++},this.runEnd=e=>{this.stdOutInterceptor.writeDirect("[?25h"),this.stdOutInterceptor.stop(),this.stdErrInterceptor.stop()},this.runStart=()=>{},this.testFail=(e,t,r)=>{this.stopSpinner(TestResult.FAIL);const s=createCallsiteRecord({forError:t}).renderSync({frameSize:3});this.stdErrInterceptor.writeDirect(s+"\n\n"),this.pending--,this.failures++,this.currentIndentLevel--},this.testTimeout=(e,t,r)=>{this.stopSpinner(TestResult.TIMEOUT),this.pending--,this.failures++,this.currentIndentLevel--},this.testSkipped=e=>{this.stopSpinner(TestResult.SKIPPED),this.pending--,this.currentIndentLevel--},this.testSuccess=(e,t)=>{this.stopSpinner(TestResult.SUCCESS),this.pending--,this.passes++,this.currentIndentLevel--},this.passes=0,this.failures=0,this.pending=0,this.onProcessLog=e=>{},this.stdOutInterceptor=e,this.stdErrInterceptor=t}initialize(){return this.stdOutInterceptor.start(process.stdout,this.onProcessLog),this.stdErrInterceptor.start(process.stderr,this.onProcessLog),this.stdOutInterceptor.writeDirect("[?25l"),this.writeLine(`\n${chalk.whiteBright("‚òæ")} Umbra Test`),this.writeLine(chalk.white("‚§∑ All logs will be intercepted and written to a local file.")),this.drawHorizontalLine(),Promise.resolve()}drawHorizontalLine(){for(let e=0;e<process.stdout.columns;e++)this.stdOutInterceptor.writeDirect("‚îÄ");this.stdOutInterceptor.writeDirect("\n")}writeLine(e){this.stdOutInterceptor.writeDirect(e+"\n")}startSpinner(e){this.stdOutInterceptor.writeDirect(this.getIndentedText(chalk.yellow(this.spinnerIcons[this.spinnerIndex])+" "+e)),this.stdOutInterceptor.writeDirect(ansiEscapes.cursorLeft),this.stdOutInterceptor.writeDirect(ansiEscapes.cursorForward(this.currentIndentLevel+1)),this.timer=setInterval(()=>{this.stdOutInterceptor.writeDirect(ansiEscapes.cursorBackward(1)),this.spinnerIndex=(this.spinnerIndex+1)%(this.spinnerIcons.length-1),this.stdOutInterceptor.writeDirect(chalk.yellow(this.spinnerIcons[this.spinnerIndex]))},200)}stopSpinner(e){clearInterval(this.timer),this.stdOutInterceptor.writeDirect(ansiEscapes.cursorBackward(1)),e===TestResult.FAIL?this.stdOutInterceptor.writeDirect(chalk.redBright("‚úò")):e===TestResult.SUCCESS?this.stdOutInterceptor.writeDirect(chalk.greenBright("‚úì")):e===TestResult.TIMEOUT&&this.stdOutInterceptor.writeDirect(chalk.redBright("‚è≤")),this.stdOutInterceptor.writeDirect(ansiEscapes.cursorNextLine),this.stdOutInterceptor.writeDirect("\n")}getIndentedText(e){let t="";for(let e=0;e<this.currentIndentLevel;e++)t+=" ";return t+e}}const StockReporterMap={fancy:FancyReporter};class ModuleResolver{constructor(e){this.testRunner=e}resolveGlob(e){return fastGlob(e).then(e=>{for(const t of e){const e=path.resolve(t.toString());this.testRunner.setCurrentFile(e),require(e)}})}}const DEFAULT_TIMEOUT_MS=100,DefaultConfig={input:[],debug:!1,debugBreak:!1,watch:!1,cacheDir:".umbra-cache",timeoutMs:{it:100,before:100,beforeEach:100,after:100,afterEach:100},reporting:{outputPath:void 0,reporters:[]},parallel:{idempotentFiles:!1,idempotentTests:!1}},parser=new ArgsParser,argConfig=parser.parse(),configMerger=new ConfigMerger;let finalConfig;if(fs.existsSync(argConfig.configPath)){const e=argConfig.cacheDir?argConfig.cacheDir:DefaultConfig.cacheDir;fs.existsSync(e)||fs.mkdirSync(e);let t=argConfig.configPath;"ts"===path.extname(argConfig.configPath)&&(t=path.resolve(e,"config.js"),child_process.spawnSync("tsc",["--outFile",t,argConfig.configPath],{stdio:"inherit"}));const r=require(t);finalConfig=configMerger.merge(DefaultConfig,r,argConfig)}else finalConfig=configMerger.merge(DefaultConfig,argConfig);const runner=new umbraTestRunner.TestRunner({timeoutMs:finalConfig.timeoutMs,stopOnFirstFail:!1}),reporterNames=finalConfig.reporting.reporters;let reporters;reporters=0===reporterNames.length?[new FancyReporter]:reporterNames.map(e=>{try{return require(e)}catch(t){if(StockReporterMap[e])return new StockReporterMap[e];throw new Error(`Unable to load reporter: ${e}`)}});for(const e of reporters)runner.on("activeFileChanged",e.activeFileChanged),runner.on("beforeTest",e.beforeTest),runner.on("testSuccess",e.testSuccess),runner.on("testFail",e.testFail),runner.on("testTimeout",e.testTimeout),runner.on("beforeDescribe",e.beforeDescribe),runner.on("afterDescribe",e.afterDescribe);const globalFunctions=["it","describe","after","afterEach","before","beforeEach"];for(const e of globalFunctions)global[e]=runner[e];global.__testRunner=runner;const moduleResolver=new ModuleResolver(runner);Promise.all(reporters.map(e=>e.initialize())).then(()=>moduleResolver.resolveGlob(finalConfig.input)).then(()=>{for(const e of reporters)e.runStart()}).then(()=>runner.run()).then(e=>{for(const t of reporters)t.runEnd(e)}).catch(e=>{console.error(e),process.exit(1)});
//# sourceMappingURL=index.cjs.js.map
