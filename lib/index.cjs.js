"use strict";var e=require("path"),t=require("fs"),n=require("module"),r=require("child_process"),i=require("os"),s=require("util"),o=require("stream"),a=require("events"),u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""),l=function(e){if(0<=e&&e<u.length)return u[e];throw new TypeError("Must be between 0 and 63: "+e)},c=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1};var h=function(e){var t,n="",r=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&r,(r>>>=5)>0&&(t|=32),n+=l(t)}while(r>0);return n},p=function(e,t,n){var r,i,s,o,a=e.length,u=0,l=0;do{if(t>=a)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(i=c(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));r=!!(32&i),u+=(i&=31)<<l,l+=5}while(r);n.value=(o=(s=u)>>1,1==(1&s)?-o:o),n.rest=t},f="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function g(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function d(e,t){return e(t={exports:{}},t.exports),t.exports}var m=d((function(e,t){t.getArg=function(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')};var n=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,r=/^data:.+\,.+$/;function i(e){var t=e.match(n);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function s(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function o(e){var n=e,r=i(e);if(r){if(!r.path)return e;n=r.path}for(var o,a=t.isAbsolute(n),u=n.split(/\/+/),l=0,c=u.length-1;c>=0;c--)"."===(o=u[c])?u.splice(c,1):".."===o?l++:l>0&&(""===o?(u.splice(c+1,l),l=0):(u.splice(c,2),l--));return""===(n=u.join("/"))&&(n=a?"/":"."),r?(r.path=n,s(r)):n}function a(e,t){""===e&&(e="."),""===t&&(t=".");var n=i(t),a=i(e);if(a&&(e=a.path||"/"),n&&!n.scheme)return a&&(n.scheme=a.scheme),s(n);if(n||t.match(r))return t;if(a&&!a.host&&!a.path)return a.host=t,s(a);var u="/"===t.charAt(0)?t:o(e.replace(/\/+$/,"")+"/"+t);return a?(a.path=u,s(a)):u}t.urlParse=i,t.urlGenerate=s,t.normalize=o,t.join=a,t.isAbsolute=function(e){return"/"===e.charAt(0)||n.test(e)},t.relative=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var n=0;0!==t.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return t;if((e=e.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return t;++n}return Array(n+1).join("../")+t.substr(e.length+1)};var u=!("__proto__"in Object.create(null));function l(e){return e}function c(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function h(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}t.toSetString=u?l:function(e){return c(e)?"$"+e:e},t.fromSetString=u?l:function(e){return c(e)?e.slice(1):e},t.compareByOriginalPositions=function(e,t,n){var r=h(e.source,t.source);return 0!==r||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)||n||0!==(r=e.generatedColumn-t.generatedColumn)||0!==(r=e.generatedLine-t.generatedLine)?r:h(e.name,t.name)},t.compareByGeneratedPositionsDeflated=function(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r||0!==(r=e.generatedColumn-t.generatedColumn)||n||0!==(r=h(e.source,t.source))||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)?r:h(e.name,t.name)},t.compareByGeneratedPositionsInflated=function(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n||0!==(n=e.generatedColumn-t.generatedColumn)||0!==(n=h(e.source,t.source))||0!==(n=e.originalLine-t.originalLine)||0!==(n=e.originalColumn-t.originalColumn)?n:h(e.name,t.name)},t.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},t.computeSourceURL=function(e,t,n){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),n){var r=i(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var u=r.path.lastIndexOf("/");u>=0&&(r.path=r.path.substring(0,u+1))}t=a(s(r),t)}return o(t)}})),_=(m.getArg,m.urlParse,m.urlGenerate,m.normalize,m.join,m.isAbsolute,m.relative,m.toSetString,m.fromSetString,m.compareByOriginalPositions,m.compareByGeneratedPositionsDeflated,m.compareByGeneratedPositionsInflated,m.parseSourceMapInput,m.computeSourceURL,Object.prototype.hasOwnProperty),y="undefined"!=typeof Map;function v(){this._array=[],this._set=y?new Map:Object.create(null)}v.fromArray=function(e,t){for(var n=new v,r=0,i=e.length;r<i;r++)n.add(e[r],t);return n},v.prototype.size=function(){return y?this._set.size:Object.getOwnPropertyNames(this._set).length},v.prototype.add=function(e,t){var n=y?e:m.toSetString(e),r=y?this.has(e):_.call(this._set,n),i=this._array.length;r&&!t||this._array.push(e),r||(y?this._set.set(e,i):this._set[n]=i)},v.prototype.has=function(e){if(y)return this._set.has(e);var t=m.toSetString(e);return _.call(this._set,t)},v.prototype.indexOf=function(e){if(y){var t=this._set.get(e);if(t>=0)return t}else{var n=m.toSetString(e);if(_.call(this._set,n))return this._set[n]}throw new Error('"'+e+'" is not in the set.')},v.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},v.prototype.toArray=function(){return this._array.slice()};var b={ArraySet:v};function S(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}S.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},S.prototype.add=function(e){var t,n,r,i,s,o;t=this._last,n=e,r=t.generatedLine,i=n.generatedLine,s=t.generatedColumn,o=n.generatedColumn,i>r||i==r&&o>=s||m.compareByGeneratedPositionsInflated(t,n)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},S.prototype.toArray=function(){return this._sorted||(this._array.sort(m.compareByGeneratedPositionsInflated),this._sorted=!0),this._array};var E=b.ArraySet,A={MappingList:S}.MappingList;function R(e){e||(e={}),this._file=m.getArg(e,"file",null),this._sourceRoot=m.getArg(e,"sourceRoot",null),this._skipValidation=m.getArg(e,"skipValidation",!1),this._sources=new E,this._names=new E,this._mappings=new A,this._sourcesContents=null}R.prototype._version=3,R.fromSourceMap=function(e){var t=e.sourceRoot,n=new R({file:e.file,sourceRoot:t});return e.eachMapping((function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=t&&(r.source=m.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),n.addMapping(r)})),e.sources.forEach((function(r){var i=r;null!==t&&(i=m.relative(t,r)),n._sources.has(i)||n._sources.add(i);var s=e.sourceContentFor(r);null!=s&&n.setSourceContent(r,s)})),n},R.prototype.addMapping=function(e){var t=m.getArg(e,"generated"),n=m.getArg(e,"original",null),r=m.getArg(e,"source",null),i=m.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,i),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=i&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:i})},R.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=m.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[m.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[m.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},R.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var i=this._sourceRoot;null!=i&&(r=m.relative(i,r));var s=new E,o=new E;this._mappings.unsortedForEach((function(t){if(t.source===r&&null!=t.originalLine){var a=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=a.source&&(t.source=a.source,null!=n&&(t.source=m.join(n,t.source)),null!=i&&(t.source=m.relative(i,t.source)),t.originalLine=a.line,t.originalColumn=a.column,null!=a.name&&(t.name=a.name))}var u=t.source;null==u||s.has(u)||s.add(u);var l=t.name;null==l||o.has(l)||o.add(l)}),this),this._sources=s,this._names=o,e.sources.forEach((function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=m.join(n,t)),null!=i&&(t=m.relative(i,t)),this.setSourceContent(t,r))}),this)},R.prototype._validateMapping=function(e,t,n,r){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||n||r)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},R.prototype._serializeMappings=function(){for(var e,t,n,r,i=0,s=1,o=0,a=0,u=0,l=0,c="",p=this._mappings.toArray(),f=0,g=p.length;f<g;f++){if(e="",(t=p[f]).generatedLine!==s)for(i=0;t.generatedLine!==s;)e+=";",s++;else if(f>0){if(!m.compareByGeneratedPositionsInflated(t,p[f-1]))continue;e+=","}e+=h(t.generatedColumn-i),i=t.generatedColumn,null!=t.source&&(r=this._sources.indexOf(t.source),e+=h(r-l),l=r,e+=h(t.originalLine-1-a),a=t.originalLine-1,e+=h(t.originalColumn-o),o=t.originalColumn,null!=t.name&&(n=this._names.indexOf(t.name),e+=h(n-u),u=n)),c+=e}return c},R.prototype._generateSourcesContent=function(e,t){return e.map((function(e){if(!this._sourcesContents)return null;null!=t&&(e=m.relative(t,e));var n=m.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null}),this)},R.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},R.prototype.toString=function(){return JSON.stringify(this.toJSON())};var C={SourceMapGenerator:R},w=d((function(e,t){t.GREATEST_LOWER_BOUND=1,t.LEAST_UPPER_BOUND=2,t.search=function(e,n,r,i){if(0===n.length)return-1;var s=function e(n,r,i,s,o,a){var u=Math.floor((r-n)/2)+n,l=o(i,s[u],!0);return 0===l?u:l>0?r-u>1?e(u,r,i,s,o,a):a==t.LEAST_UPPER_BOUND?r<s.length?r:-1:u:u-n>1?e(n,u,i,s,o,a):a==t.LEAST_UPPER_BOUND?u:n<0?-1:n}(-1,n.length,e,n,r,i||t.GREATEST_LOWER_BOUND);if(s<0)return-1;for(;s-1>=0&&0===r(n[s],n[s-1],!0);)--s;return s}}));w.GREATEST_LOWER_BOUND,w.LEAST_UPPER_BOUND,w.search;function O(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function T(e,t,n,r){if(n<r){var i=n-1;O(e,(u=n,l=r,Math.round(u+Math.random()*(l-u))),r);for(var s=e[r],o=n;o<r;o++)t(e[o],s)<=0&&O(e,i+=1,o);O(e,i+1,o);var a=i+1;T(e,t,n,a-1),T(e,t,a+1,r)}var u,l}var L=b.ArraySet,P=function(e,t){T(e,t,0,e.length-1)};function x(e,t){var n=e;return"string"==typeof e&&(n=m.parseSourceMapInput(e)),null!=n.sections?new N(n,t):new M(n,t)}x.fromSourceMap=function(e,t){return M.fromSourceMap(e,t)},x.prototype._version=3,x.prototype.__generatedMappings=null,Object.defineProperty(x.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),x.prototype.__originalMappings=null,Object.defineProperty(x.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),x.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return";"===n||","===n},x.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},x.GENERATED_ORDER=1,x.ORIGINAL_ORDER=2,x.GREATEST_LOWER_BOUND=1,x.LEAST_UPPER_BOUND=2,x.prototype.eachMapping=function(e,t,n){var r,i=t||null;switch(n||x.GENERATED_ORDER){case x.GENERATED_ORDER:r=this._generatedMappings;break;case x.ORIGINAL_ORDER:r=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var s=this.sourceRoot;r.map((function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=m.computeSourceURL(s,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,i)},x.prototype.allGeneratedPositionsFor=function(e){var t=m.getArg(e,"line"),n={source:m.getArg(e,"source"),originalLine:t,originalColumn:m.getArg(e,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var r=[],i=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",m.compareByOriginalPositions,w.LEAST_UPPER_BOUND);if(i>=0){var s=this._originalMappings[i];if(void 0===e.column)for(var o=s.originalLine;s&&s.originalLine===o;)r.push({line:m.getArg(s,"generatedLine",null),column:m.getArg(s,"generatedColumn",null),lastColumn:m.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i];else for(var a=s.originalColumn;s&&s.originalLine===t&&s.originalColumn==a;)r.push({line:m.getArg(s,"generatedLine",null),column:m.getArg(s,"generatedColumn",null),lastColumn:m.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i]}return r};var k=x;function M(e,t){var n=e;"string"==typeof e&&(n=m.parseSourceMapInput(e));var r=m.getArg(n,"version"),i=m.getArg(n,"sources"),s=m.getArg(n,"names",[]),o=m.getArg(n,"sourceRoot",null),a=m.getArg(n,"sourcesContent",null),u=m.getArg(n,"mappings"),l=m.getArg(n,"file",null);if(r!=this._version)throw new Error("Unsupported version: "+r);o&&(o=m.normalize(o)),i=i.map(String).map(m.normalize).map((function(e){return o&&m.isAbsolute(o)&&m.isAbsolute(e)?m.relative(o,e):e})),this._names=L.fromArray(s.map(String),!0),this._sources=L.fromArray(i,!0),this._absoluteSources=this._sources.toArray().map((function(e){return m.computeSourceURL(o,e,t)})),this.sourceRoot=o,this.sourcesContent=a,this._mappings=u,this._sourceMapURL=t,this.file=l}function F(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}M.prototype=Object.create(x.prototype),M.prototype.consumer=x,M.prototype._findSourceIndex=function(e){var t,n=e;if(null!=this.sourceRoot&&(n=m.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},M.fromSourceMap=function(e,t){var n=Object.create(M.prototype),r=n._names=L.fromArray(e._names.toArray(),!0),i=n._sources=L.fromArray(e._sources.toArray(),!0);n.sourceRoot=e._sourceRoot,n.sourcesContent=e._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=e._file,n._sourceMapURL=t,n._absoluteSources=n._sources.toArray().map((function(e){return m.computeSourceURL(n.sourceRoot,e,t)}));for(var s=e._mappings.toArray().slice(),o=n.__generatedMappings=[],a=n.__originalMappings=[],u=0,l=s.length;u<l;u++){var c=s[u],h=new F;h.generatedLine=c.generatedLine,h.generatedColumn=c.generatedColumn,c.source&&(h.source=i.indexOf(c.source),h.originalLine=c.originalLine,h.originalColumn=c.originalColumn,c.name&&(h.name=r.indexOf(c.name)),a.push(h)),o.push(h)}return P(n.__originalMappings,m.compareByOriginalPositions),n},M.prototype._version=3,Object.defineProperty(M.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),M.prototype._parseMappings=function(e,t){for(var n,r,i,s,o,a=1,u=0,l=0,c=0,h=0,f=0,g=e.length,d=0,_={},y={},v=[],b=[];d<g;)if(";"===e.charAt(d))a++,d++,u=0;else if(","===e.charAt(d))d++;else{for((n=new F).generatedLine=a,s=d;s<g&&!this._charIsMappingSeparator(e,s);s++);if(i=_[r=e.slice(d,s)])d+=r.length;else{for(i=[];d<s;)p(e,d,y),o=y.value,d=y.rest,i.push(o);if(2===i.length)throw new Error("Found a source, but no line and column");if(3===i.length)throw new Error("Found a source and line, but no column");_[r]=i}n.generatedColumn=u+i[0],u=n.generatedColumn,i.length>1&&(n.source=h+i[1],h+=i[1],n.originalLine=l+i[2],l=n.originalLine,n.originalLine+=1,n.originalColumn=c+i[3],c=n.originalColumn,i.length>4&&(n.name=f+i[4],f+=i[4])),b.push(n),"number"==typeof n.originalLine&&v.push(n)}P(b,m.compareByGeneratedPositionsDeflated),this.__generatedMappings=b,P(v,m.compareByOriginalPositions),this.__originalMappings=v},M.prototype._findMapping=function(e,t,n,r,i,s){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return w.search(e,t,i,s)},M.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},M.prototype.originalPositionFor=function(e){var t={generatedLine:m.getArg(e,"line"),generatedColumn:m.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",m.compareByGeneratedPositionsDeflated,m.getArg(e,"bias",x.GREATEST_LOWER_BOUND));if(n>=0){var r=this._generatedMappings[n];if(r.generatedLine===t.generatedLine){var i=m.getArg(r,"source",null);null!==i&&(i=this._sources.at(i),i=m.computeSourceURL(this.sourceRoot,i,this._sourceMapURL));var s=m.getArg(r,"name",null);return null!==s&&(s=this._names.at(s)),{source:i,line:m.getArg(r,"originalLine",null),column:m.getArg(r,"originalColumn",null),name:s}}}return{source:null,line:null,column:null,name:null}},M.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},M.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var n=this._findSourceIndex(e);if(n>=0)return this.sourcesContent[n];var r,i=e;if(null!=this.sourceRoot&&(i=m.relative(this.sourceRoot,i)),null!=this.sourceRoot&&(r=m.urlParse(this.sourceRoot))){var s=i.replace(/^file:\/\//,"");if("file"==r.scheme&&this._sources.has(s))return this.sourcesContent[this._sources.indexOf(s)];if((!r.path||"/"==r.path)&&this._sources.has("/"+i))return this.sourcesContent[this._sources.indexOf("/"+i)]}if(t)return null;throw new Error('"'+i+'" is not in the SourceMap.')},M.prototype.generatedPositionFor=function(e){var t=m.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var n={source:t,originalLine:m.getArg(e,"line"),originalColumn:m.getArg(e,"column")},r=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",m.compareByOriginalPositions,m.getArg(e,"bias",x.GREATEST_LOWER_BOUND));if(r>=0){var i=this._originalMappings[r];if(i.source===n.source)return{line:m.getArg(i,"generatedLine",null),column:m.getArg(i,"generatedColumn",null),lastColumn:m.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}};var I=M;function N(e,t){var n=e;"string"==typeof e&&(n=m.parseSourceMapInput(e));var r=m.getArg(n,"version"),i=m.getArg(n,"sections");if(r!=this._version)throw new Error("Unsupported version: "+r);this._sources=new L,this._names=new L;var s={line:-1,column:0};this._sections=i.map((function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var n=m.getArg(e,"offset"),r=m.getArg(n,"line"),i=m.getArg(n,"column");if(r<s.line||r===s.line&&i<s.column)throw new Error("Section offsets must be ordered and non-overlapping.");return s=n,{generatedOffset:{generatedLine:r+1,generatedColumn:i+1},consumer:new x(m.getArg(e,"map"),t)}}))}N.prototype=Object.create(x.prototype),N.prototype.constructor=x,N.prototype._version=3,Object.defineProperty(N.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),N.prototype.originalPositionFor=function(e){var t={generatedLine:m.getArg(e,"line"),generatedColumn:m.getArg(e,"column")},n=w.search(t,this._sections,(function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n||e.generatedColumn-t.generatedOffset.generatedColumn})),r=this._sections[n];return r?r.consumer.originalPositionFor({line:t.generatedLine-(r.generatedOffset.generatedLine-1),column:t.generatedColumn-(r.generatedOffset.generatedLine===t.generatedLine?r.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},N.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},N.prototype.sourceContentFor=function(e,t){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(e,!0);if(r)return r}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},N.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(-1!==n.consumer._findSourceIndex(m.getArg(e,"source"))){var r=n.consumer.generatedPositionFor(e);if(r)return{line:r.line+(n.generatedOffset.generatedLine-1),column:r.column+(n.generatedOffset.generatedLine===r.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},N.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var r=this._sections[n],i=r.consumer._generatedMappings,s=0;s<i.length;s++){var o=i[s],a=r.consumer._sources.at(o.source);a=m.computeSourceURL(r.consumer.sourceRoot,a,this._sourceMapURL),this._sources.add(a),a=this._sources.indexOf(a);var u=null;o.name&&(u=r.consumer._names.at(o.name),this._names.add(u),u=this._names.indexOf(u));var l={source:a,generatedLine:o.generatedLine+(r.generatedOffset.generatedLine-1),generatedColumn:o.generatedColumn+(r.generatedOffset.generatedLine===o.generatedLine?r.generatedOffset.generatedColumn-1:0),originalLine:o.originalLine,originalColumn:o.originalColumn,name:u};this.__generatedMappings.push(l),"number"==typeof l.originalLine&&this.__originalMappings.push(l)}P(this.__generatedMappings,m.compareByGeneratedPositionsDeflated),P(this.__originalMappings,m.compareByOriginalPositions)};var H={SourceMapConsumer:k,BasicSourceMapConsumer:I,IndexedSourceMapConsumer:N},B=C.SourceMapGenerator,$=/(\r?\n)/,D="$$$isSourceNode$$$";function j(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this[D]=!0,null!=r&&this.add(r)}j.fromStringWithSourceMap=function(e,t,n){var r=new j,i=e.split($),s=0,o=function(){return e()+(e()||"");function e(){return s<i.length?i[s++]:void 0}},a=1,u=0,l=null;return t.eachMapping((function(e){if(null!==l){if(!(a<e.generatedLine)){var t=(n=i[s]||"").substr(0,e.generatedColumn-u);return i[s]=n.substr(e.generatedColumn-u),u=e.generatedColumn,c(l,t),void(l=e)}c(l,o()),a++,u=0}for(;a<e.generatedLine;)r.add(o()),a++;if(u<e.generatedColumn){var n=i[s]||"";r.add(n.substr(0,e.generatedColumn)),i[s]=n.substr(e.generatedColumn),u=e.generatedColumn}l=e}),this),s<i.length&&(l&&c(l,o()),r.add(i.splice(s).join(""))),t.sources.forEach((function(e){var i=t.sourceContentFor(e);null!=i&&(null!=n&&(e=m.join(n,e)),r.setSourceContent(e,i))})),r;function c(e,t){if(null===e||void 0===e.source)r.add(t);else{var i=n?m.join(n,e.source):e.source;r.add(new j(e.originalLine,e.originalColumn,i,t,e.name))}}},j.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e[D]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},j.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[D]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},j.prototype.walk=function(e){for(var t,n=0,r=this.children.length;n<r;n++)(t=this.children[n])[D]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},j.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;n<r-1;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},j.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n[D]?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},j.prototype.setSourceContent=function(e,t){this.sourceContents[m.toSetString(e)]=t},j.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;t<n;t++)this.children[t][D]&&this.children[t].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(t=0,n=r.length;t<n;t++)e(m.fromSetString(r[t]),this.sourceContents[r[t]])},j.prototype.toString=function(){var e="";return this.walk((function(t){e+=t})),e},j.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new B(e),r=!1,i=null,s=null,o=null,a=null;return this.walk((function(e,u){t.code+=e,null!==u.source&&null!==u.line&&null!==u.column?(i===u.source&&s===u.line&&o===u.column&&a===u.name||n.addMapping({source:u.source,original:{line:u.line,column:u.column},generated:{line:t.line,column:t.column},name:u.name}),i=u.source,s=u.line,o=u.column,a=u.name,r=!0):r&&(n.addMapping({generated:{line:t.line,column:t.column}}),i=null,r=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(t.line++,t.column=0,l+1===c?(i=null,r=!1):r&&n.addMapping({source:u.source,original:{line:u.line,column:u.column},generated:{line:t.line,column:t.column},name:u.name})):t.column++})),this.walkSourceContents((function(e,t){n.setSourceContent(e,t)})),{code:t.code,map:n}};var G={SourceMapGenerator:C.SourceMapGenerator,SourceMapConsumer:H.SourceMapConsumer,SourceNode:{SourceNode:j}.SourceNode},U=Object.prototype.toString,q="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;var W,Q=function(e,t,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return r=e,"ArrayBuffer"===U.call(r).slice(8,-1)?function(e,t,n){t>>>=0;var r=e.byteLength-t;if(r<0)throw new RangeError("'offset' is out of bounds");if(void 0===n)n=r;else if((n>>>=0)>r)throw new RangeError("'length' is out of bounds");return q?Buffer.from(e.slice(t,t+n)):new Buffer(new Uint8Array(e.slice(t,t+n)))}(e,t,n):"string"==typeof e?function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');return q?Buffer.from(e,t):new Buffer(e,t)}(e,t):q?Buffer.from(e):new Buffer(e);var r},K=G.SourceMapConsumer,V=e;try{(W=t).existsSync&&W.readFileSync||(W=null)}catch(e){}var X=!1,Y=!1,Z=!1,z="auto",J={},ee={},te=/^data:application\/json[^,]+base64,/,ne=[],re=[];function ie(){return"browser"===z||"node"!==z&&("undefined"!=typeof window&&"function"==typeof XMLHttpRequest&&!(window.require&&window.module&&window.process&&"renderer"===window.process.type))}function se(e){return function(t){for(var n=0;n<e.length;n++){var r=e[n](t);if(r)return r}return null}}var oe=se(ne);function ae(e,t){if(!e)return t;var n=V.dirname(e),r=/^\w+:\/\/[^\/]*/.exec(n),i=r?r[0]:"",s=n.slice(i.length);return i&&/^\/\w\:/.test(s)?(i+="/")+V.resolve(n.slice(i.length),t).replace(/\\/g,"/"):i+V.resolve(n.slice(i.length),t)}ne.push((function(e){if(e=e.trim(),/^file:/.test(e)&&(e=e.replace(/file:\/\/\/(\w:)?/,(function(e,t){return t?"":"/"}))),e in J)return J[e];var t="";try{if(W)W.existsSync(e)&&(t=W.readFileSync(e,"utf8"));else{var n=new XMLHttpRequest;n.open("GET",e,!1),n.send(null),4===n.readyState&&200===n.status&&(t=n.responseText)}}catch(e){}return J[e]=t}));var ue=se(re);function le(e){var t=ee[e.source];if(!t){var n=ue(e.source);n?(t=ee[e.source]={url:n.url,map:new K(n.map)}).map.sourcesContent&&t.map.sources.forEach((function(e,n){var r=t.map.sourcesContent[n];if(r){var i=ae(t.url,e);J[i]=r}})):t=ee[e.source]={url:null,map:null}}if(t&&t.map&&"function"==typeof t.map.originalPositionFor){var r=t.map.originalPositionFor(e);if(null!==r.source)return r.source=ae(t.url,r.source),r}return e}function ce(){var e,t="";if(this.isNative())t="native";else{!(e=this.getScriptNameOrSourceURL())&&this.isEval()&&(t=this.getEvalOrigin(),t+=", "),t+=e||"<anonymous>";var n=this.getLineNumber();if(null!=n){t+=":"+n;var r=this.getColumnNumber();r&&(t+=":"+r)}}var i="",s=this.getFunctionName(),o=!0,a=this.isConstructor();if(!(this.isToplevel()||a)){var u=this.getTypeName();"[object Object]"===u&&(u="null");var l=this.getMethodName();s?(u&&0!=s.indexOf(u)&&(i+=u+"."),i+=s,l&&s.indexOf("."+l)!=s.length-l.length-1&&(i+=" [as "+l+"]")):i+=u+"."+(l||"<anonymous>")}else a?i+="new "+(s||"<anonymous>"):s?i+=s:(i+=t,o=!1);return o&&(i+=" ("+t+")"),i}function he(e){var t={};return Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){t[n]=/^(?:is|get)/.test(n)?function(){return e[n].call(e)}:e[n]})),t.toString=ce,t}function pe(e,t){if(void 0===t&&(t={nextPosition:null,curPosition:null}),e.isNative())return t.curPosition=null,e;var n=e.getFileName()||e.getScriptNameOrSourceURL();if(n){var r=e.getLineNumber(),i=e.getColumnNumber()-1,s=/^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/.test(process.version)?0:62;1===r&&i>s&&!ie()&&!e.isEval()&&(i-=s);var o=le({source:n,line:r,column:i});t.curPosition=o;var a=(e=he(e)).getFunctionName;return e.getFunctionName=function(){return null==t.nextPosition?a():t.nextPosition.name||a()},e.getFileName=function(){return o.source},e.getLineNumber=function(){return o.line},e.getColumnNumber=function(){return o.column+1},e.getScriptNameOrSourceURL=function(){return o.source},e}var u=e.isEval()&&e.getEvalOrigin();return u?(u=function e(t){var n=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(t);if(n){var r=le({source:n[2],line:+n[3],column:n[4]-1});return"eval at "+n[1]+" ("+r.source+":"+r.line+":"+(r.column+1)+")"}return(n=/^eval at ([^(]+) \((.+)\)$/.exec(t))?"eval at "+n[1]+" ("+e(n[2])+")":t}(u),(e=he(e)).getEvalOrigin=function(){return u},e):e}function fe(e,t){Z&&(J={},ee={});for(var n=(e.name||"Error")+": "+(e.message||""),r={nextPosition:null,curPosition:null},i=[],s=t.length-1;s>=0;s--)i.push("\n    at "+pe(t[s],r)),r.nextPosition=r.curPosition;return r.curPosition=r.nextPosition=null,n+i.reverse().join("")}function ge(e){var t=function(e){var t=/\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(e.stack);if(t){var n=t[1],r=+t[2],i=+t[3],s=J[n];if(!s&&W&&W.existsSync(n))try{s=W.readFileSync(n,"utf8")}catch(e){s=""}if(s){var o=s.split(/(?:\r\n|\r|\n)/)[r-1];if(o)return n+":"+r+"\n"+o+"\n"+new Array(i).join(" ")+"^"}}return null}(e);process.stderr._handle&&process.stderr._handle.setBlocking&&process.stderr._handle.setBlocking(!0),t&&(console.error(),console.error(t)),console.error(e.stack),process.exit(1)}re.push((function(e){var t,n=function(e){var t;if(ie())try{var n=new XMLHttpRequest;n.open("GET",e,!1),n.send(null),t=4===n.readyState?n.responseText:null;var r=n.getResponseHeader("SourceMap")||n.getResponseHeader("X-SourceMap");if(r)return r}catch(e){}t=oe(e);for(var i,s,o=/(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/gm;s=o.exec(t);)i=s;return i?i[1]:null}(e);if(!n)return null;if(te.test(n)){var r=n.slice(n.indexOf(",")+1);t=Q(r,"base64").toString(),n=e}else n=ae(e,n),t=oe(n);return t?{url:n,map:t}:null}));var de=d((function(e){const t="Hyper"===process.env.TERM_PROGRAM,n="win32"===process.platform,r="linux"===process.platform,i={ballotDisabled:"☒",ballotOff:"☐",ballotOn:"☑",bullet:"•",bulletWhite:"◦",fullBlock:"█",heart:"❤",identicalTo:"≡",line:"─",mark:"※",middot:"·",minus:"－",multiplication:"×",obelus:"÷",pencilDownRight:"✎",pencilRight:"✏",pencilUpRight:"✐",percent:"%",pilcrow2:"❡",pilcrow:"¶",plusMinus:"±",section:"§",starsOff:"☆",starsOn:"★",upDownArrow:"↕"},s=Object.assign({},i,{check:"√",cross:"×",ellipsisLarge:"...",ellipsis:"...",info:"i",question:"?",questionSmall:"?",pointer:">",pointerSmall:"»",radioOff:"( )",radioOn:"(*)",warning:"‼"}),o=Object.assign({},i,{ballotCross:"✘",check:"✔",cross:"✖",ellipsisLarge:"⋯",ellipsis:"…",info:"ℹ",question:"?",questionFull:"？",questionSmall:"﹖",pointer:r?"▸":"❯",pointerSmall:r?"‣":"›",radioOff:"◯",radioOn:"◉",warning:"⚠"});e.exports=n&&!t?s:o,Reflect.defineProperty(e.exports,"common",{enumerable:!1,value:i}),Reflect.defineProperty(e.exports,"windows",{enumerable:!1,value:s}),Reflect.defineProperty(e.exports,"other",{enumerable:!1,value:o})}));const me=/[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g,_e=()=>{const e={enabled:!0,visible:!0,styles:{},keys:{}};"FORCE_COLOR"in process.env&&(e.enabled="0"!==process.env.FORCE_COLOR);const t=(e,t,n)=>"function"==typeof e?e(t):e.wrap(t,n),n=(n,r)=>{if(""===n||null==n)return"";if(!1===e.enabled)return n;if(!1===e.visible)return"";let i=""+n,s=i.includes("\n"),o=r.length;for(o>0&&r.includes("unstyle")&&(r=[...new Set(["unstyle",...r])].reverse());o-- >0;)i=t(e.styles[r[o]],i,s);return i},r=(t,r,i)=>{e.styles[t]=(e=>{let t=e.open=`[${e.codes[0]}m`,n=e.close=`[${e.codes[1]}m`,r=e.regex=new RegExp(`\\u001b\\[${e.codes[1]}m`,"g");return e.wrap=(e,i)=>{e.includes(n)&&(e=e.replace(r,n+t));let s=t+e+n;return i?s.replace(/\r*\n/g,`${n}$&${t}`):s},e})({name:t,codes:r}),(e.keys[i]||(e.keys[i]=[])).push(t),Reflect.defineProperty(e,t,{configurable:!0,enumerable:!0,set(n){e.alias(t,n)},get(){let r=e=>n(e,r.stack);return Reflect.setPrototypeOf(r,e),r.stack=this.stack?this.stack.concat(t):[t],r}})};return r("reset",[0,0],"modifier"),r("bold",[1,22],"modifier"),r("dim",[2,22],"modifier"),r("italic",[3,23],"modifier"),r("underline",[4,24],"modifier"),r("inverse",[7,27],"modifier"),r("hidden",[8,28],"modifier"),r("strikethrough",[9,29],"modifier"),r("black",[30,39],"color"),r("red",[31,39],"color"),r("green",[32,39],"color"),r("yellow",[33,39],"color"),r("blue",[34,39],"color"),r("magenta",[35,39],"color"),r("cyan",[36,39],"color"),r("white",[37,39],"color"),r("gray",[90,39],"color"),r("grey",[90,39],"color"),r("bgBlack",[40,49],"bg"),r("bgRed",[41,49],"bg"),r("bgGreen",[42,49],"bg"),r("bgYellow",[43,49],"bg"),r("bgBlue",[44,49],"bg"),r("bgMagenta",[45,49],"bg"),r("bgCyan",[46,49],"bg"),r("bgWhite",[47,49],"bg"),r("blackBright",[90,39],"bright"),r("redBright",[91,39],"bright"),r("greenBright",[92,39],"bright"),r("yellowBright",[93,39],"bright"),r("blueBright",[94,39],"bright"),r("magentaBright",[95,39],"bright"),r("cyanBright",[96,39],"bright"),r("whiteBright",[97,39],"bright"),r("bgBlackBright",[100,49],"bgBright"),r("bgRedBright",[101,49],"bgBright"),r("bgGreenBright",[102,49],"bgBright"),r("bgYellowBright",[103,49],"bgBright"),r("bgBlueBright",[104,49],"bgBright"),r("bgMagentaBright",[105,49],"bgBright"),r("bgCyanBright",[106,49],"bgBright"),r("bgWhiteBright",[107,49],"bgBright"),e.ansiRegex=me,e.hasColor=e.hasAnsi=t=>(e.ansiRegex.lastIndex=0,"string"==typeof t&&""!==t&&e.ansiRegex.test(t)),e.alias=(t,r)=>{let i="string"==typeof r?e[r]:r;if("function"!=typeof i)throw new TypeError("Expected alias to be the name of an existing color (string) or a function");i.stack||(Reflect.defineProperty(i,"name",{value:t}),e.styles[t]=i,i.stack=[t]),Reflect.defineProperty(e,t,{configurable:!0,enumerable:!0,set(n){e.alias(t,n)},get(){let t=e=>n(e,t.stack);return Reflect.setPrototypeOf(t,e),t.stack=this.stack?this.stack.concat(i.stack):i.stack,t}})},e.theme=t=>{if(null===(n=t)||"object"!=typeof n||Array.isArray(n))throw new TypeError("Expected theme to be an object");var n;for(let n of Object.keys(t))e.alias(n,t[n]);return e},e.alias("unstyle",t=>"string"==typeof t&&""!==t?(e.ansiRegex.lastIndex=0,t.replace(e.ansiRegex,"")):""),e.alias("noop",e=>e),e.none=e.clear=e.noop,e.stripColor=e.unstyle,e.symbols=de,e.define=r,e};var ye=_e(),ve=_e;ye.create=ve;var be=d((function(e,t){function n(e,t){return e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!r(e)||!r(t)||"object"!=typeof e&&"object"!=typeof t?e===t:function(e,t){let i,s,o,a;if(!r(e)||!r(t))return!1;if(e.prototype!==t.prototype)return!1;try{o=Object.keys(e),a=Object.keys(t)}catch(e){return!1}if(o.length!==a.length)return!1;for(o.sort(),a.sort(),i=o.length-1;i>=0;i--)if(o[i]!==a[i])return!1;for(i=o.length-1;i>=0;i--)if(s=o[i],!n(e[s],t[s]))return!1;return typeof e==typeof t}(e,t))}function r(e){return null!=e}Object.defineProperty(t,"__esModule",{value:!0}),t.deepEqual=void 0,t.deepEqual=n}));g(be);be.deepEqual;var Se=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.without=t.union=void 0,t.union=function(e,t){if(!e)return t||[];if(!t)return e;for(const n of t)-1===e.indexOf(n)&&e.push(n);return e},t.without=function(e,t){if(!e)return[];const n=e.indexOf(t);return-1!==n&&e.splice(n,1),e}}));g(Se);Se.without,Se.union;var Ee=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleEventEmitter=void 0;t.SimpleEventEmitter=class{constructor(){this.onListeners={},this.onceListeners={}}on(e,t){this.onListeners[e]=Se.union(this.onListeners[e],[t])}once(e,t){this.onceListeners[e]=Se.union(this.onceListeners[e],[t])}off(e,t){this.onListeners[e]=Se.without(this.onListeners[e],t),this.onceListeners[e]=Se.without(this.onceListeners[e],t)}emit(e,...t){if(this.onListeners[e])for(const n of this.onListeners[e])n.call(null,...t);if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const n of this.onceListeners[e])n.call(null,...t);this.onceListeners[e]=[]}}emitAndWaitForCompletion(e,...t){const n=[];if(this.onListeners[e])for(const r of this.onListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const r of this.onceListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}this.onceListeners[e]=[]}return Promise.all(n).then(e=>{})}}}));g(Ee);Ee.SimpleEventEmitter;var Ae=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SortedArray=void 0;function n(e,t){return e<t?-1:e>t?1:0}t.SortedArray=class{constructor(e=n,t=[]){this.array=[],this.compareFunction=e||n;const r=t.length;for(let e=0;e<r;e++)this.insert(t[e])}getData(){return this.array}insert(e){let t=this.searchInternal(e)+1;const n=this.array.length-1;for(;t<n&&0===this.compareFunction(e,this.array[t]);)t++;let r=this.array.length;for(this.array.push(e);r>t;)this.array[r]=this.array[--r];this.array[t]=e}search(e){const t=this.searchInternal(e);return 0!==this.compareFunction(this.array[t],e)?-1:t}remove(e){const t=this.search(e);t>=0&&this.array.splice(t,1)}searchInternal(e){let t,n,r=this.array.length-1,i=0;for(;r>=i;)if(t=Math.floor((r+i)/2),n=this.compareFunction(this.array[t],e),n<0)i=t+1;else{if(!(n>0))return t;r=t-1}return r}}}));g(Ae);Ae.SortedArray;var Re=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.INTERNAL_MOCKER_NAME=t.printObject=void 0;t.INTERNAL_MOCKER_NAME="__internalMocker",t.printObject=function(e){if(null===e)return"null";if(void 0===e)return"undefined";if(e instanceof RegExp)return e.toString();const t=function(e){const t=e.__internalMocker;return null!=t?t:null}(e);return null!==t?t.mockName:JSON.stringify(e)}}));g(Re);Re.INTERNAL_MOCKER_NAME,Re.printObject;var Ce=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.matcher=t.regexMatches=t.startsWith=t.lte=t.lt=t.gte=t.gt=t.eq=t.any=void 0,t.any=function(){const e={precedence:-1,matches:()=>!0,description:()=>"any()",equals:t=>t.description()===e.description()};return e},t.gt=function(e){const t={matches:t=>t>e,description:()=>`gt(${Re.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.lt=function(e){const t={matches:t=>t<e,description:()=>`lt(${Re.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.gte=function(e){const t={matches:t=>t>=e,description:()=>`gte(${Re.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.lte=function(e){const t={matches:t=>t<=e,description:()=>`lte(${Re.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.eq=function(e){const t={precedence:1,matches:t=>be.deepEqual(e,t),description:()=>Re.printObject(e),equals:e=>e.description()===t.description()};return t},t.startsWith=function(e){const t={matches:t=>t.startsWith(e),description:()=>"startsWith "+e,equals:e=>e.description()===t.description()};return t},t.regexMatches=function(e){const t={matches:t=>e.test(t),description:()=>e.toString(),equals:e=>e.description()===t.description()};return t},t.matcher=function(e){const t={matches:t=>e(t),description:()=>e.toString(),equals:e=>e.description()===t.description()};return t}}));g(Ce);Ce.matcher,Ce.regexMatches,Ce.startsWith,Ce.lte,Ce.lt,Ce.gte,Ce.gt,Ce.eq,Ce.any;var we=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.printObject=t.INTERNAL_MOCKER_NAME=t.startsWith=t.regexMatches=t.matcher=t.lte=t.lt=t.gte=t.gt=t.eq=t.any=t.SimpleEventEmitter=t.SortedArray=t.deepEqual=void 0,Object.defineProperty(t,"deepEqual",{enumerable:!0,get:function(){return be.deepEqual}}),Object.defineProperty(t,"SimpleEventEmitter",{enumerable:!0,get:function(){return Ee.SimpleEventEmitter}}),Object.defineProperty(t,"SortedArray",{enumerable:!0,get:function(){return Ae.SortedArray}}),Object.defineProperty(t,"any",{enumerable:!0,get:function(){return Ce.any}}),Object.defineProperty(t,"eq",{enumerable:!0,get:function(){return Ce.eq}}),Object.defineProperty(t,"gt",{enumerable:!0,get:function(){return Ce.gt}}),Object.defineProperty(t,"gte",{enumerable:!0,get:function(){return Ce.gte}}),Object.defineProperty(t,"lt",{enumerable:!0,get:function(){return Ce.lt}}),Object.defineProperty(t,"lte",{enumerable:!0,get:function(){return Ce.lte}}),Object.defineProperty(t,"matcher",{enumerable:!0,get:function(){return Ce.matcher}}),Object.defineProperty(t,"regexMatches",{enumerable:!0,get:function(){return Ce.regexMatches}}),Object.defineProperty(t,"startsWith",{enumerable:!0,get:function(){return Ce.startsWith}}),Object.defineProperty(t,"INTERNAL_MOCKER_NAME",{enumerable:!0,get:function(){return Re.INTERNAL_MOCKER_NAME}}),Object.defineProperty(t,"printObject",{enumerable:!0,get:function(){return Re.printObject}})}));g(we);we.printObject,we.INTERNAL_MOCKER_NAME,we.startsWith,we.regexMatches,we.matcher,we.lte,we.lt,we.gte,we.gt,we.eq,we.any,we.SimpleEventEmitter,we.SortedArray;var Oe=we.deepEqual;class Te{constructor(){this.currentDescribeTitleChain=[]}initialize(){return console.log("\n"+ye.whiteBright("☾ Umbra Test")),this.drawHorizontalLine(),Promise.resolve()}onTestStart(e){}onTestResult(e){const t=e.testInfo.describeTitleChain,n=t.length+1;if(t.length>0&&!Oe(this.currentDescribeTitleChain,t)){this.currentDescribeTitleChain=t,console.log(ye.cyan("⤷ ")+t[0]);for(let e=1;e<t.length;e++)console.log(this.getIndentedText(ye.cyan("⤷ ")+t[e],e+1))}"fail"===e.result?(console.log(this.getIndentedText(ye.redBright("✖ ")+e.testInfo.title,n)),console.log(this.getIndentedText(ye.red("⤷ Error: ")+e.error.message,n))):"timeout"===e.result?console.log(this.getIndentedText(ye.redBright("⏲ ")+e.testInfo.title,n)):"skipped"===e.result?console.log(this.getIndentedText(ye.yellow("SKIPPED ")+e.testInfo.title,n)):"success"===e.result&&console.log(this.getIndentedText(ye.green("✓ ")+e.testInfo.title,n))}onRunEnd(e){console.log(`Tests: ${ye.red(e.totalFailures.toString())} failures, ${ye.yellow(e.totalTimeouts.toString())} timeouts, ${ye.green(e.totalSuccesses.toString())} passed, ${e.totalTests} total`),console.log(`Time:  ${e.elapsedTimeMs}ms`)}getIndentedText(e,t){let n="";for(let e=0;e<t;e++)n+=" ";return n+e}drawHorizontalLine(){for(let e=0;e<process.stdout.columns-1;e++)process.stdout.write("─");process.stdout.write("\n")}}const Le={basic:Te},Pe=global;class xe{constructor(){this.watchedArgs=[],this.banner=null}withBanner(e){return this.banner=e,this}addArgument(e,t,n,r,i){if("trailing"===i&&this.watchedArgs.some(e=>"trailing"===e.type))throw new Error(`Can't add arg with name: ${e}, since another trailing arg already exists`);const s=[`--${e}`,`-${e}`,...t];for(const e of s){if(this.watchedArgs.some(t=>-1!==t.allAliases.indexOf(e)))throw new Error(`Can't add arg with name ${e}, since it already was added.`)}return this.watchedArgs.push({name:e,allAliases:s,help:n,required:r,type:i}),this}parse(e){const t=e.slice(2),n=this.watchedArgs.filter(e=>e.required);for(const e of n)if(!e.allAliases.some(e=>-1!==t.indexOf(e)))throw new Error(`Missing required arg with name ${e.name}, or aliases: ${e.allAliases.splice(1)}`);const r={};for(const e of this.watchedArgs)if("boolean"===e.type)r[e.name]=this.extractBoolean(e.allAliases,t);else if("string"===e.type){const n=this.extractString(e.allAliases,t);null!==n&&(r[e.name]=n)}else if("trailing"===e.type){const n=this.extractTrailing(t);null!==n&&(r[e.name]=n)}return r}extractBoolean(e,t){for(let n=0;n<t.length;n++)if(-1!==e.indexOf(t[n])){const e=t[n+1];return!("string"==typeof e&&"false"===e.toLowerCase())}return!1}extractString(e,t){for(let n=0;n<t.length;n++)if(-1!==e.indexOf(t[n])){const r=t[n+1];if(n===t.length-1)throw new Error(`Missing required arg value for string arg with name ${e[0]}`);return r}return null}extractTrailing(e){const t=this.getStartOfTail(e);return null!==t&&t<e.length?e.slice(t):null}getStartOfTail(e){const t={};for(const e of this.watchedArgs)for(const n of e.allAliases)t[n]=e.type;for(let n=e.length-1;n>=0;n--){const r=e[n].toLowerCase(),i=n>0?e[n-1].toLowerCase():null;if(!t[r]){if(null===i)return n;if(t[i])return"boolean"===t[i]&&"false"!==r&&"true"!==r?n:n+1}}return null}}class ke{constructor(e=new xe){this.argParser=e}parse(e){return this.argParser.addArgument("input",[],"Files, or globs, to run with the Umbra Test Runner",!1,"trailing").addArgument("debug",["-d","--inspect"],"Enables the Node debugger",!1,"boolean").addArgument("debugBreak",["-db","--debug-brk","--debug-break","--inspect-break"],"Enables the Node debugger, breaking once the first test is evaluated",!1,"boolean").addArgument("watch",["-w"],"Enables watch mode, which will evaluate all tests first and then again once changes occur",!1,"boolean").addArgument("configPath",["--config","-c"],"Sets the config file path",!1,"string").parse(e)}}class Me{constructor(e=r.spawn){this.spawnRef=r.spawn}spawn(e,t){return new Promise((n,r)=>{const i=this.spawnRef("tsc",["--outFile",t,e],{stdio:"inherit",shell:!0});i.on("error",r),i.on("close",n)})}}var Fe=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))};class Ie{constructor(n=t.promises.mkdir,r=t.promises.stat,i=require,s=new Me){this.makeCacheDir=e=>()=>this.statPromise(e).catch(()=>this.mkdirPromise(e)),this.getJsConfigPath=(t,n)=>{const r=e.basename(t,".ts");return()=>e.resolve(n,r+".js")},this.compileTsConfig=e=>t=>this.tsExecutor.spawn(e,t).then(()=>t),this.mkdirPromise=n,this.statPromise=r,this.requireRef=i,this.tsExecutor=s}loadConfig(t,n){return Fe(this,void 0,void 0,(function*(){if(!t)return Promise.resolve(null);if(!n)throw new Error("Missing cache directory");const r=e.resolve(t);if(r.endsWith(".js"))return this.loadJsConfig(r);if(r.endsWith(".ts"))return this.loadTsConfig(r,n);throw new Error(`Invalid umbra config type! Must be either js or ts, but was ${e.extname(r)}`)}))}loadJsConfig(e){return Fe(this,void 0,void 0,(function*(){return e.endsWith(".js")?this.statPromise(e).then(()=>this.requireRef(e)).catch(()=>null):Promise.resolve(null)}))}loadTsConfig(e,t){return Fe(this,void 0,void 0,(function*(){return e.endsWith(".ts")?this.statPromise(e).then(this.makeCacheDir(t)).then(this.getJsConfigPath(e,t)).then(this.compileTsConfig(e)).then(e=>this.requireRef(e)):Promise.resolve(null)}))}}const Ne={input:["./**/*.test.js"],debug:!1,debugBreak:!1,watch:!1,cacheDir:".umbra-cache",timeoutMs:{it:100,before:100,beforeEach:100,after:100,afterEach:100},reporting:{outputPath:void 0,reporters:[]},parallel:{idempotentFiles:!1,idempotentTests:!1}};class He{constructor(e=require){this.requireRef=e}loadConfig(){try{const t=require(e.resolve(process.cwd(),"./package.json"));return t.umbra?t.umbra:null}catch(e){return null}}}class Be{merge(e,...t){for(const n of t)if(n)for(const t in n)if(n.hasOwnProperty(t)){const r=n[t];if(void 0===r)continue;"timeoutMs"===t&&"number"==typeof r?e.timeoutMs={it:r,before:r,beforeEach:r,after:r,afterEach:r}:e[t]=n[t]}return e}}var $e=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))};var De=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncPromisifier=void 0;t.AsyncPromisifier=class{exec(e,t){if(Object.defineProperty(e,"name",{value:t,writable:!1}),1===e.length)return new Promise((t,n)=>{e(e=>{e instanceof Error?n(e):t(e)})});try{return Promise.resolve(e())}catch(e){return Promise.reject(e)}}}}));g(De);De.AsyncPromisifier;var je=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TimeoutPromisifier=t.TimeoutError=void 0;class n extends Error{constructor(e,t,n){super(e),this.timeoutMs=n}}t.TimeoutError=n;t.TimeoutPromisifier=class{wrap(e,t){if(t<=0)return e;const r=Date.now();let i=null;const s=new Promise((e,s)=>{i=setTimeout(()=>{const e=Date.now()-r;s(new n(`Async task timeout exceeded! Elapsed: ${e}, timeout: ${t}ms.`,e,t))},t)});return e.catch(()=>{clearTimeout(i)}),Promise.race([e,s]).then(e=>(clearTimeout(i),e))}}}));g(je);je.TimeoutPromisifier,je.TimeoutError;var Ge=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.mergeConfig=void 0,t.mergeConfig=function(e,t){if(!t||"object"!=typeof t)return e;if("object"==typeof e.timeoutMs&&"object"==typeof t.timeoutMs)for(const n of["it","before","beforeEach","after","afterEach"])"number"==typeof t.timeoutMs[n]&&(e.timeoutMs[n]=t.timeoutMs[n]);else void 0!==t.timeoutMs&&(e.timeoutMs=t.timeoutMs);return e.stopOnFirstFail!==t.stopOnFirstFail&&(e.stopOnFirstFail=t.stopOnFirstFail),e}}));g(Ge);Ge.mergeConfig;var Ue=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultTestRunnerConfig=void 0;t.DefaultTestRunnerConfig={timeoutMs:100,stopOnFirstFail:!1}}));g(Ue);Ue.DefaultTestRunnerConfig;var qe=d((function(e,t){function n(e,t){if(!e)return t||[];if(!t)return e;for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function r(e,t){if(!e)return[];const n=e.indexOf(t);return-1!==n&&e.splice(n,1),e}Object.defineProperty(t,"__esModule",{value:!0}),t.without=t.union=t.SimpleEventEmitter=void 0,t.union=n,t.without=r;t.SimpleEventEmitter=class{constructor(){this.onListeners={},this.onceListeners={}}on(e,t){this.onListeners[e]=n(this.onListeners[e],[t])}once(e,t){this.onceListeners[e]=n(this.onceListeners[e],[t])}off(e,t){this.onListeners[e]=r(this.onListeners[e],t),this.onceListeners[e]=r(this.onceListeners[e],t)}emit(e,...t){if(this.onListeners[e])for(const n of this.onListeners[e])n.call(null,...t);if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const n of this.onceListeners[e])n.call(null,...t);this.onceListeners[e]=[]}}emitAndWaitForCompletion(e,...t){const n=[];if(this.onListeners[e])for(const r of this.onListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const r of this.onceListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}this.onceListeners[e]=[]}return Promise.all(n).then(e=>{})}}}));g(qe);qe.without,qe.union,qe.SimpleEventEmitter;var We=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.QueueStack=void 0;t.QueueStack=class{constructor(){this.queue=[]}pushOnTop(e){0===this.queue.length?this.queue.push([e]):this.queue[0].push(e)}pushStack(e){this.queue.push(e)}popStack(){return this.queue.pop()}shiftStack(){return this.queue.shift()}traverseLevelOrder(e){let t=Promise.resolve();for(let n=0;n<this.queue.length;n++){const r=this.queue[n];for(let n=0;n<r.length;n++)t=t.then(()=>e(r[n]))}return t}traverseInverseLevelOrder(e){let t=Promise.resolve();for(let n=this.queue.length-1;n>=0;n--){const r=this.queue[n];for(let n=r.length-1;n>=0;n--)t=t.then(()=>e(r[n]))}return t}reset(){this.queue=[]}}}));g(We);We.QueueStack;var Qe=d((function(e,t){var n=f&&f.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TestRunner=void 0;const r=["before","beforeEach","after","afterEach"];t.TestRunner=class{constructor(e,t=new qe.SimpleEventEmitter){this.asyncPromisifier=new De.AsyncPromisifier,this.timeoutPromisifier=new je.TimeoutPromisifier,this.testQueueStack=[],this.queueStacks={before:new We.QueueStack,beforeEach:new We.QueueStack,after:new We.QueueStack,afterEach:new We.QueueStack},this.currentTest=null,this.testRunCancelled=!1,this.describe=(e,t)=>{this.throwIfTestInProgress("describe"),this.pushToCurrentTestQueue("describe",e,t)},this.describeOnly=(e,t)=>{this.throwIfTestInProgress("describe.only"),this.pushToCurrentTestQueue("describe",e,t,!0)},this.describeSkip=(e,t,n)=>{this.throwIfTestInProgress("describe.skip"),this.pushToCurrentTestQueue("describe",e,t,!1,void 0,!0)},this.it=(e,t,n)=>{this.throwIfTestInProgress("it"),this.pushToCurrentTestQueue("it",e,t,!1,n?n.timeoutMs:void 0)},this.itOnly=(e,t,n)=>{this.throwIfTestInProgress("it.only"),this.pushToCurrentTestQueue("it",e,t,!0,n?n.timeoutMs:void 0)},this.itSkip=(e,t,n)=>{this.throwIfTestInProgress("it.skip"),this.pushToCurrentTestQueue("it",e,t,!1,void 0,!0)},this.runNextTestQueue=()=>n(this,void 0,void 0,(function*(){if(0===this.testQueueStack.length)return;let e=!1;const t=this.testQueueStack.shift();if(null!==t.firstOnlyIndex)e=yield this.executeTest(t,t.tests[t.firstOnlyIndex]);else for(let n=0;n<t.tests.length;n++)e=(yield this.executeTest(t,t.tests[n]))||e;e&&(yield this.evaluateQueueWithTimeout("after"))})),this.throwIfTestInProgress=e=>{if(this.currentTest)throw new Error(`Cannot add an ${e} block while executing a test!`)},this.resetRunResults=()=>{this.runResults={elapsedTimeMs:0,totalTests:0,totalSuccesses:0,totalFailures:0,totalTimeouts:0,testResults:[]}},this.config=Ge.mergeConfig(Ue.DefaultTestRunnerConfig,e),this.eventEmitter=t,this.it.only=this.itOnly,this.describe.only=this.describeOnly,this.it.skip=this.itSkip,this.describe.skip=this.describeSkip,this.resetRunResults()}setCurrentFile(e){this.lastFilePathSet=e}on(e,t){this.eventEmitter.on(e,t)}once(e,t){this.eventEmitter.once(e,t)}off(e,t){this.eventEmitter.off(e,t)}before(e){this.throwIfTestInProgress("before"),this.queueStacks.before.pushOnTop(e)}beforeEach(e){this.throwIfTestInProgress("beforeEach"),this.queueStacks.beforeEach.pushOnTop(e)}after(e){this.throwIfTestInProgress("after"),this.queueStacks.after.pushOnTop(e)}afterEach(e){this.throwIfTestInProgress("afterEach"),this.queueStacks.afterEach.pushOnTop(e)}run(){if(this.currentRun)throw new Error("Can't start a test run if one is already in progress!");const e=Date.now();return this.currentRun=this.runNextTestQueue().then(()=>{const t=this.runResults;return t.elapsedTimeMs=Date.now()-e,this.currentRun=null,this.resetRunResults(),t}).catch(e=>{throw this.currentRun=null,e}),this.currentRun}getCurrentTestInfo(){if(!this.currentTest)throw new Error("Can't obtain TestInfo if not actively in a test!");return this.currentTest}reset(){if(this.currentRun)throw new Error("Can't reset if a test run is already in progress!");this.resetRunResults(),this.testRunCancelled=!1,this.testQueueStack=[];for(const e of r)this.queueStacks[e].reset()}cancel(){return this.currentRun?(this.testRunCancelled=!0,this.currentRun.then(e=>(this.reset(),e))):Promise.reject(new Error("Not currently executing a test run! Unable to cancel accordingly."))}pushToCurrentTestQueue(e,t,n,r,i,s){if(0===this.testQueueStack.length){const t={describeTitleChain:[],tests:[],evaluatedBefores:!1,skipAllTests:"describe"===e&&s,firstOnlyIndex:r?0:null};this.testQueueStack.push(t)}const o=this.testQueueStack[this.testQueueStack.length-1],a={type:e,callback:n,describeTitleChain:o.describeTitleChain,title:t,absoluteFilePath:this.lastFilePathSet,skip:s||o.skipAllTests};r&&null===o.firstOnlyIndex&&(o.firstOnlyIndex=o.tests.length),i>0&&(a.timeoutMs=i),o.tests.push(a)}executeTest(e,t){return n(this,void 0,void 0,(function*(){return t.absoluteFilePath!==this.currentlyExecutingFilePath&&(this.currentlyExecutingFilePath=t.absoluteFilePath),!this.testRunCancelled&&("describe"===t.type?this.evaluateDescribe(e,t):this.evaluateTest(e,t))}))}evaluateDescribe(e,t){return n(this,void 0,void 0,(function*(){this.testQueueStack.push({describeTitleChain:[].concat(e.describeTitleChain,t.title),tests:[],evaluatedBefores:!1,skipAllTests:t.skip,firstOnlyIndex:null});for(const e of r)this.queueStacks[e].pushStack([]);yield this.asyncPromisifier.exec(t.callback,"describe"),yield this.runNextTestQueue();for(const e of r)this.queueStacks[e].shiftStack();return!1}))}evaluateTest(e,t){return n(this,void 0,void 0,(function*(){if(t.skip){const e={result:"skipped",testInfo:t,elapsedMs:0};return this.eventEmitter.emit("onTestResult",e),!1}e.evaluatedBefores||(e.evaluatedBefores=!0,yield this.evaluateQueueWithTimeout("before")),yield this.evaluateQueueWithTimeout("beforeEach"),this.currentTest=t;try{yield this.executeTestCallback(t,e.describeTitleChain),yield this.evaluateQueueWithTimeout("afterEach")}finally{this.runResults.totalTests++,this.currentTest=null}return!0}))}executeTestCallback(e,t){return n(this,void 0,void 0,(function*(){const t=Date.now(),n=e.timeoutMs>=0?e.timeoutMs:this.getTimeoutValue("it"),r={testInfo:e};try{yield this.timeoutPromisifier.wrap(this.asyncPromisifier.exec(e.callback,"Test: "+e.title),n),yield this.eventEmitter.emitAndWaitForCompletion("beforeTestSuccess",e),this.runResults.totalSuccesses++,r.result="success"}catch(e){e instanceof je.TimeoutError?(this.runResults.totalTimeouts++,r.result="timeout"):(this.runResults.totalFailures++,r.result="fail",r.error=e),this.config.stopOnFirstFail&&(this.testRunCancelled=!0)}r.elapsedMs=Date.now()-t,this.runResults.testResults.push(r),this.eventEmitter.emit("onTestResult",r)}))}evaluateQueueWithTimeout(e){return this.timeoutPromisifier.wrap(this.evaluateQueue(e),this.getTimeoutValue(e))}evaluateQueue(e){const t=this.queueStacks[e];return"before"===e||"beforeEach"===e?t.traverseLevelOrder(t=>this.asyncPromisifier.exec(t,e)):t.traverseInverseLevelOrder(t=>this.asyncPromisifier.exec(t,e))}getTimeoutValue(e){const t=this.config.timeoutMs;return"number"==typeof t?t:t[e]}}}));g(Qe);Qe.TestRunner;var Ke=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TestRunner=void 0,Object.defineProperty(t,"TestRunner",{enumerable:!0,get:function(){return Qe.TestRunner}})}));g(Ke);var Ve=Ke.TestRunner;var Xe=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.flatten=function(e){return e.reduce((e,t)=>[].concat(e,t),[])},t.splitWhen=function(e,t){const n=[[]];let r=0;for(const i of e)t(i)?(r++,n[r]=[]):n[r].push(i);return n}}));g(Xe);Xe.flatten,Xe.splitWhen;var Ye=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.isEnoentCodeError=function(e){return"ENOENT"===e.code}}));g(Ye);Ye.isEnoentCodeError;var Ze=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new n(e,t)}}));g(Ze);Ze.createDirentFromStats;var ze=d((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});const r=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;n.unixify=function(e){return e.replace(/\\/g,"/")},n.makeAbsolute=function(t,n){return e.resolve(t,n)},n.escape=function(e){return e.replace(r,"\\$2")},n.removeLeadingDotSegment=function(e){if("."===e.charAt(0)){const t=e.charAt(1);if("/"===t||"\\"===t)return e.slice(2)}return e}}));g(ze);ze.unixify,ze.makeAbsolute,ze.escape,ze.removeLeadingDotSegment;var Je={"{":"}","(":")","[":"]"},et=/\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/,tt=/\\(.)|(^!|[*?{}()[\]]|\(\?)/,nt=function(e,t){if("string"!=typeof e||""===e)return!1;if(function(e){if("string"!=typeof e||""===e)return!1;for(var t;t=/(\\).|([@?!+*]\(.*\))/g.exec(e);){if(t[2])return!0;e=e.slice(t.index+t[0].length)}return!1}(e))return!0;var n,r=et;for(t&&!1===t.strict&&(r=tt);n=r.exec(e);){if(n[2])return!0;var i=n.index+n[0].length,s=n[1],o=s?Je[s]:null;if(s&&o){var a=e.indexOf(o,i);-1!==a&&(i=a+1)}e=e.slice(i)}return!1},rt=e.posix.dirname,it="win32"===i.platform(),st=/\\/g,ot=/[\{\[].*[\/]*.*[\}\]]$/,at=/(^|[^\\])([\{\[]|\([^\)]+$)/,ut=/\\([\*\?\|\[\]\(\)\{\}])/g,lt=d((function(e,t){t.isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),t.find=(e,t)=>e.nodes.find(e=>e.type===t),t.exceedsLimit=(e,n,r=1,i)=>!1!==i&&(!(!t.isInteger(e)||!t.isInteger(n))&&(Number(n)-Number(e))/Number(r)>=i),t.escapeNode=(e,t=0,n)=>{let r=e.nodes[t];r&&(n&&r.type===n||"open"===r.type||"close"===r.type)&&!0!==r.escaped&&(r.value="\\"+r.value,r.escaped=!0)},t.encloseBrace=e=>"brace"===e.type&&(e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0)),t.isInvalidBrace=e=>"brace"===e.type&&(!(!0!==e.invalid&&!e.dollar)||(e.commas>>0+e.ranges>>0==0||!0!==e.open||!0!==e.close)&&(e.invalid=!0,!0)),t.isOpenOrClose=e=>"open"===e.type||"close"===e.type||(!0===e.open||!0===e.close),t.reduce=e=>e.reduce((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e),[]),t.flatten=(...e)=>{const t=[],n=e=>{for(let r=0;r<e.length;r++){let i=e[r];Array.isArray(i)?n(i):void 0!==i&&t.push(i)}return t};return n(e),t}})),ct=(lt.isInteger,lt.find,lt.exceedsLimit,lt.escapeNode,lt.encloseBrace,lt.isInvalidBrace,lt.isOpenOrClose,lt.reduce,lt.flatten,(e,t={})=>{let n=(e,r={})=>{let i=t.escapeInvalid&&lt.isInvalidBrace(r),s=!0===e.invalid&&!0===t.escapeInvalid,o="";if(e.value)return(i||s)&&lt.isOpenOrClose(e)?"\\"+e.value:e.value;if(e.value)return e.value;if(e.nodes)for(let t of e.nodes)o+=n(t);return o};return n(e)}),ht=function(e){return"number"==typeof e?e-e==0:"string"==typeof e&&""!==e.trim()&&(Number.isFinite?Number.isFinite(+e):isFinite(+e))};const pt=(e,t,n)=>{if(!1===ht(e))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===t||e===t)return String(e);if(!1===ht(t))throw new TypeError("toRegexRange: expected the second argument to be a number.");let r={relaxZeros:!0,...n};"boolean"==typeof r.strictZeros&&(r.relaxZeros=!1===r.strictZeros);let i=e+":"+t+"="+String(r.relaxZeros)+String(r.shorthand)+String(r.capture)+String(r.wrap);if(pt.cache.hasOwnProperty(i))return pt.cache[i].result;let s=Math.min(e,t),o=Math.max(e,t);if(1===Math.abs(s-o)){let n=e+"|"+t;return r.capture?`(${n})`:!1===r.wrap?n:`(?:${n})`}let a=Et(e)||Et(t),u={min:e,max:t,a:s,b:o},l=[],c=[];if(a&&(u.isPadded=a,u.maxLen=String(u.max).length),s<0){c=gt(o<0?Math.abs(o):1,Math.abs(s),u,r),s=u.a=0}return o>=0&&(l=gt(s,o,u,r)),u.negatives=c,u.positives=l,u.result=function(e,t,n){let r=dt(e,t,"-",!1)||[],i=dt(t,e,"",!1)||[],s=dt(e,t,"-?",!0)||[];return r.concat(s).concat(i).join("|")}(c,l),!0===r.capture?u.result=`(${u.result})`:!1!==r.wrap&&l.length+c.length>1&&(u.result=`(?:${u.result})`),pt.cache[i]=u,u.result};function ft(e,t,n){if(e===t)return{pattern:e,count:[],digits:0};let r=function(e,t){let n=[];for(let r=0;r<e.length;r++)n.push([e[r],t[r]]);return n}(e,t),i=r.length,s="",o=0;for(let e=0;e<i;e++){let[t,n]=r[e];t===n?s+=t:"0"!==t||"9"!==n?s+=St(t,n):o++}return o&&(s+=!0===n.shorthand?"\\d":"[0-9]"),{pattern:s,count:[o],digits:i}}function gt(e,t,n,r){let i,s=function(e,t){let n=1,r=1,i=yt(e,n),s=new Set([t]);for(;e<=i&&i<=t;)s.add(i),n+=1,i=yt(e,n);for(i=vt(t+1,r)-1;e<i&&i<=t;)s.add(i),r+=1,i=vt(t+1,r)-1;return s=[...s],s.sort(mt),s}(e,t),o=[],a=e;for(let e=0;e<s.length;e++){let t=s[e],u=ft(String(a),String(t),r),l="";n.isPadded||!i||i.pattern!==u.pattern?(n.isPadded&&(l=At(t,n,r)),u.string=l+u.pattern+bt(u.count),o.push(u),a=t+1,i=u):(i.count.length>1&&i.count.pop(),i.count.push(u.count[0]),i.string=i.pattern+bt(i.count),a=t+1)}return o}function dt(e,t,n,r,i){let s=[];for(let i of e){let{string:e}=i;r||_t(t,"string",e)||s.push(n+e),r&&_t(t,"string",e)&&s.push(n+e)}return s}function mt(e,t){return e>t?1:t>e?-1:0}function _t(e,t,n){return e.some(e=>e[t]===n)}function yt(e,t){return Number(String(e).slice(0,-t)+"9".repeat(t))}function vt(e,t){return e-e%Math.pow(10,t)}function bt(e){let[t=0,n=""]=e;return n||t>1?`{${t+(n?","+n:"")}}`:""}function St(e,t,n){return`[${e}${t-e==1?"":"-"}${t}]`}function Et(e){return/^-?(0+)\d/.test(e)}function At(e,t,n){if(!t.isPadded)return e;let r=Math.abs(t.maxLen-String(e).length),i=!1!==n.relaxZeros;switch(r){case 0:return"";case 1:return i?"0?":"0";case 2:return i?"0{0,2}":"00";default:return i?`0{0,${r}}`:`0{${r}}`}}pt.cache={},pt.clearCache=()=>pt.cache={};var Rt=pt;const Ct=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),wt=e=>"number"==typeof e||"string"==typeof e&&""!==e,Ot=e=>Number.isInteger(+e),Tt=e=>{let t=`${e}`,n=-1;if("-"===t[0]&&(t=t.slice(1)),"0"===t)return!1;for(;"0"===t[++n];);return n>0},Lt=(e,t,n)=>{if(t>0){let n="-"===e[0]?"-":"";n&&(e=e.slice(1)),e=n+e.padStart(n?t-1:t,"0")}return!1===n?String(e):e},Pt=(e,t)=>{let n="-"===e[0]?"-":"";for(n&&(e=e.slice(1),t--);e.length<t;)e="0"+e;return n?"-"+e:e},xt=(e,t,n,r)=>{if(n)return Rt(e,t,{wrap:!1,...r});let i=String.fromCharCode(e);return e===t?i:`[${i}-${String.fromCharCode(t)}]`},kt=(e,t,n)=>{if(Array.isArray(e)){let t=!0===n.wrap,r=n.capture?"":"?:";return t?`(${r}${e.join("|")})`:e.join("|")}return Rt(e,t,n)},Mt=(...e)=>new RangeError("Invalid range arguments: "+s.inspect(...e)),Ft=(e,t,n)=>{if(!0===n.strictRanges)throw Mt([e,t]);return[]},It=(e,t,n=1,r={})=>{let i=Number(e),s=Number(t);if(!Number.isInteger(i)||!Number.isInteger(s)){if(!0===r.strictRanges)throw Mt([e,t]);return[]}0===i&&(i=0),0===s&&(s=0);let o=i>s,a=String(e),u=String(t),l=String(n);n=Math.max(Math.abs(n),1);let c=Tt(a)||Tt(u)||Tt(l),h=c?Math.max(a.length,u.length,l.length):0,p=!1===c&&!1===((e,t,n)=>"string"==typeof e||"string"==typeof t||!0===n.stringify)(e,t,r),f=r.transform||(e=>t=>!0===e?Number(t):String(t))(p);if(r.toRegex&&1===n)return xt(Pt(e,h),Pt(t,h),!0,r);let g={negatives:[],positives:[]},d=[],m=0;for(;o?i>=s:i<=s;)!0===r.toRegex&&n>1?g[(_=i)<0?"negatives":"positives"].push(Math.abs(_)):d.push(Lt(f(i,m),h,p)),i=o?i-n:i+n,m++;var _;return!0===r.toRegex?n>1?((e,t)=>{e.negatives.sort((e,t)=>e<t?-1:e>t?1:0),e.positives.sort((e,t)=>e<t?-1:e>t?1:0);let n,r=t.capture?"":"?:",i="",s="";return e.positives.length&&(i=e.positives.join("|")),e.negatives.length&&(s=`-(${r}${e.negatives.join("|")})`),n=i&&s?`${i}|${s}`:i||s,t.wrap?`(${r}${n})`:n})(g,r):kt(d,null,{wrap:!1,...r}):d},Nt=(e,t,n,r={})=>{if(null==t&&wt(e))return[e];if(!wt(e)||!wt(t))return Ft(e,t,r);if("function"==typeof n)return Nt(e,t,1,{transform:n});if(Ct(n))return Nt(e,t,0,n);let i={...r};return!0===i.capture&&(i.wrap=!0),n=n||i.step||1,Ot(n)?Ot(e)&&Ot(t)?It(e,t,n,i):((e,t,n=1,r={})=>{if(!Ot(e)&&e.length>1||!Ot(t)&&t.length>1)return Ft(e,t,r);let i=r.transform||(e=>String.fromCharCode(e)),s=`${e}`.charCodeAt(0),o=`${t}`.charCodeAt(0),a=s>o,u=Math.min(s,o),l=Math.max(s,o);if(r.toRegex&&1===n)return xt(u,l,!1,r);let c=[],h=0;for(;a?s>=o:s<=o;)c.push(i(s,h)),s=a?s-n:s+n,h++;return!0===r.toRegex?kt(c,null,{wrap:!1,options:r}):c})(e,t,Math.max(Math.abs(n),1),i):null==n||Ct(n)?Nt(e,t,1,n):((e,t)=>{if(!0===t.strictRanges)throw new TypeError(`Expected step "${e}" to be a number`);return[]})(n,i)};var Ht=Nt;var Bt=(e,t={})=>{let n=(e,r={})=>{let i=lt.isInvalidBrace(r),s=!0===e.invalid&&!0===t.escapeInvalid,o=!0===i||!0===s,a=!0===t.escapeInvalid?"\\":"",u="";if(!0===e.isOpen)return a+e.value;if(!0===e.isClose)return a+e.value;if("open"===e.type)return o?a+e.value:"(";if("close"===e.type)return o?a+e.value:")";if("comma"===e.type)return"comma"===e.prev.type?"":o?e.value:"|";if(e.value)return e.value;if(e.nodes&&e.ranges>0){let n=lt.reduce(e.nodes),r=Ht(...n,{...t,wrap:!1,toRegex:!0});if(0!==r.length)return n.length>1&&r.length>1?`(${r})`:r}if(e.nodes)for(let t of e.nodes)u+=n(t,e);return u};return n(e)};const $t=(e="",t="",n=!1)=>{let r=[];if(e=[].concat(e),!(t=[].concat(t)).length)return e;if(!e.length)return n?lt.flatten(t).map(e=>`{${e}}`):t;for(let i of e)if(Array.isArray(i))for(let e of i)r.push($t(e,t,n));else for(let e of t)!0===n&&"string"==typeof e&&(e=`{${e}}`),r.push(Array.isArray(e)?$t(i,e,n):i+e);return lt.flatten(r)};var Dt=(e,t={})=>{let n=void 0===t.rangeLimit?1e3:t.rangeLimit,r=(e,i={})=>{e.queue=[];let s=i,o=i.queue;for(;"brace"!==s.type&&"root"!==s.type&&s.parent;)s=s.parent,o=s.queue;if(e.invalid||e.dollar)return void o.push($t(o.pop(),ct(e,t)));if("brace"===e.type&&!0!==e.invalid&&2===e.nodes.length)return void o.push($t(o.pop(),["{}"]));if(e.nodes&&e.ranges>0){let r=lt.reduce(e.nodes);if(lt.exceedsLimit(...r,t.step,n))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let i=Ht(...r,t);return 0===i.length&&(i=ct(e,t)),o.push($t(o.pop(),i)),void(e.nodes=[])}let a=lt.encloseBrace(e),u=e.queue,l=e;for(;"brace"!==l.type&&"root"!==l.type&&l.parent;)l=l.parent,u=l.queue;for(let t=0;t<e.nodes.length;t++){let n=e.nodes[t];"comma"!==n.type||"brace"!==e.type?"close"!==n.type?n.value&&"open"!==n.type?u.push($t(u.pop(),n.value)):n.nodes&&r(n,e):o.push($t(o.pop(),u,a)):(1===t&&u.push(""),u.push(""))}return u};return lt.flatten(r(e))};const{MAX_LENGTH:jt,CHAR_BACKSLASH:Gt,CHAR_BACKTICK:Ut,CHAR_COMMA:qt,CHAR_DOT:Wt,CHAR_LEFT_PARENTHESES:Qt,CHAR_RIGHT_PARENTHESES:Kt,CHAR_LEFT_CURLY_BRACE:Vt,CHAR_RIGHT_CURLY_BRACE:Xt,CHAR_LEFT_SQUARE_BRACKET:Yt,CHAR_RIGHT_SQUARE_BRACKET:Zt,CHAR_DOUBLE_QUOTE:zt,CHAR_SINGLE_QUOTE:Jt,CHAR_NO_BREAK_SPACE:en,CHAR_ZERO_WIDTH_NOBREAK_SPACE:tn}={MAX_LENGTH:65536,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:" ",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"};var nn=(e,t={})=>{if("string"!=typeof e)throw new TypeError("Expected a string");let n=t||{},r="number"==typeof n.maxLength?Math.min(jt,n.maxLength):jt;if(e.length>r)throw new SyntaxError(`Input length (${e.length}), exceeds max characters (${r})`);let i,s={type:"root",input:e,nodes:[]},o=[s],a=s,u=s,l=0,c=e.length,h=0,p=0;const f=()=>e[h++],g=e=>{if("text"===e.type&&"dot"===u.type&&(u.type="text"),!u||"text"!==u.type||"text"!==e.type)return a.nodes.push(e),e.parent=a,e.prev=u,u=e,e;u.value+=e.value};for(g({type:"bos"});h<c;)if(a=o[o.length-1],i=f(),i!==tn&&i!==en)if(i!==Gt)if(i!==Zt)if(i!==Yt)if(i!==Qt)if(i!==Kt)if(i!==zt&&i!==Jt&&i!==Ut)if(i!==Vt)if(i!==Xt)if(i===qt&&p>0){if(a.ranges>0){a.ranges=0;let e=a.nodes.shift();a.nodes=[e,{type:"text",value:ct(a)}]}g({type:"comma",value:i}),a.commas++}else if(i===Wt&&p>0&&0===a.commas){let e=a.nodes;if(0===p||0===e.length){g({type:"text",value:i});continue}if("dot"===u.type){if(a.range=[],u.value+=i,u.type="range",3!==a.nodes.length&&5!==a.nodes.length){a.invalid=!0,a.ranges=0,u.type="text";continue}a.ranges++,a.args=[];continue}if("range"===u.type){e.pop();let t=e[e.length-1];t.value+=u.value+i,u=t,a.ranges--;continue}g({type:"dot",value:i})}else g({type:"text",value:i});else{if("brace"!==a.type){g({type:"text",value:i});continue}let e="close";a=o.pop(),a.close=!0,g({type:e,value:i}),p--,a=o[o.length-1]}else{p++;let e=u.value&&"$"===u.value.slice(-1)||!0===a.dollar;a=g({type:"brace",open:!0,close:!1,dollar:e,depth:p,commas:0,ranges:0,nodes:[]}),o.push(a),g({type:"open",value:i})}else{let e,n=i;for(!0!==t.keepQuotes&&(i="");h<c&&(e=f());)if(e!==Gt){if(e===n){!0===t.keepQuotes&&(i+=e);break}i+=e}else i+=e+f();g({type:"text",value:i})}else{if("paren"!==a.type){g({type:"text",value:i});continue}a=o.pop(),g({type:"text",value:i}),a=o[o.length-1]}else a=g({type:"paren",nodes:[]}),o.push(a),g({type:"text",value:i});else{let e;for(l++;h<c&&(e=f());)if(i+=e,e!==Yt)if(e!==Gt){if(e===Zt&&(l--,0===l))break}else i+=f();else l++;g({type:"text",value:i})}else g({type:"text",value:"\\"+i});else g({type:"text",value:(t.keepEscaping?i:"")+f()});do{if(a=o.pop(),"root"!==a.type){a.nodes.forEach(e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)});let e=o[o.length-1],t=e.nodes.indexOf(a);e.nodes.splice(t,1,...a.nodes)}}while(o.length>0);return g({type:"eos"}),s};const rn=(e,t={})=>{let n=[];if(Array.isArray(e))for(let r of e){let e=rn.create(r,t);Array.isArray(e)?n.push(...e):n.push(e)}else n=[].concat(rn.create(e,t));return t&&!0===t.expand&&!0===t.nodupes&&(n=[...new Set(n)]),n};rn.parse=(e,t={})=>nn(e,t),rn.stringify=(e,t={})=>ct("string"==typeof e?rn.parse(e,t):e,t),rn.compile=(e,t={})=>("string"==typeof e&&(e=rn.parse(e,t)),Bt(e,t)),rn.expand=(e,t={})=>{"string"==typeof e&&(e=rn.parse(e,t));let n=Dt(e,t);return!0===t.noempty&&(n=n.filter(Boolean)),!0===t.nodupes&&(n=[...new Set(n)]),n},rn.create=(e,t={})=>""===e||e.length<3?[e]:!0!==t.expand?rn.compile(e,t):rn.expand(e,t);var sn=rn;const on={DOT_LITERAL:"\\.",PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:"\\/",ONE_CHAR:"(?=.)",QMARK:"[^/]",END_ANCHOR:"(?:\\/|$)",DOTS_SLASH:"\\.{1,2}(?:\\/|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|\\/)\\.{1,2}(?:\\/|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:\\/|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:\\/|$))",QMARK_NO_DOT:"[^.\\/]",STAR:"[^/]*?",START_ANCHOR:"(?:^|\\/)"},an={...on,SLASH_LITERAL:"[\\\\/]",QMARK:"[^\\\\/]",STAR:"[^\\\\/]*?",DOTS_SLASH:"\\.{1,2}(?:[\\\\/]|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|[\\\\/])\\.{1,2}(?:[\\\\/]|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:[\\\\/]|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:[\\\\/]|$))",QMARK_NO_DOT:"[^.\\\\/]",START_ANCHOR:"(?:^|[\\\\/])",END_ANCHOR:"(?:[\\\\/]|$)"};var un={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:e.sep,extglobChars:e=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${e.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:e=>!0===e?an:on},ln=d((function(t,n){const r="win32"===process.platform,{REGEX_BACKSLASH:i,REGEX_REMOVE_BACKSLASH:s,REGEX_SPECIAL_CHARS:o,REGEX_SPECIAL_CHARS_GLOBAL:a}=un;n.isObject=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),n.hasRegexChars=e=>o.test(e),n.isRegexChar=e=>1===e.length&&n.hasRegexChars(e),n.escapeRegex=e=>e.replace(a,"\\$1"),n.toPosixSlashes=e=>e.replace(i,"/"),n.removeBackslashes=e=>e.replace(s,e=>"\\"===e?"":e),n.supportsLookbehinds=()=>{const e=process.version.slice(1).split(".").map(Number);return 3===e.length&&e[0]>=9||8===e[0]&&e[1]>=10},n.isWindows=t=>t&&"boolean"==typeof t.windows?t.windows:!0===r||"\\"===e.sep,n.escapeLast=(e,t,r)=>{const i=e.lastIndexOf(t,r);return-1===i?e:"\\"===e[i-1]?n.escapeLast(e,t,i-1):`${e.slice(0,i)}\\${e.slice(i)}`},n.removePrefix=(e,t={})=>{let n=e;return n.startsWith("./")&&(n=n.slice(2),t.prefix="./"),n},n.wrapOutput=(e,t={},n={})=>{let r=`${n.contains?"":"^"}(?:${e})${n.contains?"":"$"}`;return!0===t.negated&&(r=`(?:^(?!${r}).*$)`),r}}));ln.isObject,ln.hasRegexChars,ln.isRegexChar,ln.escapeRegex,ln.toPosixSlashes,ln.removeBackslashes,ln.supportsLookbehinds,ln.isWindows,ln.escapeLast,ln.removePrefix,ln.wrapOutput;const{CHAR_ASTERISK:cn,CHAR_AT:hn,CHAR_BACKWARD_SLASH:pn,CHAR_COMMA:fn,CHAR_DOT:gn,CHAR_EXCLAMATION_MARK:dn,CHAR_FORWARD_SLASH:mn,CHAR_LEFT_CURLY_BRACE:_n,CHAR_LEFT_PARENTHESES:yn,CHAR_LEFT_SQUARE_BRACKET:vn,CHAR_PLUS:bn,CHAR_QUESTION_MARK:Sn,CHAR_RIGHT_CURLY_BRACE:En,CHAR_RIGHT_PARENTHESES:An,CHAR_RIGHT_SQUARE_BRACKET:Rn}=un,Cn=e=>e===mn||e===pn,wn=e=>{!0!==e.isPrefix&&(e.depth=e.isGlobstar?1/0:1)};var On=(e,t)=>{const n=t||{},r=e.length-1,i=!0===n.parts||!0===n.scanToEnd,s=[],o=[],a=[];let u,l,c=e,h=-1,p=0,f=0,g=!1,d=!1,m=!1,_=!1,y=!1,v=!1,b=!1,S=!1,E=!1,A=0,R={value:"",depth:0,isGlob:!1};const C=()=>h>=r,w=()=>(u=l,c.charCodeAt(++h));for(;h<r;){let e;if(l=w(),l!==pn){if(!0===v||l===_n){for(A++;!0!==C()&&(l=w());)if(l!==pn)if(l!==_n){if(!0!==v&&l===gn&&(l=w())===gn){if(g=R.isBrace=!0,m=R.isGlob=!0,E=!0,!0===i)continue;break}if(!0!==v&&l===fn){if(g=R.isBrace=!0,m=R.isGlob=!0,E=!0,!0===i)continue;break}if(l===En&&(A--,0===A)){v=!1,g=R.isBrace=!0,E=!0;break}}else A++;else b=R.backslashes=!0,w();if(!0===i)continue;break}if(l!==mn){if(!0!==n.noext){if(!0===(l===bn||l===hn||l===cn||l===Sn||l===dn)&&c.charCodeAt(h+1)===yn){if(m=R.isGlob=!0,_=R.isExtglob=!0,E=!0,!0===i){for(;!0!==C()&&(l=w());)if(l!==pn){if(l===An){m=R.isGlob=!0,E=!0;break}}else b=R.backslashes=!0,l=w();continue}break}}if(l===cn){if(u===cn&&(y=R.isGlobstar=!0),m=R.isGlob=!0,E=!0,!0===i)continue;break}if(l===Sn){if(m=R.isGlob=!0,E=!0,!0===i)continue;break}if(l===vn)for(;!0!==C()&&(e=w());)if(e!==pn){if(e===Rn){if(d=R.isBracket=!0,m=R.isGlob=!0,E=!0,!0===i)continue;break}}else b=R.backslashes=!0,w();if(!0===n.nonegate||l!==dn||h!==p){if(!0!==n.noparen&&l===yn)for(;!0!==C()&&(l=w());)if(l!==pn){if(l===An){if(m=R.isGlob=!0,E=!0,!0===i)continue;break}}else b=R.backslashes=!0,l=w();if(!0===m){if(E=!0,!0===i)continue;break}}else S=R.negated=!0,p++}else{if(s.push(h),o.push(R),R={value:"",depth:0,isGlob:!1},!0===E)continue;if(u===gn&&h===p+1){p+=2;continue}f=h+1}}else b=R.backslashes=!0,l=w(),l===_n&&(v=!0)}!0===n.noext&&(_=!1,m=!1);let O=c,T="",L="";p>0&&(T=c.slice(0,p),c=c.slice(p),f-=p),O&&!0===m&&f>0?(O=c.slice(0,f),L=c.slice(f)):!0===m?(O="",L=c):O=c,O&&""!==O&&"/"!==O&&O!==c&&Cn(O.charCodeAt(O.length-1))&&(O=O.slice(0,-1)),!0===n.unescape&&(L&&(L=ln.removeBackslashes(L)),O&&!0===b&&(O=ln.removeBackslashes(O)));const P={prefix:T,input:e,start:p,base:O,glob:L,isBrace:g,isBracket:d,isGlob:m,isExtglob:_,isGlobstar:y,negated:S};if(!0===n.tokens&&(P.maxDepth=0,Cn(l)||o.push(R),P.tokens=o),!0===n.parts||!0===n.tokens){let t;for(let r=0;r<s.length;r++){const i=t?t+1:p,u=s[r],l=e.slice(i,u);n.tokens&&(0===r&&0!==p?(o[r].isPrefix=!0,o[r].value=T):o[r].value=l,wn(o[r]),P.maxDepth+=o[r].depth),0===r&&""===l||a.push(l),t=u}if(t&&t+1<e.length){const r=e.slice(t+1);a.push(r),n.tokens&&(o[o.length-1].value=r,wn(o[o.length-1]),P.maxDepth+=o[o.length-1].depth)}P.slashes=s,P.parts=a}return P};const{MAX_LENGTH:Tn,POSIX_REGEX_SOURCE:Ln,REGEX_NON_SPECIAL_CHARS:Pn,REGEX_SPECIAL_CHARS_BACKREF:xn,REPLACEMENTS:kn}=un,Mn=(e,t)=>{if("function"==typeof t.expandRange)return t.expandRange(...e,t);e.sort();const n=`[${e.join("-")}]`;try{new RegExp(n)}catch(t){return e.map(e=>ln.escapeRegex(e)).join("..")}return n},Fn=(e,t)=>`Missing ${e}: "${t}" - use "\\\\${t}" to match literal characters`,In=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");e=kn[e]||e;const n={...t},r="number"==typeof n.maxLength?Math.min(Tn,n.maxLength):Tn;let i=e.length;if(i>r)throw new SyntaxError(`Input length: ${i}, exceeds maximum allowed length: ${r}`);const s={type:"bos",value:"",output:n.prepend||""},o=[s],a=n.capture?"":"?:",u=ln.isWindows(t),l=un.globChars(u),c=un.extglobChars(l),{DOT_LITERAL:h,PLUS_LITERAL:p,SLASH_LITERAL:f,ONE_CHAR:g,DOTS_SLASH:d,NO_DOT:m,NO_DOT_SLASH:_,NO_DOTS_SLASH:y,QMARK:v,QMARK_NO_DOT:b,STAR:S,START_ANCHOR:E}=l,A=e=>`(${a}(?:(?!${E}${e.dot?d:h}).)*?)`,R=n.dot?"":m,C=n.dot?v:b;let w=!0===n.bash?A(n):S;n.capture&&(w=`(${w})`),"boolean"==typeof n.noext&&(n.noextglob=n.noext);const O={input:e,index:-1,start:0,dot:!0===n.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:o};e=ln.removePrefix(e,O),i=e.length;const T=[],L=[],P=[];let x,k=s;const M=()=>O.index===i-1,F=O.peek=(t=1)=>e[O.index+t],I=O.advance=()=>e[++O.index],N=()=>e.slice(O.index+1),H=(e="",t=0)=>{O.consumed+=e,O.index+=t},B=e=>{O.output+=null!=e.output?e.output:e.value,H(e.value)},$=()=>{let e=1;for(;"!"===F()&&("("!==F(2)||"?"===F(3));)I(),O.start++,e++;return e%2!=0&&(O.negated=!0,O.start++,!0)},D=e=>{O[e]++,P.push(e)},j=e=>{O[e]--,P.pop()},G=e=>{if("globstar"===k.type){const t=O.braces>0&&("comma"===e.type||"brace"===e.type),n=!0===e.extglob||T.length&&("pipe"===e.type||"paren"===e.type);"slash"===e.type||"paren"===e.type||t||n||(O.output=O.output.slice(0,-k.output.length),k.type="star",k.value="*",k.output=w,O.output+=k.output)}if(T.length&&"paren"!==e.type&&!c[e.value]&&(T[T.length-1].inner+=e.value),(e.value||e.output)&&B(e),k&&"text"===k.type&&"text"===e.type)return k.value+=e.value,void(k.output=(k.output||"")+e.value);e.prev=k,o.push(e),k=e},U=(e,t)=>{const r={...c[t],conditions:1,inner:""};r.prev=k,r.parens=O.parens,r.output=O.output;const i=(n.capture?"(":"")+r.open;D("parens"),G({type:e,value:t,output:O.output?"":g}),G({type:"paren",extglob:!0,value:I(),output:i}),T.push(r)},q=e=>{let t=e.close+(n.capture?")":"");if("negate"===e.type){let r=w;e.inner&&e.inner.length>1&&e.inner.includes("/")&&(r=A(n)),(r!==w||M()||/^\)+$/.test(N()))&&(t=e.close=`)$))${r}`),"bos"===e.prev.type&&M()&&(O.negatedExtglob=!0)}G({type:"paren",extglob:!0,value:x,output:t}),j("parens")};if(!1!==n.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(e)){let r=!1,i=e.replace(xn,(e,t,n,i,s,o)=>"\\"===i?(r=!0,e):"?"===i?t?t+i+(s?v.repeat(s.length):""):0===o?C+(s?v.repeat(s.length):""):v.repeat(n.length):"."===i?h.repeat(n.length):"*"===i?t?t+i+(s?w:""):w:t?e:`\\${e}`);return!0===r&&(i=!0===n.unescape?i.replace(/\\/g,""):i.replace(/\\+/g,e=>e.length%2==0?"\\\\":e?"\\":"")),i===e&&!0===n.contains?(O.output=e,O):(O.output=ln.wrapOutput(i,O,t),O)}for(;!M();){if(x=I(),"\0"===x)continue;if("\\"===x){const e=F();if("/"===e&&!0!==n.bash)continue;if("."===e||";"===e)continue;if(!e){x+="\\",G({type:"text",value:x});continue}const t=/^\\+/.exec(N());let r=0;if(t&&t[0].length>2&&(r=t[0].length,O.index+=r,r%2!=0&&(x+="\\")),!0===n.unescape?x=I()||"":x+=I()||"",0===O.brackets){G({type:"text",value:x});continue}}if(O.brackets>0&&("]"!==x||"["===k.value||"[^"===k.value)){if(!1!==n.posix&&":"===x){const e=k.value.slice(1);if(e.includes("[")&&(k.posix=!0,e.includes(":"))){const e=k.value.lastIndexOf("["),t=k.value.slice(0,e),n=k.value.slice(e+2),r=Ln[n];if(r){k.value=t+r,O.backtrack=!0,I(),s.output||1!==o.indexOf(k)||(s.output=g);continue}}}("["===x&&":"!==F()||"-"===x&&"]"===F())&&(x=`\\${x}`),"]"!==x||"["!==k.value&&"[^"!==k.value||(x=`\\${x}`),!0===n.posix&&"!"===x&&"["===k.value&&(x="^"),k.value+=x,B({value:x});continue}if(1===O.quotes&&'"'!==x){x=ln.escapeRegex(x),k.value+=x,B({value:x});continue}if('"'===x){O.quotes=1===O.quotes?0:1,!0===n.keepQuotes&&G({type:"text",value:x});continue}if("("===x){D("parens"),G({type:"paren",value:x});continue}if(")"===x){if(0===O.parens&&!0===n.strictBrackets)throw new SyntaxError(Fn("opening","("));const e=T[T.length-1];if(e&&O.parens===e.parens+1){q(T.pop());continue}G({type:"paren",value:x,output:O.parens?")":"\\)"}),j("parens");continue}if("["===x){if(!0!==n.nobracket&&N().includes("]"))D("brackets");else{if(!0!==n.nobracket&&!0===n.strictBrackets)throw new SyntaxError(Fn("closing","]"));x=`\\${x}`}G({type:"bracket",value:x});continue}if("]"===x){if(!0===n.nobracket||k&&"bracket"===k.type&&1===k.value.length){G({type:"text",value:x,output:`\\${x}`});continue}if(0===O.brackets){if(!0===n.strictBrackets)throw new SyntaxError(Fn("opening","["));G({type:"text",value:x,output:`\\${x}`});continue}j("brackets");const e=k.value.slice(1);if(!0===k.posix||"^"!==e[0]||e.includes("/")||(x=`/${x}`),k.value+=x,B({value:x}),!1===n.literalBrackets||ln.hasRegexChars(e))continue;const t=ln.escapeRegex(k.value);if(O.output=O.output.slice(0,-k.value.length),!0===n.literalBrackets){O.output+=t,k.value=t;continue}k.value=`(${a}${t}|${k.value})`,O.output+=k.value;continue}if("{"===x&&!0!==n.nobrace){D("braces");const e={type:"brace",value:x,output:"(",outputIndex:O.output.length,tokensIndex:O.tokens.length};L.push(e),G(e);continue}if("}"===x){const e=L[L.length-1];if(!0===n.nobrace||!e){G({type:"text",value:x,output:x});continue}let t=")";if(!0===e.dots){const e=o.slice(),r=[];for(let t=e.length-1;t>=0&&(o.pop(),"brace"!==e[t].type);t--)"dots"!==e[t].type&&r.unshift(e[t].value);t=Mn(r,n),O.backtrack=!0}if(!0!==e.comma&&!0!==e.dots){const n=O.output.slice(0,e.outputIndex),r=O.tokens.slice(e.tokensIndex);e.value=e.output="\\{",x=t="\\}",O.output=n;for(const e of r)O.output+=e.output||e.value}G({type:"brace",value:x,output:t}),j("braces"),L.pop();continue}if("|"===x){T.length>0&&T[T.length-1].conditions++,G({type:"text",value:x});continue}if(","===x){let e=x;const t=L[L.length-1];t&&"braces"===P[P.length-1]&&(t.comma=!0,e="|"),G({type:"comma",value:x,output:e});continue}if("/"===x){if("dot"===k.type&&O.index===O.start+1){O.start=O.index+1,O.consumed="",O.output="",o.pop(),k=s;continue}G({type:"slash",value:x,output:f});continue}if("."===x){if(O.braces>0&&"dot"===k.type){"."===k.value&&(k.output=h);const e=L[L.length-1];k.type="dots",k.output+=x,k.value+=x,e.dots=!0;continue}if(O.braces+O.parens===0&&"bos"!==k.type&&"slash"!==k.type){G({type:"text",value:x,output:h});continue}G({type:"dot",value:x,output:h});continue}if("?"===x){if(!(k&&"("===k.value)&&!0!==n.noextglob&&"("===F()&&"?"!==F(2)){U("qmark",x);continue}if(k&&"paren"===k.type){const e=F();let t=x;if("<"===e&&!ln.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===k.value&&!/[!=<:]/.test(e)||"<"===e&&!/<([!=]|\w+>)/.test(N()))&&(t=`\\${x}`),G({type:"text",value:x,output:t});continue}if(!0!==n.dot&&("slash"===k.type||"bos"===k.type)){G({type:"qmark",value:x,output:b});continue}G({type:"qmark",value:x,output:v});continue}if("!"===x){if(!0!==n.noextglob&&"("===F()&&("?"!==F(2)||!/[!=<:]/.test(F(3)))){U("negate",x);continue}if(!0!==n.nonegate&&0===O.index){$();continue}}if("+"===x){if(!0!==n.noextglob&&"("===F()&&"?"!==F(2)){U("plus",x);continue}if(k&&"("===k.value||!1===n.regex){G({type:"plus",value:x,output:p});continue}if(k&&("bracket"===k.type||"paren"===k.type||"brace"===k.type)||O.parens>0){G({type:"plus",value:x});continue}G({type:"plus",value:p});continue}if("@"===x){if(!0!==n.noextglob&&"("===F()&&"?"!==F(2)){G({type:"at",extglob:!0,value:x,output:""});continue}G({type:"text",value:x});continue}if("*"!==x){"$"!==x&&"^"!==x||(x=`\\${x}`);const e=Pn.exec(N());e&&(x+=e[0],O.index+=e[0].length),G({type:"text",value:x});continue}if(k&&("globstar"===k.type||!0===k.star)){k.type="star",k.star=!0,k.value+=x,k.output=w,O.backtrack=!0,O.globstar=!0,H(x);continue}let t=N();if(!0!==n.noextglob&&/^\([^?]/.test(t)){U("star",x);continue}if("star"===k.type){if(!0===n.noglobstar){H(x);continue}const r=k.prev,i=r.prev,s="slash"===r.type||"bos"===r.type,o=i&&("star"===i.type||"globstar"===i.type);if(!0===n.bash&&(!s||t[0]&&"/"!==t[0])){G({type:"star",value:x,output:""});continue}const a=O.braces>0&&("comma"===r.type||"brace"===r.type),u=T.length&&("pipe"===r.type||"paren"===r.type);if(!s&&"paren"!==r.type&&!a&&!u){G({type:"star",value:x,output:""});continue}for(;"/**"===t.slice(0,3);){const n=e[O.index+4];if(n&&"/"!==n)break;t=t.slice(3),H("/**",3)}if("bos"===r.type&&M()){k.type="globstar",k.value+=x,k.output=A(n),O.output=k.output,O.globstar=!0,H(x);continue}if("slash"===r.type&&"bos"!==r.prev.type&&!o&&M()){O.output=O.output.slice(0,-(r.output+k.output).length),r.output=`(?:${r.output}`,k.type="globstar",k.output=A(n)+(n.strictSlashes?")":"|$)"),k.value+=x,O.globstar=!0,O.output+=r.output+k.output,H(x);continue}if("slash"===r.type&&"bos"!==r.prev.type&&"/"===t[0]){const e=void 0!==t[1]?"|$":"";O.output=O.output.slice(0,-(r.output+k.output).length),r.output=`(?:${r.output}`,k.type="globstar",k.output=`${A(n)}${f}|${f}${e})`,k.value+=x,O.output+=r.output+k.output,O.globstar=!0,H(x+I()),G({type:"slash",value:"/",output:""});continue}if("bos"===r.type&&"/"===t[0]){k.type="globstar",k.value+=x,k.output=`(?:^|${f}|${A(n)}${f})`,O.output=k.output,O.globstar=!0,H(x+I()),G({type:"slash",value:"/",output:""});continue}O.output=O.output.slice(0,-k.output.length),k.type="globstar",k.output=A(n),k.value+=x,O.output+=k.output,O.globstar=!0,H(x);continue}const r={type:"star",value:x,output:w};!0!==n.bash?!k||"bracket"!==k.type&&"paren"!==k.type||!0!==n.regex?(O.index!==O.start&&"slash"!==k.type&&"dot"!==k.type||("dot"===k.type?(O.output+=_,k.output+=_):!0===n.dot?(O.output+=y,k.output+=y):(O.output+=R,k.output+=R),"*"!==F()&&(O.output+=g,k.output+=g)),G(r)):(r.output=x,G(r)):(r.output=".*?","bos"!==k.type&&"slash"!==k.type||(r.output=R+r.output),G(r))}for(;O.brackets>0;){if(!0===n.strictBrackets)throw new SyntaxError(Fn("closing","]"));O.output=ln.escapeLast(O.output,"["),j("brackets")}for(;O.parens>0;){if(!0===n.strictBrackets)throw new SyntaxError(Fn("closing",")"));O.output=ln.escapeLast(O.output,"("),j("parens")}for(;O.braces>0;){if(!0===n.strictBrackets)throw new SyntaxError(Fn("closing","}"));O.output=ln.escapeLast(O.output,"{"),j("braces")}if(!0===n.strictSlashes||"star"!==k.type&&"bracket"!==k.type||G({type:"maybe_slash",value:"",output:`${f}?`}),!0===O.backtrack){O.output="";for(const e of O.tokens)O.output+=null!=e.output?e.output:e.value,e.suffix&&(O.output+=e.suffix)}return O};In.fastpaths=(e,t)=>{const n={...t},r="number"==typeof n.maxLength?Math.min(Tn,n.maxLength):Tn,i=e.length;if(i>r)throw new SyntaxError(`Input length: ${i}, exceeds maximum allowed length: ${r}`);e=kn[e]||e;const s=ln.isWindows(t),{DOT_LITERAL:o,SLASH_LITERAL:a,ONE_CHAR:u,DOTS_SLASH:l,NO_DOT:c,NO_DOTS:h,NO_DOTS_SLASH:p,STAR:f,START_ANCHOR:g}=un.globChars(s),d=n.dot?h:c,m=n.dot?p:c,_=n.capture?"":"?:";let y=!0===n.bash?".*?":f;n.capture&&(y=`(${y})`);const v=e=>!0===e.noglobstar?y:`(${_}(?:(?!${g}${e.dot?l:o}).)*?)`,b=e=>{switch(e){case"*":return`${d}${u}${y}`;case".*":return`${o}${u}${y}`;case"*.*":return`${d}${y}${o}${u}${y}`;case"*/*":return`${d}${y}${a}${u}${m}${y}`;case"**":return d+v(n);case"**/*":return`(?:${d}${v(n)}${a})?${m}${u}${y}`;case"**/*.*":return`(?:${d}${v(n)}${a})?${m}${y}${o}${u}${y}`;case"**/.*":return`(?:${d}${v(n)}${a})?${o}${u}${y}`;default:{const t=/^(.*?)\.(\w+)$/.exec(e);if(!t)return;const n=b(t[1]);if(!n)return;return n+o+t[2]}}},S=ln.removePrefix(e,{negated:!1,prefix:""});let E=b(S);return E&&!0!==n.strictSlashes&&(E+=`${a}?`),E};var Nn=In;const Hn=(e,t,n=!1)=>{if(Array.isArray(e)){const r=e.map(e=>Hn(e,t,n));return e=>{for(const t of r){const n=t(e);if(n)return n}return!1}}const r=(i=e)&&"object"==typeof i&&!Array.isArray(i)&&e.tokens&&e.input;var i;if(""===e||"string"!=typeof e&&!r)throw new TypeError("Expected pattern to be a non-empty string");const s=t||{},o=ln.isWindows(t),a=r?Hn.compileRe(e,t):Hn.makeRe(e,t,!1,!0),u=a.state;delete a.state;let l=()=>!1;if(s.ignore){const e={...t,ignore:null,onMatch:null,onResult:null};l=Hn(s.ignore,e,n)}const c=(n,r=!1)=>{const{isMatch:i,match:c,output:h}=Hn.test(n,a,t,{glob:e,posix:o}),p={glob:e,state:u,regex:a,posix:o,input:n,output:h,match:c,isMatch:i};return"function"==typeof s.onResult&&s.onResult(p),!1===i?(p.isMatch=!1,!!r&&p):l(n)?("function"==typeof s.onIgnore&&s.onIgnore(p),p.isMatch=!1,!!r&&p):("function"==typeof s.onMatch&&s.onMatch(p),!r||p)};return n&&(c.state=u),c};Hn.test=(e,t,n,{glob:r,posix:i}={})=>{if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(""===e)return{isMatch:!1,output:""};const s=n||{},o=s.format||(i?ln.toPosixSlashes:null);let a=e===r,u=a&&o?o(e):e;return!1===a&&(u=o?o(e):e,a=u===r),!1!==a&&!0!==s.capture||(a=!0===s.matchBase||!0===s.basename?Hn.matchBase(e,t,n,i):t.exec(u)),{isMatch:Boolean(a),match:a,output:u}},Hn.matchBase=(t,n,r,i=ln.isWindows(r))=>(n instanceof RegExp?n:Hn.makeRe(n,r)).test(e.basename(t)),Hn.isMatch=(e,t,n)=>Hn(t,n)(e),Hn.parse=(e,t)=>Array.isArray(e)?e.map(e=>Hn.parse(e,t)):Nn(e,{...t,fastpaths:!1}),Hn.scan=(e,t)=>On(e,t),Hn.compileRe=(e,t,n=!1,r=!1)=>{if(!0===n)return e.output;const i=t||{},s=i.contains?"":"^",o=i.contains?"":"$";let a=`${s}(?:${e.output})${o}`;e&&!0===e.negated&&(a=`^(?!${a}).*$`);const u=Hn.toRegex(a,t);return!0===r&&(u.state=e),u},Hn.makeRe=(e,t,n=!1,r=!1)=>{if(!e||"string"!=typeof e)throw new TypeError("Expected a non-empty string");const i=t||{};let s,o={negated:!1,fastpaths:!0},a="";return e.startsWith("./")&&(e=e.slice(2),a=o.prefix="./"),!1===i.fastpaths||"."!==e[0]&&"*"!==e[0]||(s=Nn.fastpaths(e,t)),void 0===s?(o=Nn(e,t),o.prefix=a+(o.prefix||"")):o.output=s,Hn.compileRe(o,t,n,r)},Hn.toRegex=(e,t)=>{try{const n=t||{};return new RegExp(e,n.flags||(n.nocase?"i":""))}catch(e){if(t&&!0===t.debug)throw e;return/$^/}},Hn.constants=un;var Bn=Hn;const $n=e=>"string"==typeof e&&(""===e||"./"===e),Dn=(e,t,n)=>{t=[].concat(t),e=[].concat(e);let r=new Set,i=new Set,s=new Set,o=0,a=e=>{s.add(e.output),n&&n.onResult&&n.onResult(e)};for(let s=0;s<t.length;s++){let u=Bn(String(t[s]),{...n,onResult:a},!0),l=u.state.negated||u.state.negatedExtglob;l&&o++;for(let t of e){let e=u(t,!0);(l?!e.isMatch:e.isMatch)&&(l?r.add(e.output):(r.delete(e.output),i.add(e.output)))}}let u=(o===t.length?[...s]:[...i]).filter(e=>!r.has(e));if(n&&0===u.length){if(!0===n.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===n.nonull||!0===n.nullglob)return n.unescape?t.map(e=>e.replace(/\\/g,"")):t}return u};Dn.match=Dn,Dn.matcher=(e,t)=>Bn(e,t),Dn.any=Dn.isMatch=(e,t,n)=>Bn(t,n)(e),Dn.not=(e,t,n={})=>{t=[].concat(t).map(String);let r=new Set,i=[],s=Dn(e,t,{...n,onResult:e=>{n.onResult&&n.onResult(e),i.push(e.output)}});for(let e of i)s.includes(e)||r.add(e);return[...r]},Dn.contains=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${s.inspect(e)}"`);if(Array.isArray(t))return t.some(t=>Dn.contains(e,t,n));if("string"==typeof t){if($n(e)||$n(t))return!1;if(e.includes(t)||e.startsWith("./")&&e.slice(2).includes(t))return!0}return Dn.isMatch(e,t,{...n,contains:!0})},Dn.matchKeys=(e,t,n)=>{if(!ln.isObject(e))throw new TypeError("Expected the first argument to be an object");let r=Dn(Object.keys(e),t,n),i={};for(let t of r)i[t]=e[t];return i},Dn.some=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=Bn(String(e),n);if(r.some(e=>t(e)))return!0}return!1},Dn.every=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=Bn(String(e),n);if(!r.every(e=>t(e)))return!1}return!0},Dn.all=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${s.inspect(e)}"`);return[].concat(t).every(t=>Bn(t,n)(e))},Dn.capture=(e,t,n)=>{let r=ln.isWindows(n),i=Bn.makeRe(String(e),{...n,capture:!0}).exec(r?ln.toPosixSlashes(t):t);if(i)return i.slice(1).map(e=>void 0===e?"":e)},Dn.makeRe=(...e)=>Bn.makeRe(...e),Dn.scan=(...e)=>Bn.scan(...e),Dn.parse=(e,t)=>{let n=[];for(let r of[].concat(e||[]))for(let e of sn(String(r),t))n.push(Bn.parse(e,t));return n},Dn.braces=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return t&&!0===t.nobrace||!/\{.*\}/.test(e)?[e]:sn(e,t)},Dn.braceExpand=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return Dn.braces(e,{...t,expand:!0})};var jn=Dn,Gn=d((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});const r=/[*?]|^!/,i=/\[.*]/,s=/(?:^|[^!*+?@])\(.*\|.*\)/,o=/[!*+?@]\(.*\)/,a=/{.*(?:,|\.\.).*}/;function u(e,t={}){return!l(e,t)}function l(e,t={}){return!(!1!==t.caseSensitiveMatch&&!e.includes("\\"))||(!!(r.test(e)||i.test(e)||s.test(e))||(!(!1===t.extglob||!o.test(e))||!(!1===t.braceExpansion||!a.test(e))))}function c(e){return e.startsWith("!")&&"("!==e[1]}function h(e){return!c(e)}function p(e){return e.endsWith("/**")}function f(e){return jn.braces(e,{expand:!0,nodupes:!0})}function g(e,t){return jn.makeRe(e,t)}n.isStaticPattern=u,n.isDynamicPattern=l,n.convertToPositivePattern=function(e){return c(e)?e.slice(1):e},n.convertToNegativePattern=function(e){return"!"+e},n.isNegativePattern=c,n.isPositivePattern=h,n.getNegativePatterns=function(e){return e.filter(c)},n.getPositivePatterns=function(e){return e.filter(h)},n.getBaseDirectory=function(e){return function(e,t){Object.assign({flipBackslashes:!0},t).flipBackslashes&&it&&e.indexOf("/")<0&&(e=e.replace(st,"/")),ot.test(e)&&(e+="/"),e+="a";do{e=rt(e)}while(nt(e)||at.test(e));return e.replace(ut,"$1")}(e,{flipBackslashes:!1})},n.hasGlobStar=function(e){return e.includes("**")},n.endsWithSlashGlobStar=p,n.isAffectDepthOfReadingPattern=function(t){const n=e.basename(t);return p(t)||u(n)},n.expandPatternsWithBraceExpansion=function(e){return e.reduce((e,t)=>e.concat(f(t)),[])},n.expandBraceExpansion=f,n.getPatternParts=function(e,t){const n=Bn.scan(e,Object.assign(Object.assign({},t),{parts:!0}));return 0===n.parts.length?[e]:n.parts},n.makeRe=g,n.convertPatternsToRe=function(e,t){return e.map(e=>g(e,t))},n.matchAny=function(e,t){return t.some(t=>t.test(e))}}));g(Gn);Gn.isStaticPattern,Gn.isDynamicPattern,Gn.convertToPositivePattern,Gn.convertToNegativePattern,Gn.isNegativePattern,Gn.isPositivePattern,Gn.getNegativePatterns,Gn.getPositivePatterns,Gn.getBaseDirectory,Gn.hasGlobStar,Gn.endsWithSlashGlobStar,Gn.isAffectDepthOfReadingPattern,Gn.expandPatternsWithBraceExpansion,Gn.expandBraceExpansion,Gn.getPatternParts,Gn.makeRe,Gn.convertPatternsToRe,Gn.matchAny;const Un=o.PassThrough,qn=Array.prototype.slice;var Wn=function(){const e=[];let t=!1;const n=qn.call(arguments);let r=n[n.length-1];r&&!Array.isArray(r)&&null==r.pipe?n.pop():r={};const i=!1!==r.end;null==r.objectMode&&(r.objectMode=!0);null==r.highWaterMark&&(r.highWaterMark=65536);const s=Un(r);function o(){for(let t=0,n=arguments.length;t<n;t++)e.push(Qn(arguments[t],r));return a(),this}function a(){if(t)return;t=!0;let n=e.shift();if(!n)return void process.nextTick(u);Array.isArray(n)||(n=[n]);let r=n.length+1;function i(){--r>0||(t=!1,a())}function o(e){function t(){e.removeListener("merge2UnpipeEnd",t),e.removeListener("end",t),i()}if(e._readableState.endEmitted)return i();e.on("merge2UnpipeEnd",t),e.on("end",t),e.pipe(s,{end:!1}),e.resume()}for(let e=0;e<n.length;e++)o(n[e]);i()}function u(){return t=!1,s.emit("queueDrain"),i&&s.end()}s.setMaxListeners(0),s.add=o,s.on("unpipe",(function(e){e.emit("merge2UnpipeEnd")})),n.length&&o.apply(null,n);return s};function Qn(e,t){if(Array.isArray(e))for(let n=0,r=e.length;n<r;n++)e[n]=Qn(e[n],t);else{if(!e._readableState&&e.pipe&&(e=e.pipe(Un(t))),!e._readableState||!e.pause||!e.pipe)throw new Error("Only readable stream can be merged.");e.pause()}return e}var Kn=d((function(e,t){function n(e){e.forEach(e=>e.emit("close"))}Object.defineProperty(t,"__esModule",{value:!0}),t.merge=function(e){const t=Wn(e);return e.forEach(e=>{e.once("error",e=>t.emit("error",e))}),t.once("close",()=>n(e)),t.once("end",()=>n(e)),t}}));g(Kn);Kn.merge;var Vn=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.isString=function(e){return"string"==typeof e},t.isEmpty=function(e){return""===e}}));g(Vn);Vn.isString,Vn.isEmpty;var Xn=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.array=Xe,t.errno=Ye,t.fs=Ze,t.path=ze,t.pattern=Gn,t.stream=Kn,t.string=Vn}));g(Xn);Xn.array,Xn.errno,Xn.fs,Xn.path,Xn.pattern,Xn.stream,Xn.string;var Yn=d((function(e,t){function n(e,t,n){const r=s(e);if("."in r){return[a(".",e,t,n)]}return o(r,t,n)}function r(e){return Xn.pattern.getPositivePatterns(e)}function i(e,t){return Xn.pattern.getNegativePatterns(e).concat(t).map(Xn.pattern.convertToPositivePattern)}function s(e){return e.reduce((e,t)=>{const n=Xn.pattern.getBaseDirectory(t);return n in e?e[n].push(t):e[n]=[t],e},{})}function o(e,t,n){return Object.keys(e).map(r=>a(r,e[r],t,n))}function a(e,t,n,r){return{dynamic:r,positive:t,negative:n,base:e,patterns:[].concat(t,n.map(Xn.pattern.convertToNegativePattern))}}Object.defineProperty(t,"__esModule",{value:!0}),t.generate=function(e,t){const s=r(e),o=i(e,t.ignore),a=s.filter(e=>Xn.pattern.isStaticPattern(e,t)),u=s.filter(e=>Xn.pattern.isDynamicPattern(e,t)),l=n(a,o,!1),c=n(u,o,!0);return l.concat(c)},t.convertPatternsToTasks=n,t.getPositivePatterns=r,t.getNegativePatternsAsPositive=i,t.groupPatternsByBaseDirectory=s,t.convertPatternGroupsToTasks=o,t.convertPatternGroupToTask=a}));g(Yn);Yn.generate,Yn.convertPatternsToTasks,Yn.getPositivePatterns,Yn.getNegativePatternsAsPositive,Yn.groupPatternsByBaseDirectory,Yn.convertPatternGroupsToTasks,Yn.convertPatternGroupToTask;var Zn=d((function(e,t){function n(e,t){e(t)}function r(e,t){e(null,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t,i){t.fs.lstat(e,(s,o)=>null!==s?n(i,s):o.isSymbolicLink()&&t.followSymbolicLink?void t.fs.stat(e,(e,s)=>{if(null!==e)return t.throwErrorOnBrokenSymbolicLink?n(i,e):r(i,o);t.markSymbolicLink&&(s.isSymbolicLink=()=>!0),r(i,s)}):r(i,o))}}));g(Zn);Zn.read;var zn=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t){const n=t.fs.lstatSync(e);if(!n.isSymbolicLink()||!t.followSymbolicLink)return n;try{const n=t.fs.statSync(e);return t.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(e){if(!t.throwErrorOnBrokenSymbolicLink)return n;throw e}}}));g(zn);zn.read;var Jn=d((function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.FILE_SYSTEM_ADAPTER={lstat:t.lstat,stat:t.stat,lstatSync:t.lstatSync,statSync:t.statSync},n.createFileSystemAdapter=function(e){return void 0===e?n.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},n.FILE_SYSTEM_ADAPTER),e)}}));g(Jn);Jn.FILE_SYSTEM_ADAPTER,Jn.createFileSystemAdapter;var er=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e={}){this._options=e,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=Jn.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(e,t){return void 0===e?t:e}}}));g(er);var tr=d((function(e,t){function n(e={}){return e instanceof er.default?e:new er.default(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=er.default,t.stat=function(e,t,r){if("function"==typeof t)return Zn.read(e,n(),t);Zn.read(e,n(t),r)},t.statSync=function(e,t){const r=n(t);return zn.read(e,r)}}));g(tr);tr.Settings,tr.stat,tr.statSync;var nr=function(e,t){var n,r,i,s=!0;Array.isArray(e)?(n=[],r=e.length):(i=Object.keys(e),n={},r=i.length);function o(e){function r(){t&&t(e,n),t=null}s?process.nextTick(r):r()}function a(e,t,i){n[e]=i,(0==--r||t)&&o(t)}r?i?i.forEach((function(t){e[t]((function(e,n){a(t,e,n)}))})):e.forEach((function(e,t){e((function(e,n){a(t,e,n)}))})):o(null);s=!1};var rr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});const n=process.versions.node.split("."),r=parseInt(n[0],10),i=parseInt(n[1],10),s=r>10,o=10===r&&i>=10;t.IS_SUPPORT_READDIR_WITH_FILE_TYPES=s||o}));g(rr);rr.IS_SUPPORT_READDIR_WITH_FILE_TYPES;var ir=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new n(e,t)}}));g(ir);ir.createDirentFromStats;var sr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.fs=ir}));g(sr);sr.fs;var or=d((function(e,t){function n(e,t,n){t.fs.readdir(e,{withFileTypes:!0},(r,o)=>{if(null!==r)return i(n,r);const a=o.map(n=>({dirent:n,name:n.name,path:`${e}${t.pathSegmentSeparator}${n.name}`}));if(!t.followSymbolicLinks)return s(n,a);const u=a.map(e=>function(e,t){return n=>{if(!e.dirent.isSymbolicLink())return n(null,e);t.fs.stat(e.path,(r,i)=>null!==r?t.throwErrorOnBrokenSymbolicLink?n(r):n(null,e):(e.dirent=sr.fs.createDirentFromStats(e.name,i),n(null,e)))}}(e,t));nr(u,(e,t)=>{if(null!==e)return i(n,e);s(n,t)})})}function r(e,t,n){t.fs.readdir(e,(r,o)=>{if(null!==r)return i(n,r);const a=o.map(n=>`${e}${t.pathSegmentSeparator}${n}`),u=a.map(e=>n=>tr.stat(e,t.fsStatSettings,n));nr(u,(e,r)=>{if(null!==e)return i(n,e);const u=[];o.forEach((e,n)=>{const i=r[n],s={name:e,path:a[n],dirent:sr.fs.createDirentFromStats(e,i)};t.stats&&(s.stats=i),u.push(s)}),s(n,u)})})}function i(e,t){e(t)}function s(e,t){e(null,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t,i){return!t.stats&&rr.IS_SUPPORT_READDIR_WITH_FILE_TYPES?n(e,t,i):r(e,t,i)},t.readdirWithFileTypes=n,t.readdir=r}));g(or);or.read,or.readdirWithFileTypes,or.readdir;var ar=d((function(e,t){function n(e,t){return t.fs.readdirSync(e,{withFileTypes:!0}).map(n=>{const r={dirent:n,name:n.name,path:`${e}${t.pathSegmentSeparator}${n.name}`};if(r.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{const e=t.fs.statSync(r.path);r.dirent=sr.fs.createDirentFromStats(r.name,e)}catch(e){if(t.throwErrorOnBrokenSymbolicLink)throw e}return r})}function r(e,t){return t.fs.readdirSync(e).map(n=>{const r=`${e}${t.pathSegmentSeparator}${n}`,i=tr.statSync(r,t.fsStatSettings),s={name:n,path:r,dirent:sr.fs.createDirentFromStats(n,i)};return t.stats&&(s.stats=i),s})}Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t){return!t.stats&&rr.IS_SUPPORT_READDIR_WITH_FILE_TYPES?n(e,t):r(e,t)},t.readdirWithFileTypes=n,t.readdir=r}));g(ar);ar.read,ar.readdirWithFileTypes,ar.readdir;var ur=d((function(e,n){Object.defineProperty(n,"__esModule",{value:!0}),n.FILE_SYSTEM_ADAPTER={lstat:t.lstat,stat:t.stat,lstatSync:t.lstatSync,statSync:t.statSync,readdir:t.readdir,readdirSync:t.readdirSync},n.createFileSystemAdapter=function(e){return void 0===e?n.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},n.FILE_SYSTEM_ADAPTER),e)}}));g(ur);ur.FILE_SYSTEM_ADAPTER,ur.createFileSystemAdapter;var lr=d((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t={}){this._options=t,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=ur.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,e.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new tr.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return void 0===e?t:e}}}));g(lr);var cr=d((function(e,t){function n(e={}){return e instanceof lr.default?e:new lr.default(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=lr.default,t.scandir=function(e,t,r){if("function"==typeof t)return or.read(e,n(),t);or.read(e,n(t),r)},t.scandirSync=function(e,t){const r=n(t);return ar.read(e,r)}}));g(cr);cr.Settings,cr.scandir,cr.scandirSync;var hr=function(e){var t=new e,n=t;return{get:function(){var r=t;return r.next?t=r.next:(t=new e,n=t),r.next=null,r},release:function(e){n.next=e,n=e}}};function pr(){}function fr(){this.value=null,this.callback=pr,this.next=null,this.release=pr,this.context=null;var e=this;this.worked=function(t,n){var r=e.callback;e.value=null,e.callback=pr,r.call(e.context,t,n),e.release(e)}}var gr=function(e,t,n){"function"==typeof e&&(n=t,t=e,e=null);var r=hr(fr),i=null,s=null,o=0,a={push:function(n,l){var c=r.get();c.context=e,c.release=u,c.value=n,c.callback=l||pr,o===a.concurrency||a.paused?s?(s.next=c,s=c):(i=c,s=c,a.saturated()):(o++,t.call(e,c.value,c.worked))},drain:pr,saturated:pr,pause:function(){a.paused=!0},paused:!1,concurrency:n,running:function(){return o},resume:function(){if(!a.paused)return;a.paused=!1;for(var e=0;e<a.concurrency;e++)o++,u()},idle:function(){return 0===o&&0===a.length()},length:function(){var e=i,t=0;for(;e;)e=e.next,t++;return t},unshift:function(n,l){var c=r.get();c.context=e,c.release=u,c.value=n,c.callback=l||pr,o===a.concurrency||a.paused?i?(c.next=i,i=c):(i=c,s=c,a.saturated()):(o++,t.call(e,c.value,c.worked))},empty:pr,kill:function(){i=null,s=null,a.drain=pr},killAndDrain:function(){i=null,s=null,a.drain(),a.drain=pr}};return a;function u(n){n&&r.release(n);var u=i;u?a.paused?o--:(s===i&&(s=null),i=u.next,u.next=null,t.call(e,u.value,u.worked),null===s&&a.empty()):0==--o&&a.drain()}},dr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.isFatalError=function(e,t){return null===e.errorFilter||!e.errorFilter(t)},t.isAppliedFilter=function(e,t){return null===e||e(t)},t.replacePathSegmentSeparator=function(e,t){return e.split(/[\\/]/).join(t)},t.joinPathSegments=function(e,t,n){return""===e?t:e+n+t}}));g(dr);dr.isFatalError,dr.isAppliedFilter,dr.replacePathSegmentSeparator,dr.joinPathSegments;var mr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._root=dr.replacePathSegmentSeparator(e,t.pathSegmentSeparator)}}}));g(mr);var _r=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends mr.default{constructor(e,t){super(e,t),this._settings=t,this._scandir=cr.scandir,this._emitter=new a.EventEmitter,this._queue=gr(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(e){this._emitter.on("entry",e)}onError(e){this._emitter.once("error",e)}onEnd(e){this._emitter.once("end",e)}_pushToQueue(e,t){const n={directory:e,base:t};this._queue.push(n,e=>{null!==e&&this._handleError(e)})}_worker(e,t){this._scandir(e.directory,this._settings.fsScandirSettings,(n,r)=>{if(null!==n)return t(n,void 0);for(const t of r)this._handleEntry(t,e.base);t(null,void 0)})}_handleError(e){dr.isFatalError(this._settings,e)&&(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",e))}_handleEntry(e,t){if(this._isDestroyed||this._isFatalError)return;const n=e.path;void 0!==t&&(e.path=dr.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),dr.isAppliedFilter(this._settings.entryFilter,e)&&this._emitEntry(e),e.dirent.isDirectory()&&dr.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,e.path)}_emitEntry(e){this._emitter.emit("entry",e)}}t.default=n}));g(_r);var yr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new _r.default(this._root,this._settings),this._storage=new Set}read(e){this._reader.onError(t=>{!function(e,t){e(t)}(e,t)}),this._reader.onEntry(e=>{this._storage.add(e)}),this._reader.onEnd(()=>{!function(e,t){e(null,t)}(e,[...this._storage])}),this._reader.read()}}}));g(yr);var vr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new _r.default(this._root,this._settings),this._stream=new o.Readable({objectMode:!0,read:()=>{},destroy:this._reader.destroy.bind(this._reader)})}read(){return this._reader.onError(e=>{this._stream.emit("error",e)}),this._reader.onEntry(e=>{this._stream.push(e)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}}}));g(vr);var br=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends mr.default{constructor(){super(...arguments),this._scandir=cr.scandirSync,this._storage=new Set,this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),[...this._storage]}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(const e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{const n=this._scandir(e,this._settings.fsScandirSettings);for(const e of n)this._handleEntry(e,t)}catch(e){this._handleError(e)}}_handleError(e){if(dr.isFatalError(this._settings,e))throw e}_handleEntry(e,t){const n=e.path;void 0!==t&&(e.path=dr.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),dr.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&dr.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,e.path)}_pushToStorage(e){this._storage.add(e)}}t.default=n}));g(br);var Sr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new br.default(this._root,this._settings)}read(){return this._reader.read()}}}));g(Sr);var Er=d((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t={}){this._options=t,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,1/0),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,e.sep),this.fsScandirSettings=new cr.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return void 0===e?t:e}}}));g(Er);var Ar=d((function(e,t){function n(e={}){return e instanceof Er.default?e:new Er.default(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=Er.default,t.walk=function(e,t,r){if("function"==typeof t)return new yr.default(e,n()).read(t);new yr.default(e,n(t)).read(r)},t.walkSync=function(e,t){const r=n(t);return new Sr.default(e,r).read()},t.walkStream=function(e,t){const r=n(t);return new vr.default(e,r).read()}}));g(Ar);Ar.Settings,Ar.walk,Ar.walkSync,Ar.walkStream;var Rr=d((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(e){this._settings=e,this._fsStatSettings=new tr.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(t){return e.resolve(this._settings.cwd,t)}_makeEntry(e,t){const n={name:t,path:t,dirent:Xn.fs.createDirentFromStats(t,e)};return this._settings.stats&&(n.stats=e),n}_isFatalError(e){return!Xn.errno.isEnoentCodeError(e)&&!this._settings.suppressErrors}}}));g(Rr);var Cr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Rr.default{constructor(){super(...arguments),this._walkStream=Ar.walkStream,this._stat=tr.stat}dynamic(e,t){return this._walkStream(e,t)}static(e,t){const n=e.map(this._getFullEntryPath,this),r=new o.PassThrough({objectMode:!0});r._write=(i,s,o)=>this._getEntry(n[i],e[i],t).then(e=>{null!==e&&t.entryFilter(e)&&r.push(e),i===n.length-1&&r.end(),o()}).catch(o);for(let e=0;e<n.length;e++)r.write(e);return r}_getEntry(e,t,n){return this._getStat(e).then(e=>this._makeEntry(e,t)).catch(e=>{if(n.errorFilter(e))return null;throw e})}_getStat(e){return new Promise((t,n)=>{this._stat(e,this._fsStatSettings,(e,r)=>null===e?t(r):n(e))})}}t.default=n}));g(Cr);var wr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,n){this._patterns=e,this._settings=t,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){const e=Xn.pattern.expandPatternsWithBraceExpansion(this._patterns);for(const t of e){const e=this._getPatternSegments(t),n=this._splitSegmentsIntoSections(e);this._storage.push({complete:n.length<=1,pattern:t,segments:e,sections:n})}}_getPatternSegments(e){return Xn.pattern.getPatternParts(e,this._micromatchOptions).map(e=>Xn.pattern.isDynamicPattern(e,this._settings)?{dynamic:!0,pattern:e,patternRe:Xn.pattern.makeRe(e,this._micromatchOptions)}:{dynamic:!1,pattern:e})}_splitSegmentsIntoSections(e){return Xn.array.splitWhen(e,e=>e.dynamic&&Xn.pattern.hasGlobStar(e.pattern))}}}));g(wr);var Or=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends wr.default{match(e){const t=e.split("/"),n=t.length,r=this._storage.filter(e=>!e.complete||e.segments.length>n);for(const e of r){const r=e.sections[0];if(!e.complete&&n>r.length)return!0;if(t.every((t,n)=>{const r=e.segments[n];return!(!r.dynamic||!r.patternRe.test(t))||!r.dynamic&&r.pattern===t}))return!0}return!1}}t.default=n}));g(Or);var Tr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t}getFilter(e,t,n){const r=this._getMatcher(t),i=this._getNegativePatternsRe(n);return t=>this._filter(e,t,r,i)}_getMatcher(e){return new Or.default(e,this._settings,this._micromatchOptions)}_getNegativePatternsRe(e){const t=e.filter(Xn.pattern.isAffectDepthOfReadingPattern);return Xn.pattern.convertPatternsToRe(t,this._micromatchOptions)}_filter(e,t,n,r){const i=this._getEntryLevel(e,t.path);if(this._isSkippedByDeep(i))return!1;if(this._isSkippedSymbolicLink(t))return!1;const s=Xn.path.removeLeadingDotSegment(t.path);return!this._isSkippedByPositivePatterns(s,n)&&this._isSkippedByNegativePatterns(s,r)}_isSkippedByDeep(e){return e>=this._settings.deep}_isSkippedSymbolicLink(e){return!this._settings.followSymbolicLinks&&e.dirent.isSymbolicLink()}_getEntryLevel(e,t){const n=e.split("/").length;return t.split("/").length-(""===e?0:n)}_isSkippedByPositivePatterns(e,t){return!this._settings.baseNameMatch&&!t.match(e)}_isSkippedByNegativePatterns(e,t){return!Xn.pattern.matchAny(e,t)}}}));g(Tr);var Lr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t,this.index=new Map}getFilter(e,t){const n=Xn.pattern.convertPatternsToRe(e,this._micromatchOptions),r=Xn.pattern.convertPatternsToRe(t,this._micromatchOptions);return e=>this._filter(e,n,r)}_filter(e,t,n){if(this._settings.unique){if(this._isDuplicateEntry(e))return!1;this._createIndexRecord(e)}if(this._onlyFileFilter(e)||this._onlyDirectoryFilter(e))return!1;if(this._isSkippedByAbsoluteNegativePatterns(e,n))return!1;const r=this._settings.baseNameMatch?e.name:e.path;return this._isMatchToPatterns(r,t)&&!this._isMatchToPatterns(e.path,n)}_isDuplicateEntry(e){return this.index.has(e.path)}_createIndexRecord(e){this.index.set(e.path,void 0)}_onlyFileFilter(e){return this._settings.onlyFiles&&!e.dirent.isFile()}_onlyDirectoryFilter(e){return this._settings.onlyDirectories&&!e.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(e,t){if(!this._settings.absolute)return!1;const n=Xn.path.makeAbsolute(this._settings.cwd,e.path);return this._isMatchToPatterns(n,t)}_isMatchToPatterns(e,t){const n=Xn.path.removeLeadingDotSegment(e);return Xn.pattern.matchAny(n,t)}}}));g(Lr);var Pr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._settings=e}getFilter(){return e=>this._isNonFatalError(e)}_isNonFatalError(e){return Xn.errno.isEnoentCodeError(e)||this._settings.suppressErrors}}}));g(Pr);var xr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._settings=e}getTransformer(){return e=>this._transform(e)}_transform(e){let t=e.path;return this._settings.absolute&&(t=Xn.path.makeAbsolute(this._settings.cwd,t),t=Xn.path.unixify(t)),this._settings.markDirectories&&e.dirent.isDirectory()&&(t+="/"),this._settings.objectMode?Object.assign(Object.assign({},e),{path:t}):t}}}));g(xr);var kr=d((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(e){this._settings=e,this.errorFilter=new Pr.default(this._settings),this.entryFilter=new Lr.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new Tr.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new xr.default(this._settings)}_getRootDirectory(t){return e.resolve(this._settings.cwd,t.base)}_getReaderOptions(e){const t="."===e.base?"":e.base;return{basePath:t,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(t,e.positive,e.negative),entryFilter:this.entryFilter.getFilter(e.positive,e.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}}}));g(kr);var Mr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends kr.default{constructor(){super(...arguments),this._reader=new Cr.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e),r=[];return new Promise((i,s)=>{const o=this.api(t,e,n);o.once("error",s),o.on("data",e=>r.push(n.transform(e))),o.once("end",()=>i(r))})}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=n}));g(Mr);var Fr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends kr.default{constructor(){super(...arguments),this._reader=new Cr.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e),r=this.api(t,e,n),i=new o.Readable({objectMode:!0,read:()=>{}});return r.once("error",e=>i.emit("error",e)).on("data",e=>i.emit("data",n.transform(e))).once("end",()=>i.emit("end")),i.once("close",()=>r.destroy()),i}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=n}));g(Fr);var Ir=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Rr.default{constructor(){super(...arguments),this._walkSync=Ar.walkSync,this._statSync=tr.statSync}dynamic(e,t){return this._walkSync(e,t)}static(e,t){const n=[];for(const r of e){const e=this._getFullEntryPath(r),i=this._getEntry(e,r,t);null!==i&&t.entryFilter(i)&&n.push(i)}return n}_getEntry(e,t,n){try{const n=this._getStat(e);return this._makeEntry(n,t)}catch(e){if(n.errorFilter(e))return null;throw e}}_getStat(e){return this._statSync(e,this._fsStatSettings)}}t.default=n}));g(Ir);var Nr=d((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends kr.default{constructor(){super(...arguments),this._reader=new Ir.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e);return this.api(t,e,n).map(n.transform)}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=n}));g(Nr);var Hr=d((function(e,n){Object.defineProperty(n,"__esModule",{value:!0});const r=i.cpus().length;n.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:t.lstat,lstatSync:t.lstatSync,stat:t.stat,statSync:t.statSync,readdir:t.readdir,readdirSync:t.readdirSync};n.default=class{constructor(e={}){this._options=e,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,r),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(e,t){return void 0===e?t:e}_getFileSystemMethods(e={}){return Object.assign(Object.assign({},n.DEFAULT_FILE_SYSTEM_ADAPTER),e)}}}));g(Hr);Hr.DEFAULT_FILE_SYSTEM_ADAPTER;async function Br(e,t){Dr(e);const n=$r(e,Mr.default,t),r=await Promise.all(n);return Xn.array.flatten(r)}function $r(e,t,n){const r=[].concat(e),i=new Hr.default(n),s=Yn.generate(r,i),o=new t(i);return s.map(o.read,o)}function Dr(e){if(![].concat(e).every(e=>Xn.string.isString(e)&&!Xn.string.isEmpty(e)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}!function(e){e.sync=function(e,t){Dr(e);const n=$r(e,Nr.default,t);return Xn.array.flatten(n)},e.stream=function(e,t){Dr(e);const n=$r(e,Fr.default,t);return Xn.stream.merge(n)},e.generateTasks=function(e,t){Dr(e);const n=[].concat(e),r=new Hr.default(t);return Yn.generate(n,r)},e.isDynamicPattern=function(e,t){Dr(e);const n=new Hr.default(t);return Xn.pattern.isDynamicPattern(e,n)},e.escapePath=function(e){return Dr(e),Xn.path.escape(e)}}(Br||(Br={}));var jr=Br;class Gr{constructor(e){this.testRunner=e}resolveGlob(t){return jr(t,{ignore:["node_modules/**/*"]}).then(t=>{for(const n of t){const t=e.resolve(n.toString());this.testRunner.setCurrentFile(t),require(t)}})}}!function(e){if((e=e||{}).environment&&(z=e.environment,-1===["node","browser","auto"].indexOf(z)))throw new Error("environment "+z+" was unknown. Available options are {auto, browser, node}");if(e.retrieveFile&&(e.overrideRetrieveFile&&(ne.length=0),ne.unshift(e.retrieveFile)),e.retrieveSourceMap&&(e.overrideRetrieveSourceMap&&(re.length=0),re.unshift(e.retrieveSourceMap)),e.hookRequire&&!ie()){var t;try{t=n}catch(e){}var r=t.prototype._compile;r.__sourceMapSupport||(t.prototype._compile=function(e,t){return J[t]=e,ee[t]=void 0,r.call(this,e,t)},t.prototype._compile.__sourceMapSupport=!0)}var i;(Z||(Z="emptyCacheBetweenOperations"in e&&e.emptyCacheBetweenOperations),X||(X=!0,Error.prepareStackTrace=fe),Y)||(!("handleUncaughtExceptions"in e)||e.handleUncaughtExceptions)&&"object"==typeof process&&null!==process&&"function"==typeof process.on&&(Y=!0,i=process.emit,process.emit=function(e){if("uncaughtException"===e){var t=arguments[1]&&arguments[1].stack,n=this.listeners(e).length>0;if(t&&!n)return ge(arguments[1])}return i.apply(this,arguments)})}(),(new class{constructor(e=new ke,t=new Ie,n=new He,r=new Be){this.cliConfigResolver=e,this.configFileLoader=t,this.packageJsonConfigLoader=n,this.configMerger=r}resolve(e){return $e(this,void 0,void 0,(function*(){const t=this.cliConfigResolver.parse(e),n=yield this.getFileConfig(t.configPath),r=this.packageJsonConfigLoader.loadConfig();if(n&&r)throw new Error("Config exists within both package.json and an umbra.config file. Please remove one.");return this.configMerger.merge(Ne,r,n,t)}))}getFileConfig(e){return $e(this,void 0,void 0,(function*(){if(e)return yield this.configFileLoader.loadConfig(e,Ne.cacheDir);try{return yield this.configFileLoader.loadConfig("./umbra.config.ts",Ne.cacheDir)}catch(e){}try{return yield this.configFileLoader.loadConfig("./umbra.config.js",Ne.cacheDir)}catch(e){}return null}))}}).resolve(process.argv).then(e=>({config:e})).then(e=>(e.runner=new Ve({timeoutMs:e.config.timeoutMs,stopOnFirstFail:!1}),e)).then(e=>{const t=e.config.reporting,n=t?t.reporters:null;return n&&0!==n.length?e.reporters=n.map(e=>{try{return require(e)}catch(t){if(Le[e])return new Le[e];throw new Error(`Unable to load reporter: ${e}`)}}):e.reporters=[new Te],e}).then(e=>{const t=e.runner;for(const n of e.reporters)t.on("onTestResult",n.onTestResult.bind(n)),t.on("onTestStart",n.onTestStart.bind(n));return e}).then(e=>{const t=e.runner,n=t.it.only.bind(t),r=t.describe.only.bind(t),i=["it","describe","after","afterEach","before","beforeEach"];for(const e of i)Pe[e]=t[e].bind(t);return Pe.it.only=n,Pe.describe.only=r,Pe.__testRunner=t,e}).then(e=>Promise.all(e.reporters.map(e=>e.initialize())).then(()=>e)).then(e=>{if(!e.config.input)throw new Error("Config is missing an input file.");return new Gr(e.runner).resolveGlob(e.config.input).then(()=>e.runner.run()).then(t=>{for(const n of e.reporters)n.onRunEnd(t);return t})}).then(e=>{(e.totalFailures>0||e.totalTimeouts>0)&&process.exit(2)}).catch(e=>{console.error(e),process.exit(1)});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
