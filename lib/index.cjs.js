"use strict";var child_process=require("child_process"),path=require("path"),fs=require("fs"),fastGlob=require("fast-glob"),umbraTestRunner=require("umbra-test-runner"),argparse=require("argparse");class ArgsParser{constructor(){this.DEFAULT_TIMEOUT_MS=100,this.argsParser=new argparse.ArgumentParser({description:"Run tests using the Umbra test framework."}),this.addGeneralOptions(),this.addTimeoutOptions(),this.addReportingOptions(),this.addParallelOptions()}parse(){const e=this.argsParser.parseArgs();return{input:e.input[0],cacheDir:e.cacheDir,configPath:path.resolve(e.configPath),debug:e.debug,debugBreak:e.debugBrk,watch:e.watch,timeoutMs:{it:e.itTimeoutMs,before:e.beforeTimeoutMs,beforeEach:e.beforeEachTimeoutMs,after:e.afterTimeoutMs,afterEach:e.afterEachTimeoutMs},reporting:{reporters:e.reporters,outputPath:e.outputPath},parallel:{idempotentFiles:e.idempotentFiles,idempotentTests:e.idempotentTests}}}addGeneralOptions(){this.argsParser.addArgument("input",{help:"Files, or globs, to run with the Umbra Test Runner",action:"append",nargs:"+"}),this.argsParser.addArgument(["-d","--debug"],{help:"Enables the Node debugger",required:!1,action:"storeTrue",dest:"debug"}),this.argsParser.addArgument(["-db","--debug-brk"],{help:"Enables the Node debugger, breaking once the first test is evaluated",required:!1,action:"storeTrue",dest:"debugBrk"}),this.argsParser.addArgument(["-w","--watch"],{help:"Enables watch mode, which will evaluate all tests first and then again once changes occur.",required:!1,action:"storeTrue",dest:"watch"}),this.argsParser.addArgument(["-c","--config"],{help:"Sets the config file path.",required:!1,dest:"configPath",defaultValue:"./umbra.config.ts"}),this.argsParser.addArgument(["--cacheDir"],{help:"The directory in which to store umbra cache files used for dynamic optimization.",required:!1,dest:"cacheDir",defaultValue:".umbra-cache"})}addTimeoutOptions(){this.argsParser.addArgument(["--timeoutMs"],{help:"Specifies the general asynchronous timeout value in milliseconds. This affects *all* async methods (it, before, after, etc.)",required:!1,defaultValue:this.DEFAULT_TIMEOUT_MS,dest:"timeoutMs"});for(const e of["it","before","beforeEach","after","afterEach"])this.argsParser.addArgument([`--${e}TimeoutMs`],{help:`Specifies the asynchronous timeout value for \`${e}\` blocks in milliseconds. This overrides general settings.`,required:!1,defaultValue:this.DEFAULT_TIMEOUT_MS,dest:`${e}TimeoutMs`})}addReportingOptions(){this.argsParser.addArgument(["-o","--outputPath"],{help:"The output directory to write the final results to.",required:!1,dest:"outputPath"}),this.argsParser.addArgument(["-r","--reporters"],{help:"The output directory to write the final results to.",required:!1,action:"append",defaultValue:[],dest:"reporters"})}addParallelOptions(){this.argsParser.addArgument(["--idempotentFiles"],{help:"If set, files are treated as idempotent (meaning other file execution does not affect it).",required:!1,action:"storeTrue",dest:"idempotentFiles"}),this.argsParser.addArgument(["--idempotentTests"],{help:"If set, tests are treated as idempotent (meaning other test execution does not affect it). Requires idempotent files.",required:!1,action:"storeTrue",dest:"idempotentTests"})}}var __awaiter=function(e,t,r,s){return new(r||(r=Promise))((function(a,i){function n(e){try{u(s.next(e))}catch(e){i(e)}}function o(e){try{u(s.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,o)}u((s=s.apply(e,t||[])).next())}))},__asyncValues=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},s("next"),s("throw"),s("return"),t[Symbol.asyncIterator]=function(){return this},t);function s(r){t[r]=e[r]&&function(t){return new Promise((function(s,a){(function(e,t,r,s){Promise.resolve(s).then((function(t){e({value:t,done:r})}),t)})(s,a,(t=e[r](t)).done,t.value)}))}}};const parser=new ArgsParser,parsedArgs=parser.parse();fs.existsSync(parsedArgs.cacheDir)||fs.mkdirSync(parsedArgs.cacheDir);let finalConfig=parsedArgs;if(fs.existsSync(parsedArgs.configPath)){let e=parsedArgs.configPath;"ts"===path.extname(parsedArgs.configPath)&&(e=path.resolve(parsedArgs.cacheDir,"config.js"),child_process.spawnSync("tsc",["--outFile",e,parsedArgs.configPath],{stdio:"inherit"}));const t=require(e);console.error("got config!"),console.error(t)}const runner=new umbraTestRunner.TestRunner,globalFunctions=["it","describe","after","afterEach","before","beforeEach"];for(const e of globalFunctions)global[e]=runner[e];(function(){var e,t;return __awaiter(this,void 0,void 0,(function*(){const r=fastGlob.stream(finalConfig.input);try{for(var s,a=__asyncValues(r);!(s=yield a.next()).done;){const e=s.value,t=path.resolve(e.toString());require(t)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=a.return)&&(yield t.call(a))}finally{if(e)throw e.error}}return runner.run()}))})().then(e=>{console.error(e)}).catch(e=>{console.error(e),process.exit(1)});
