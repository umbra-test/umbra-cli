import e,{basename as t,resolve as n,extname as r}from"path";import i,{promises as s}from"fs";import o from"module";import{spawn as a}from"child_process";import u from"os";import l from"util";import c from"stream";import h from"events";var p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""),f=function(e){if(0<=e&&e<p.length)return p[e];throw new TypeError("Must be between 0 and 63: "+e)},g=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1};var d=function(e){var t,n="",r=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&r,(r>>>=5)>0&&(t|=32),n+=f(t)}while(r>0);return n},m=function(e,t,n){var r,i,s,o,a=e.length,u=0,l=0;do{if(t>=a)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(i=g(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));r=!!(32&i),u+=(i&=31)<<l,l+=5}while(r);n.value=(o=(s=u)>>1,1==(1&s)?-o:o),n.rest=t},_="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function y(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function v(e,t){return e(t={exports:{}},t.exports),t.exports}var b=v((function(e,t){t.getArg=function(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')};var n=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,r=/^data:.+\,.+$/;function i(e){var t=e.match(n);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function s(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function o(e){var n=e,r=i(e);if(r){if(!r.path)return e;n=r.path}for(var o,a=t.isAbsolute(n),u=n.split(/\/+/),l=0,c=u.length-1;c>=0;c--)"."===(o=u[c])?u.splice(c,1):".."===o?l++:l>0&&(""===o?(u.splice(c+1,l),l=0):(u.splice(c,2),l--));return""===(n=u.join("/"))&&(n=a?"/":"."),r?(r.path=n,s(r)):n}function a(e,t){""===e&&(e="."),""===t&&(t=".");var n=i(t),a=i(e);if(a&&(e=a.path||"/"),n&&!n.scheme)return a&&(n.scheme=a.scheme),s(n);if(n||t.match(r))return t;if(a&&!a.host&&!a.path)return a.host=t,s(a);var u="/"===t.charAt(0)?t:o(e.replace(/\/+$/,"")+"/"+t);return a?(a.path=u,s(a)):u}t.urlParse=i,t.urlGenerate=s,t.normalize=o,t.join=a,t.isAbsolute=function(e){return"/"===e.charAt(0)||n.test(e)},t.relative=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var n=0;0!==t.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return t;if((e=e.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return t;++n}return Array(n+1).join("../")+t.substr(e.length+1)};var u=!("__proto__"in Object.create(null));function l(e){return e}function c(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function h(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}t.toSetString=u?l:function(e){return c(e)?"$"+e:e},t.fromSetString=u?l:function(e){return c(e)?e.slice(1):e},t.compareByOriginalPositions=function(e,t,n){var r=h(e.source,t.source);return 0!==r||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)||n||0!==(r=e.generatedColumn-t.generatedColumn)||0!==(r=e.generatedLine-t.generatedLine)?r:h(e.name,t.name)},t.compareByGeneratedPositionsDeflated=function(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r||0!==(r=e.generatedColumn-t.generatedColumn)||n||0!==(r=h(e.source,t.source))||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)?r:h(e.name,t.name)},t.compareByGeneratedPositionsInflated=function(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n||0!==(n=e.generatedColumn-t.generatedColumn)||0!==(n=h(e.source,t.source))||0!==(n=e.originalLine-t.originalLine)||0!==(n=e.originalColumn-t.originalColumn)?n:h(e.name,t.name)},t.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},t.computeSourceURL=function(e,t,n){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),n){var r=i(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var u=r.path.lastIndexOf("/");u>=0&&(r.path=r.path.substring(0,u+1))}t=a(s(r),t)}return o(t)}})),S=(b.getArg,b.urlParse,b.urlGenerate,b.normalize,b.join,b.isAbsolute,b.relative,b.toSetString,b.fromSetString,b.compareByOriginalPositions,b.compareByGeneratedPositionsDeflated,b.compareByGeneratedPositionsInflated,b.parseSourceMapInput,b.computeSourceURL,Object.prototype.hasOwnProperty),E="undefined"!=typeof Map;function A(){this._array=[],this._set=E?new Map:Object.create(null)}A.fromArray=function(e,t){for(var n=new A,r=0,i=e.length;r<i;r++)n.add(e[r],t);return n},A.prototype.size=function(){return E?this._set.size:Object.getOwnPropertyNames(this._set).length},A.prototype.add=function(e,t){var n=E?e:b.toSetString(e),r=E?this.has(e):S.call(this._set,n),i=this._array.length;r&&!t||this._array.push(e),r||(E?this._set.set(e,i):this._set[n]=i)},A.prototype.has=function(e){if(E)return this._set.has(e);var t=b.toSetString(e);return S.call(this._set,t)},A.prototype.indexOf=function(e){if(E){var t=this._set.get(e);if(t>=0)return t}else{var n=b.toSetString(e);if(S.call(this._set,n))return this._set[n]}throw new Error('"'+e+'" is not in the set.')},A.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},A.prototype.toArray=function(){return this._array.slice()};var R={ArraySet:A};function C(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}C.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},C.prototype.add=function(e){var t,n,r,i,s,o;t=this._last,n=e,r=t.generatedLine,i=n.generatedLine,s=t.generatedColumn,o=n.generatedColumn,i>r||i==r&&o>=s||b.compareByGeneratedPositionsInflated(t,n)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},C.prototype.toArray=function(){return this._sorted||(this._array.sort(b.compareByGeneratedPositionsInflated),this._sorted=!0),this._array};var w=R.ArraySet,O={MappingList:C}.MappingList;function T(e){e||(e={}),this._file=b.getArg(e,"file",null),this._sourceRoot=b.getArg(e,"sourceRoot",null),this._skipValidation=b.getArg(e,"skipValidation",!1),this._sources=new w,this._names=new w,this._mappings=new O,this._sourcesContents=null}T.prototype._version=3,T.fromSourceMap=function(e){var t=e.sourceRoot,n=new T({file:e.file,sourceRoot:t});return e.eachMapping((function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=t&&(r.source=b.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),n.addMapping(r)})),e.sources.forEach((function(r){var i=r;null!==t&&(i=b.relative(t,r)),n._sources.has(i)||n._sources.add(i);var s=e.sourceContentFor(r);null!=s&&n.setSourceContent(r,s)})),n},T.prototype.addMapping=function(e){var t=b.getArg(e,"generated"),n=b.getArg(e,"original",null),r=b.getArg(e,"source",null),i=b.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,i),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=i&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:i})},T.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=b.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[b.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[b.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},T.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var i=this._sourceRoot;null!=i&&(r=b.relative(i,r));var s=new w,o=new w;this._mappings.unsortedForEach((function(t){if(t.source===r&&null!=t.originalLine){var a=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=a.source&&(t.source=a.source,null!=n&&(t.source=b.join(n,t.source)),null!=i&&(t.source=b.relative(i,t.source)),t.originalLine=a.line,t.originalColumn=a.column,null!=a.name&&(t.name=a.name))}var u=t.source;null==u||s.has(u)||s.add(u);var l=t.name;null==l||o.has(l)||o.add(l)}),this),this._sources=s,this._names=o,e.sources.forEach((function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=b.join(n,t)),null!=i&&(t=b.relative(i,t)),this.setSourceContent(t,r))}),this)},T.prototype._validateMapping=function(e,t,n,r){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||n||r)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},T.prototype._serializeMappings=function(){for(var e,t,n,r,i=0,s=1,o=0,a=0,u=0,l=0,c="",h=this._mappings.toArray(),p=0,f=h.length;p<f;p++){if(e="",(t=h[p]).generatedLine!==s)for(i=0;t.generatedLine!==s;)e+=";",s++;else if(p>0){if(!b.compareByGeneratedPositionsInflated(t,h[p-1]))continue;e+=","}e+=d(t.generatedColumn-i),i=t.generatedColumn,null!=t.source&&(r=this._sources.indexOf(t.source),e+=d(r-l),l=r,e+=d(t.originalLine-1-a),a=t.originalLine-1,e+=d(t.originalColumn-o),o=t.originalColumn,null!=t.name&&(n=this._names.indexOf(t.name),e+=d(n-u),u=n)),c+=e}return c},T.prototype._generateSourcesContent=function(e,t){return e.map((function(e){if(!this._sourcesContents)return null;null!=t&&(e=b.relative(t,e));var n=b.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null}),this)},T.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},T.prototype.toString=function(){return JSON.stringify(this.toJSON())};var L={SourceMapGenerator:T},P=v((function(e,t){t.GREATEST_LOWER_BOUND=1,t.LEAST_UPPER_BOUND=2,t.search=function(e,n,r,i){if(0===n.length)return-1;var s=function e(n,r,i,s,o,a){var u=Math.floor((r-n)/2)+n,l=o(i,s[u],!0);return 0===l?u:l>0?r-u>1?e(u,r,i,s,o,a):a==t.LEAST_UPPER_BOUND?r<s.length?r:-1:u:u-n>1?e(n,u,i,s,o,a):a==t.LEAST_UPPER_BOUND?u:n<0?-1:n}(-1,n.length,e,n,r,i||t.GREATEST_LOWER_BOUND);if(s<0)return-1;for(;s-1>=0&&0===r(n[s],n[s-1],!0);)--s;return s}}));P.GREATEST_LOWER_BOUND,P.LEAST_UPPER_BOUND,P.search;function x(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function k(e,t,n,r){if(n<r){var i=n-1;x(e,(u=n,l=r,Math.round(u+Math.random()*(l-u))),r);for(var s=e[r],o=n;o<r;o++)t(e[o],s)<=0&&x(e,i+=1,o);x(e,i+1,o);var a=i+1;k(e,t,n,a-1),k(e,t,a+1,r)}var u,l}var M=R.ArraySet,F=function(e,t){k(e,t,0,e.length-1)};function I(e,t){var n=e;return"string"==typeof e&&(n=b.parseSourceMapInput(e)),null!=n.sections?new D(n,t):new B(n,t)}I.fromSourceMap=function(e,t){return B.fromSourceMap(e,t)},I.prototype._version=3,I.prototype.__generatedMappings=null,Object.defineProperty(I.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),I.prototype.__originalMappings=null,Object.defineProperty(I.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),I.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return";"===n||","===n},I.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},I.GENERATED_ORDER=1,I.ORIGINAL_ORDER=2,I.GREATEST_LOWER_BOUND=1,I.LEAST_UPPER_BOUND=2,I.prototype.eachMapping=function(e,t,n){var r,i=t||null;switch(n||I.GENERATED_ORDER){case I.GENERATED_ORDER:r=this._generatedMappings;break;case I.ORIGINAL_ORDER:r=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var s=this.sourceRoot;r.map((function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=b.computeSourceURL(s,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,i)},I.prototype.allGeneratedPositionsFor=function(e){var t=b.getArg(e,"line"),n={source:b.getArg(e,"source"),originalLine:t,originalColumn:b.getArg(e,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var r=[],i=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",b.compareByOriginalPositions,P.LEAST_UPPER_BOUND);if(i>=0){var s=this._originalMappings[i];if(void 0===e.column)for(var o=s.originalLine;s&&s.originalLine===o;)r.push({line:b.getArg(s,"generatedLine",null),column:b.getArg(s,"generatedColumn",null),lastColumn:b.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i];else for(var a=s.originalColumn;s&&s.originalLine===t&&s.originalColumn==a;)r.push({line:b.getArg(s,"generatedLine",null),column:b.getArg(s,"generatedColumn",null),lastColumn:b.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i]}return r};var N=I;function B(e,t){var n=e;"string"==typeof e&&(n=b.parseSourceMapInput(e));var r=b.getArg(n,"version"),i=b.getArg(n,"sources"),s=b.getArg(n,"names",[]),o=b.getArg(n,"sourceRoot",null),a=b.getArg(n,"sourcesContent",null),u=b.getArg(n,"mappings"),l=b.getArg(n,"file",null);if(r!=this._version)throw new Error("Unsupported version: "+r);o&&(o=b.normalize(o)),i=i.map(String).map(b.normalize).map((function(e){return o&&b.isAbsolute(o)&&b.isAbsolute(e)?b.relative(o,e):e})),this._names=M.fromArray(s.map(String),!0),this._sources=M.fromArray(i,!0),this._absoluteSources=this._sources.toArray().map((function(e){return b.computeSourceURL(o,e,t)})),this.sourceRoot=o,this.sourcesContent=a,this._mappings=u,this._sourceMapURL=t,this.file=l}function H(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}B.prototype=Object.create(I.prototype),B.prototype.consumer=I,B.prototype._findSourceIndex=function(e){var t,n=e;if(null!=this.sourceRoot&&(n=b.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},B.fromSourceMap=function(e,t){var n=Object.create(B.prototype),r=n._names=M.fromArray(e._names.toArray(),!0),i=n._sources=M.fromArray(e._sources.toArray(),!0);n.sourceRoot=e._sourceRoot,n.sourcesContent=e._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=e._file,n._sourceMapURL=t,n._absoluteSources=n._sources.toArray().map((function(e){return b.computeSourceURL(n.sourceRoot,e,t)}));for(var s=e._mappings.toArray().slice(),o=n.__generatedMappings=[],a=n.__originalMappings=[],u=0,l=s.length;u<l;u++){var c=s[u],h=new H;h.generatedLine=c.generatedLine,h.generatedColumn=c.generatedColumn,c.source&&(h.source=i.indexOf(c.source),h.originalLine=c.originalLine,h.originalColumn=c.originalColumn,c.name&&(h.name=r.indexOf(c.name)),a.push(h)),o.push(h)}return F(n.__originalMappings,b.compareByOriginalPositions),n},B.prototype._version=3,Object.defineProperty(B.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),B.prototype._parseMappings=function(e,t){for(var n,r,i,s,o,a=1,u=0,l=0,c=0,h=0,p=0,f=e.length,g=0,d={},_={},y=[],v=[];g<f;)if(";"===e.charAt(g))a++,g++,u=0;else if(","===e.charAt(g))g++;else{for((n=new H).generatedLine=a,s=g;s<f&&!this._charIsMappingSeparator(e,s);s++);if(i=d[r=e.slice(g,s)])g+=r.length;else{for(i=[];g<s;)m(e,g,_),o=_.value,g=_.rest,i.push(o);if(2===i.length)throw new Error("Found a source, but no line and column");if(3===i.length)throw new Error("Found a source and line, but no column");d[r]=i}n.generatedColumn=u+i[0],u=n.generatedColumn,i.length>1&&(n.source=h+i[1],h+=i[1],n.originalLine=l+i[2],l=n.originalLine,n.originalLine+=1,n.originalColumn=c+i[3],c=n.originalColumn,i.length>4&&(n.name=p+i[4],p+=i[4])),v.push(n),"number"==typeof n.originalLine&&y.push(n)}F(v,b.compareByGeneratedPositionsDeflated),this.__generatedMappings=v,F(y,b.compareByOriginalPositions),this.__originalMappings=y},B.prototype._findMapping=function(e,t,n,r,i,s){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return P.search(e,t,i,s)},B.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},B.prototype.originalPositionFor=function(e){var t={generatedLine:b.getArg(e,"line"),generatedColumn:b.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",b.compareByGeneratedPositionsDeflated,b.getArg(e,"bias",I.GREATEST_LOWER_BOUND));if(n>=0){var r=this._generatedMappings[n];if(r.generatedLine===t.generatedLine){var i=b.getArg(r,"source",null);null!==i&&(i=this._sources.at(i),i=b.computeSourceURL(this.sourceRoot,i,this._sourceMapURL));var s=b.getArg(r,"name",null);return null!==s&&(s=this._names.at(s)),{source:i,line:b.getArg(r,"originalLine",null),column:b.getArg(r,"originalColumn",null),name:s}}}return{source:null,line:null,column:null,name:null}},B.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},B.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var n=this._findSourceIndex(e);if(n>=0)return this.sourcesContent[n];var r,i=e;if(null!=this.sourceRoot&&(i=b.relative(this.sourceRoot,i)),null!=this.sourceRoot&&(r=b.urlParse(this.sourceRoot))){var s=i.replace(/^file:\/\//,"");if("file"==r.scheme&&this._sources.has(s))return this.sourcesContent[this._sources.indexOf(s)];if((!r.path||"/"==r.path)&&this._sources.has("/"+i))return this.sourcesContent[this._sources.indexOf("/"+i)]}if(t)return null;throw new Error('"'+i+'" is not in the SourceMap.')},B.prototype.generatedPositionFor=function(e){var t=b.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var n={source:t,originalLine:b.getArg(e,"line"),originalColumn:b.getArg(e,"column")},r=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",b.compareByOriginalPositions,b.getArg(e,"bias",I.GREATEST_LOWER_BOUND));if(r>=0){var i=this._originalMappings[r];if(i.source===n.source)return{line:b.getArg(i,"generatedLine",null),column:b.getArg(i,"generatedColumn",null),lastColumn:b.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}};var $=B;function D(e,t){var n=e;"string"==typeof e&&(n=b.parseSourceMapInput(e));var r=b.getArg(n,"version"),i=b.getArg(n,"sections");if(r!=this._version)throw new Error("Unsupported version: "+r);this._sources=new M,this._names=new M;var s={line:-1,column:0};this._sections=i.map((function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var n=b.getArg(e,"offset"),r=b.getArg(n,"line"),i=b.getArg(n,"column");if(r<s.line||r===s.line&&i<s.column)throw new Error("Section offsets must be ordered and non-overlapping.");return s=n,{generatedOffset:{generatedLine:r+1,generatedColumn:i+1},consumer:new I(b.getArg(e,"map"),t)}}))}D.prototype=Object.create(I.prototype),D.prototype.constructor=I,D.prototype._version=3,Object.defineProperty(D.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),D.prototype.originalPositionFor=function(e){var t={generatedLine:b.getArg(e,"line"),generatedColumn:b.getArg(e,"column")},n=P.search(t,this._sections,(function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n||e.generatedColumn-t.generatedOffset.generatedColumn})),r=this._sections[n];return r?r.consumer.originalPositionFor({line:t.generatedLine-(r.generatedOffset.generatedLine-1),column:t.generatedColumn-(r.generatedOffset.generatedLine===t.generatedLine?r.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},D.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},D.prototype.sourceContentFor=function(e,t){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(e,!0);if(r)return r}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},D.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(-1!==n.consumer._findSourceIndex(b.getArg(e,"source"))){var r=n.consumer.generatedPositionFor(e);if(r)return{line:r.line+(n.generatedOffset.generatedLine-1),column:r.column+(n.generatedOffset.generatedLine===r.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},D.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var r=this._sections[n],i=r.consumer._generatedMappings,s=0;s<i.length;s++){var o=i[s],a=r.consumer._sources.at(o.source);a=b.computeSourceURL(r.consumer.sourceRoot,a,this._sourceMapURL),this._sources.add(a),a=this._sources.indexOf(a);var u=null;o.name&&(u=r.consumer._names.at(o.name),this._names.add(u),u=this._names.indexOf(u));var l={source:a,generatedLine:o.generatedLine+(r.generatedOffset.generatedLine-1),generatedColumn:o.generatedColumn+(r.generatedOffset.generatedLine===o.generatedLine?r.generatedOffset.generatedColumn-1:0),originalLine:o.originalLine,originalColumn:o.originalColumn,name:u};this.__generatedMappings.push(l),"number"==typeof l.originalLine&&this.__originalMappings.push(l)}F(this.__generatedMappings,b.compareByGeneratedPositionsDeflated),F(this.__originalMappings,b.compareByOriginalPositions)};var j={SourceMapConsumer:N,BasicSourceMapConsumer:$,IndexedSourceMapConsumer:D},G=L.SourceMapGenerator,U=/(\r?\n)/,q="$$$isSourceNode$$$";function W(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this[q]=!0,null!=r&&this.add(r)}W.fromStringWithSourceMap=function(e,t,n){var r=new W,i=e.split(U),s=0,o=function(){return e()+(e()||"");function e(){return s<i.length?i[s++]:void 0}},a=1,u=0,l=null;return t.eachMapping((function(e){if(null!==l){if(!(a<e.generatedLine)){var t=(n=i[s]||"").substr(0,e.generatedColumn-u);return i[s]=n.substr(e.generatedColumn-u),u=e.generatedColumn,c(l,t),void(l=e)}c(l,o()),a++,u=0}for(;a<e.generatedLine;)r.add(o()),a++;if(u<e.generatedColumn){var n=i[s]||"";r.add(n.substr(0,e.generatedColumn)),i[s]=n.substr(e.generatedColumn),u=e.generatedColumn}l=e}),this),s<i.length&&(l&&c(l,o()),r.add(i.splice(s).join(""))),t.sources.forEach((function(e){var i=t.sourceContentFor(e);null!=i&&(null!=n&&(e=b.join(n,e)),r.setSourceContent(e,i))})),r;function c(e,t){if(null===e||void 0===e.source)r.add(t);else{var i=n?b.join(n,e.source):e.source;r.add(new W(e.originalLine,e.originalColumn,i,t,e.name))}}},W.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e[q]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},W.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[q]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},W.prototype.walk=function(e){for(var t,n=0,r=this.children.length;n<r;n++)(t=this.children[n])[q]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},W.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;n<r-1;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},W.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n[q]?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},W.prototype.setSourceContent=function(e,t){this.sourceContents[b.toSetString(e)]=t},W.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;t<n;t++)this.children[t][q]&&this.children[t].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(t=0,n=r.length;t<n;t++)e(b.fromSetString(r[t]),this.sourceContents[r[t]])},W.prototype.toString=function(){var e="";return this.walk((function(t){e+=t})),e},W.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new G(e),r=!1,i=null,s=null,o=null,a=null;return this.walk((function(e,u){t.code+=e,null!==u.source&&null!==u.line&&null!==u.column?(i===u.source&&s===u.line&&o===u.column&&a===u.name||n.addMapping({source:u.source,original:{line:u.line,column:u.column},generated:{line:t.line,column:t.column},name:u.name}),i=u.source,s=u.line,o=u.column,a=u.name,r=!0):r&&(n.addMapping({generated:{line:t.line,column:t.column}}),i=null,r=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(t.line++,t.column=0,l+1===c?(i=null,r=!1):r&&n.addMapping({source:u.source,original:{line:u.line,column:u.column},generated:{line:t.line,column:t.column},name:u.name})):t.column++})),this.walkSourceContents((function(e,t){n.setSourceContent(e,t)})),{code:t.code,map:n}};var Q={SourceMapGenerator:L.SourceMapGenerator,SourceMapConsumer:j.SourceMapConsumer,SourceNode:{SourceNode:W}.SourceNode},K=Object.prototype.toString,V="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;var X,Y=function(e,t,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return r=e,"ArrayBuffer"===K.call(r).slice(8,-1)?function(e,t,n){t>>>=0;var r=e.byteLength-t;if(r<0)throw new RangeError("'offset' is out of bounds");if(void 0===n)n=r;else if((n>>>=0)>r)throw new RangeError("'length' is out of bounds");return V?Buffer.from(e.slice(t,t+n)):new Buffer(new Uint8Array(e.slice(t,t+n)))}(e,t,n):"string"==typeof e?function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!Buffer.isEncoding(t))throw new TypeError('"encoding" must be a valid string encoding');return V?Buffer.from(e,t):new Buffer(e,t)}(e,t):V?Buffer.from(e):new Buffer(e);var r},Z=Q.SourceMapConsumer,z=e;try{(X=i).existsSync&&X.readFileSync||(X=null)}catch(e){}var J=!1,ee=!1,te=!1,ne="auto",re={},ie={},se=/^data:application\/json[^,]+base64,/,oe=[],ae=[];function ue(){return"browser"===ne||"node"!==ne&&("undefined"!=typeof window&&"function"==typeof XMLHttpRequest&&!(window.require&&window.module&&window.process&&"renderer"===window.process.type))}function le(e){return function(t){for(var n=0;n<e.length;n++){var r=e[n](t);if(r)return r}return null}}var ce=le(oe);function he(e,t){if(!e)return t;var n=z.dirname(e),r=/^\w+:\/\/[^\/]*/.exec(n),i=r?r[0]:"",s=n.slice(i.length);return i&&/^\/\w\:/.test(s)?(i+="/")+z.resolve(n.slice(i.length),t).replace(/\\/g,"/"):i+z.resolve(n.slice(i.length),t)}oe.push((function(e){if(e=e.trim(),/^file:/.test(e)&&(e=e.replace(/file:\/\/\/(\w:)?/,(function(e,t){return t?"":"/"}))),e in re)return re[e];var t="";try{if(X)X.existsSync(e)&&(t=X.readFileSync(e,"utf8"));else{var n=new XMLHttpRequest;n.open("GET",e,!1),n.send(null),4===n.readyState&&200===n.status&&(t=n.responseText)}}catch(e){}return re[e]=t}));var pe=le(ae);function fe(e){var t=ie[e.source];if(!t){var n=pe(e.source);n?(t=ie[e.source]={url:n.url,map:new Z(n.map)}).map.sourcesContent&&t.map.sources.forEach((function(e,n){var r=t.map.sourcesContent[n];if(r){var i=he(t.url,e);re[i]=r}})):t=ie[e.source]={url:null,map:null}}if(t&&t.map&&"function"==typeof t.map.originalPositionFor){var r=t.map.originalPositionFor(e);if(null!==r.source)return r.source=he(t.url,r.source),r}return e}function ge(){var e,t="";if(this.isNative())t="native";else{!(e=this.getScriptNameOrSourceURL())&&this.isEval()&&(t=this.getEvalOrigin(),t+=", "),t+=e||"<anonymous>";var n=this.getLineNumber();if(null!=n){t+=":"+n;var r=this.getColumnNumber();r&&(t+=":"+r)}}var i="",s=this.getFunctionName(),o=!0,a=this.isConstructor();if(!(this.isToplevel()||a)){var u=this.getTypeName();"[object Object]"===u&&(u="null");var l=this.getMethodName();s?(u&&0!=s.indexOf(u)&&(i+=u+"."),i+=s,l&&s.indexOf("."+l)!=s.length-l.length-1&&(i+=" [as "+l+"]")):i+=u+"."+(l||"<anonymous>")}else a?i+="new "+(s||"<anonymous>"):s?i+=s:(i+=t,o=!1);return o&&(i+=" ("+t+")"),i}function de(e){var t={};return Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){t[n]=/^(?:is|get)/.test(n)?function(){return e[n].call(e)}:e[n]})),t.toString=ge,t}function me(e,t){if(void 0===t&&(t={nextPosition:null,curPosition:null}),e.isNative())return t.curPosition=null,e;var n=e.getFileName()||e.getScriptNameOrSourceURL();if(n){var r=e.getLineNumber(),i=e.getColumnNumber()-1,s=/^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/.test(process.version)?0:62;1===r&&i>s&&!ue()&&!e.isEval()&&(i-=s);var o=fe({source:n,line:r,column:i});t.curPosition=o;var a=(e=de(e)).getFunctionName;return e.getFunctionName=function(){return null==t.nextPosition?a():t.nextPosition.name||a()},e.getFileName=function(){return o.source},e.getLineNumber=function(){return o.line},e.getColumnNumber=function(){return o.column+1},e.getScriptNameOrSourceURL=function(){return o.source},e}var u=e.isEval()&&e.getEvalOrigin();return u?(u=function e(t){var n=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(t);if(n){var r=fe({source:n[2],line:+n[3],column:n[4]-1});return"eval at "+n[1]+" ("+r.source+":"+r.line+":"+(r.column+1)+")"}return(n=/^eval at ([^(]+) \((.+)\)$/.exec(t))?"eval at "+n[1]+" ("+e(n[2])+")":t}(u),(e=de(e)).getEvalOrigin=function(){return u},e):e}function _e(e,t){te&&(re={},ie={});for(var n=(e.name||"Error")+": "+(e.message||""),r={nextPosition:null,curPosition:null},i=[],s=t.length-1;s>=0;s--)i.push("\n    at "+me(t[s],r)),r.nextPosition=r.curPosition;return r.curPosition=r.nextPosition=null,n+i.reverse().join("")}function ye(e){var t=function(e){var t=/\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(e.stack);if(t){var n=t[1],r=+t[2],i=+t[3],s=re[n];if(!s&&X&&X.existsSync(n))try{s=X.readFileSync(n,"utf8")}catch(e){s=""}if(s){var o=s.split(/(?:\r\n|\r|\n)/)[r-1];if(o)return n+":"+r+"\n"+o+"\n"+new Array(i).join(" ")+"^"}}return null}(e);process.stderr._handle&&process.stderr._handle.setBlocking&&process.stderr._handle.setBlocking(!0),t&&(console.error(),console.error(t)),console.error(e.stack),process.exit(1)}ae.push((function(e){var t,n=function(e){var t;if(ue())try{var n=new XMLHttpRequest;n.open("GET",e,!1),n.send(null),t=4===n.readyState?n.responseText:null;var r=n.getResponseHeader("SourceMap")||n.getResponseHeader("X-SourceMap");if(r)return r}catch(e){}t=ce(e);for(var i,s,o=/(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/gm;s=o.exec(t);)i=s;return i?i[1]:null}(e);if(!n)return null;if(se.test(n)){var r=n.slice(n.indexOf(",")+1);t=Y(r,"base64").toString(),n=e}else n=he(e,n),t=ce(n);return t?{url:n,map:t}:null}));var ve=v((function(e){const t="Hyper"===process.env.TERM_PROGRAM,n="win32"===process.platform,r="linux"===process.platform,i={ballotDisabled:"☒",ballotOff:"☐",ballotOn:"☑",bullet:"•",bulletWhite:"◦",fullBlock:"█",heart:"❤",identicalTo:"≡",line:"─",mark:"※",middot:"·",minus:"－",multiplication:"×",obelus:"÷",pencilDownRight:"✎",pencilRight:"✏",pencilUpRight:"✐",percent:"%",pilcrow2:"❡",pilcrow:"¶",plusMinus:"±",section:"§",starsOff:"☆",starsOn:"★",upDownArrow:"↕"},s=Object.assign({},i,{check:"√",cross:"×",ellipsisLarge:"...",ellipsis:"...",info:"i",question:"?",questionSmall:"?",pointer:">",pointerSmall:"»",radioOff:"( )",radioOn:"(*)",warning:"‼"}),o=Object.assign({},i,{ballotCross:"✘",check:"✔",cross:"✖",ellipsisLarge:"⋯",ellipsis:"…",info:"ℹ",question:"?",questionFull:"？",questionSmall:"﹖",pointer:r?"▸":"❯",pointerSmall:r?"‣":"›",radioOff:"◯",radioOn:"◉",warning:"⚠"});e.exports=n&&!t?s:o,Reflect.defineProperty(e.exports,"common",{enumerable:!1,value:i}),Reflect.defineProperty(e.exports,"windows",{enumerable:!1,value:s}),Reflect.defineProperty(e.exports,"other",{enumerable:!1,value:o})}));const be=/[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g,Se=()=>{const e={enabled:!0,visible:!0,styles:{},keys:{}};"FORCE_COLOR"in process.env&&(e.enabled="0"!==process.env.FORCE_COLOR);const t=(e,t,n)=>"function"==typeof e?e(t):e.wrap(t,n),n=(n,r)=>{if(""===n||null==n)return"";if(!1===e.enabled)return n;if(!1===e.visible)return"";let i=""+n,s=i.includes("\n"),o=r.length;for(o>0&&r.includes("unstyle")&&(r=[...new Set(["unstyle",...r])].reverse());o-- >0;)i=t(e.styles[r[o]],i,s);return i},r=(t,r,i)=>{e.styles[t]=(e=>{let t=e.open=`[${e.codes[0]}m`,n=e.close=`[${e.codes[1]}m`,r=e.regex=new RegExp(`\\u001b\\[${e.codes[1]}m`,"g");return e.wrap=(e,i)=>{e.includes(n)&&(e=e.replace(r,n+t));let s=t+e+n;return i?s.replace(/\r*\n/g,`${n}$&${t}`):s},e})({name:t,codes:r}),(e.keys[i]||(e.keys[i]=[])).push(t),Reflect.defineProperty(e,t,{configurable:!0,enumerable:!0,set(n){e.alias(t,n)},get(){let r=e=>n(e,r.stack);return Reflect.setPrototypeOf(r,e),r.stack=this.stack?this.stack.concat(t):[t],r}})};return r("reset",[0,0],"modifier"),r("bold",[1,22],"modifier"),r("dim",[2,22],"modifier"),r("italic",[3,23],"modifier"),r("underline",[4,24],"modifier"),r("inverse",[7,27],"modifier"),r("hidden",[8,28],"modifier"),r("strikethrough",[9,29],"modifier"),r("black",[30,39],"color"),r("red",[31,39],"color"),r("green",[32,39],"color"),r("yellow",[33,39],"color"),r("blue",[34,39],"color"),r("magenta",[35,39],"color"),r("cyan",[36,39],"color"),r("white",[37,39],"color"),r("gray",[90,39],"color"),r("grey",[90,39],"color"),r("bgBlack",[40,49],"bg"),r("bgRed",[41,49],"bg"),r("bgGreen",[42,49],"bg"),r("bgYellow",[43,49],"bg"),r("bgBlue",[44,49],"bg"),r("bgMagenta",[45,49],"bg"),r("bgCyan",[46,49],"bg"),r("bgWhite",[47,49],"bg"),r("blackBright",[90,39],"bright"),r("redBright",[91,39],"bright"),r("greenBright",[92,39],"bright"),r("yellowBright",[93,39],"bright"),r("blueBright",[94,39],"bright"),r("magentaBright",[95,39],"bright"),r("cyanBright",[96,39],"bright"),r("whiteBright",[97,39],"bright"),r("bgBlackBright",[100,49],"bgBright"),r("bgRedBright",[101,49],"bgBright"),r("bgGreenBright",[102,49],"bgBright"),r("bgYellowBright",[103,49],"bgBright"),r("bgBlueBright",[104,49],"bgBright"),r("bgMagentaBright",[105,49],"bgBright"),r("bgCyanBright",[106,49],"bgBright"),r("bgWhiteBright",[107,49],"bgBright"),e.ansiRegex=be,e.hasColor=e.hasAnsi=t=>(e.ansiRegex.lastIndex=0,"string"==typeof t&&""!==t&&e.ansiRegex.test(t)),e.alias=(t,r)=>{let i="string"==typeof r?e[r]:r;if("function"!=typeof i)throw new TypeError("Expected alias to be the name of an existing color (string) or a function");i.stack||(Reflect.defineProperty(i,"name",{value:t}),e.styles[t]=i,i.stack=[t]),Reflect.defineProperty(e,t,{configurable:!0,enumerable:!0,set(n){e.alias(t,n)},get(){let t=e=>n(e,t.stack);return Reflect.setPrototypeOf(t,e),t.stack=this.stack?this.stack.concat(i.stack):i.stack,t}})},e.theme=t=>{if(null===(n=t)||"object"!=typeof n||Array.isArray(n))throw new TypeError("Expected theme to be an object");var n;for(let n of Object.keys(t))e.alias(n,t[n]);return e},e.alias("unstyle",t=>"string"==typeof t&&""!==t?(e.ansiRegex.lastIndex=0,t.replace(e.ansiRegex,"")):""),e.alias("noop",e=>e),e.none=e.clear=e.noop,e.stripColor=e.unstyle,e.symbols=ve,e.define=r,e};var Ee=Se(),Ae=Se;Ee.create=Ae;var Re=v((function(e,t){function n(e,t){return e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!r(e)||!r(t)||"object"!=typeof e&&"object"!=typeof t?e===t:function(e,t){let i,s,o,a;if(!r(e)||!r(t))return!1;if(e.prototype!==t.prototype)return!1;try{o=Object.keys(e),a=Object.keys(t)}catch(e){return!1}if(o.length!==a.length)return!1;for(o.sort(),a.sort(),i=o.length-1;i>=0;i--)if(o[i]!==a[i])return!1;for(i=o.length-1;i>=0;i--)if(s=o[i],!n(e[s],t[s]))return!1;return typeof e==typeof t}(e,t))}function r(e){return null!=e}Object.defineProperty(t,"__esModule",{value:!0}),t.deepEqual=void 0,t.deepEqual=n}));y(Re);Re.deepEqual;var Ce=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.without=t.union=void 0,t.union=function(e,t){if(!e)return t||[];if(!t)return e;for(const n of t)-1===e.indexOf(n)&&e.push(n);return e},t.without=function(e,t){if(!e)return[];const n=e.indexOf(t);return-1!==n&&e.splice(n,1),e}}));y(Ce);Ce.without,Ce.union;var we=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleEventEmitter=void 0;t.SimpleEventEmitter=class{constructor(){this.onListeners={},this.onceListeners={}}on(e,t){this.onListeners[e]=Ce.union(this.onListeners[e],[t])}once(e,t){this.onceListeners[e]=Ce.union(this.onceListeners[e],[t])}off(e,t){this.onListeners[e]=Ce.without(this.onListeners[e],t),this.onceListeners[e]=Ce.without(this.onceListeners[e],t)}emit(e,...t){if(this.onListeners[e])for(const n of this.onListeners[e])n.call(null,...t);if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const n of this.onceListeners[e])n.call(null,...t);this.onceListeners[e]=[]}}emitAndWaitForCompletion(e,...t){const n=[];if(this.onListeners[e])for(const r of this.onListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const r of this.onceListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}this.onceListeners[e]=[]}return Promise.all(n).then(e=>{})}}}));y(we);we.SimpleEventEmitter;var Oe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SortedArray=void 0;function n(e,t){return e<t?-1:e>t?1:0}t.SortedArray=class{constructor(e=n,t=[]){this.array=[],this.compareFunction=e||n;const r=t.length;for(let e=0;e<r;e++)this.insert(t[e])}getData(){return this.array}insert(e){let t=this.searchInternal(e)+1;const n=this.array.length-1;for(;t<n&&0===this.compareFunction(e,this.array[t]);)t++;let r=this.array.length;for(this.array.push(e);r>t;)this.array[r]=this.array[--r];this.array[t]=e}search(e){const t=this.searchInternal(e);return 0!==this.compareFunction(this.array[t],e)?-1:t}remove(e){const t=this.search(e);t>=0&&this.array.splice(t,1)}searchInternal(e){let t,n,r=this.array.length-1,i=0;for(;r>=i;)if(t=Math.floor((r+i)/2),n=this.compareFunction(this.array[t],e),n<0)i=t+1;else{if(!(n>0))return t;r=t-1}return r}}}));y(Oe);Oe.SortedArray;var Te=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.INTERNAL_MOCKER_NAME=t.printObject=void 0;t.INTERNAL_MOCKER_NAME="__internalMocker",t.printObject=function(e){if(null===e)return"null";if(void 0===e)return"undefined";if(e instanceof RegExp)return e.toString();const t=function(e){const t=e.__internalMocker;return null!=t?t:null}(e);return null!==t?t.mockName:JSON.stringify(e)}}));y(Te);Te.INTERNAL_MOCKER_NAME,Te.printObject;var Le=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.matcher=t.regexMatches=t.startsWith=t.lte=t.lt=t.gte=t.gt=t.eq=t.any=void 0,t.any=function(){const e={precedence:-1,matches:()=>!0,description:()=>"any()",equals:t=>t.description()===e.description()};return e},t.gt=function(e){const t={matches:t=>t>e,description:()=>`gt(${Te.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.lt=function(e){const t={matches:t=>t<e,description:()=>`lt(${Te.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.gte=function(e){const t={matches:t=>t>=e,description:()=>`gte(${Te.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.lte=function(e){const t={matches:t=>t<=e,description:()=>`lte(${Te.printObject(e)})`,equals:e=>e.description()===t.description()};return t},t.eq=function(e){const t={precedence:1,matches:t=>Re.deepEqual(e,t),description:()=>Te.printObject(e),equals:e=>e.description()===t.description()};return t},t.startsWith=function(e){const t={matches:t=>t.startsWith(e),description:()=>"startsWith "+e,equals:e=>e.description()===t.description()};return t},t.regexMatches=function(e){const t={matches:t=>e.test(t),description:()=>e.toString(),equals:e=>e.description()===t.description()};return t},t.matcher=function(e){const t={matches:t=>e(t),description:()=>e.toString(),equals:e=>e.description()===t.description()};return t}}));y(Le);Le.matcher,Le.regexMatches,Le.startsWith,Le.lte,Le.lt,Le.gte,Le.gt,Le.eq,Le.any;var Pe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.printObject=t.INTERNAL_MOCKER_NAME=t.startsWith=t.regexMatches=t.matcher=t.lte=t.lt=t.gte=t.gt=t.eq=t.any=t.SimpleEventEmitter=t.SortedArray=t.deepEqual=void 0,Object.defineProperty(t,"deepEqual",{enumerable:!0,get:function(){return Re.deepEqual}}),Object.defineProperty(t,"SimpleEventEmitter",{enumerable:!0,get:function(){return we.SimpleEventEmitter}}),Object.defineProperty(t,"SortedArray",{enumerable:!0,get:function(){return Oe.SortedArray}}),Object.defineProperty(t,"any",{enumerable:!0,get:function(){return Le.any}}),Object.defineProperty(t,"eq",{enumerable:!0,get:function(){return Le.eq}}),Object.defineProperty(t,"gt",{enumerable:!0,get:function(){return Le.gt}}),Object.defineProperty(t,"gte",{enumerable:!0,get:function(){return Le.gte}}),Object.defineProperty(t,"lt",{enumerable:!0,get:function(){return Le.lt}}),Object.defineProperty(t,"lte",{enumerable:!0,get:function(){return Le.lte}}),Object.defineProperty(t,"matcher",{enumerable:!0,get:function(){return Le.matcher}}),Object.defineProperty(t,"regexMatches",{enumerable:!0,get:function(){return Le.regexMatches}}),Object.defineProperty(t,"startsWith",{enumerable:!0,get:function(){return Le.startsWith}}),Object.defineProperty(t,"INTERNAL_MOCKER_NAME",{enumerable:!0,get:function(){return Te.INTERNAL_MOCKER_NAME}}),Object.defineProperty(t,"printObject",{enumerable:!0,get:function(){return Te.printObject}})}));y(Pe);Pe.printObject,Pe.INTERNAL_MOCKER_NAME,Pe.startsWith,Pe.regexMatches,Pe.matcher,Pe.lte,Pe.lt,Pe.gte,Pe.gt,Pe.eq,Pe.any,Pe.SimpleEventEmitter,Pe.SortedArray;var xe=Pe.deepEqual;class ke{constructor(){this.currentDescribeTitleChain=[]}initialize(){return console.log("\n"+Ee.whiteBright("☾ Umbra Test")),this.drawHorizontalLine(),Promise.resolve()}onTestStart(e){}onTestEnd(e){const t=e.testInfo.describeTitleChain,n=t.length+1;if(t.length>0&&!xe(this.currentDescribeTitleChain,t)){this.currentDescribeTitleChain=t,console.log(Ee.cyan("⤷ ")+t[0]);for(let e=1;e<t.length;e++)console.log(this.getIndentedText(Ee.cyan("⤷ ")+t[e],e+1))}"fail"===e.result?(console.log(this.getIndentedText(Ee.redBright("✖ ")+e.testInfo.title,n)),console.log(this.getIndentedText(Ee.red("⤷ Error: ")+e.error.message,n+1))):"timeout"===e.result?console.log(this.getIndentedText(Ee.redBright("⏲ ")+e.testInfo.title,n)):"skipped"===e.result?console.log(this.getIndentedText(Ee.yellow("SKIPPED ")+e.testInfo.title,n)):"success"===e.result&&console.log(this.getIndentedText(Ee.green("✓ ")+e.testInfo.title,n))}onRunEnd(e){console.log(`Tests: ${Ee.red(e.totalFailures.toString())} failures, ${Ee.yellow(e.totalTimeouts.toString())} timeouts, ${Ee.green(e.totalSuccesses.toString())} passed, ${e.totalTests} total`),console.log(`Time:  ${e.elapsedTimeMs}ms`)}getIndentedText(e,t){let n="";for(let e=0;e<t;e++)n+=" ";return n+e}drawHorizontalLine(){for(let e=0;e<process.stdout.columns-1;e++)process.stdout.write("─");process.stdout.write("\n")}}const Me={basic:ke},Fe=global;class Ie{constructor(){this.watchedArgs=[],this.banner=null}withBanner(e){return this.banner=e,this}addArgument(e,t,n,r,i){if("trailing"===i&&this.watchedArgs.some(e=>"trailing"===e.type))throw new Error(`Can't add arg with name: ${e}, since another trailing arg already exists`);const s=[`--${e}`,`-${e}`,...t];for(const e of s){if(this.watchedArgs.some(t=>-1!==t.allAliases.indexOf(e)))throw new Error(`Can't add arg with name ${e}, since it already was added.`)}return this.watchedArgs.push({name:e,allAliases:s,help:n,required:r,type:i}),this}parse(e){const t=e.slice(2),n=this.watchedArgs.filter(e=>e.required);for(const e of n)if(!e.allAliases.some(e=>-1!==t.indexOf(e)))throw new Error(`Missing required arg with name ${e.name}, or aliases: ${e.allAliases.splice(1)}`);const r={};for(const e of this.watchedArgs)if("boolean"===e.type)r[e.name]=this.extractBoolean(e.allAliases,t);else if("string"===e.type){const n=this.extractString(e.allAliases,t);null!==n&&(r[e.name]=n)}else if("trailing"===e.type){const n=this.extractTrailing(t);null!==n&&(r[e.name]=n)}return r}extractBoolean(e,t){for(let n=0;n<t.length;n++)if(-1!==e.indexOf(t[n])){const e=t[n+1];return!("string"==typeof e&&"false"===e.toLowerCase())}return!1}extractString(e,t){for(let n=0;n<t.length;n++)if(-1!==e.indexOf(t[n])){const r=t[n+1];if(n===t.length-1)throw new Error(`Missing required arg value for string arg with name ${e[0]}`);return r}return null}extractTrailing(e){const t=this.getStartOfTail(e);return null!==t&&t<e.length?e.slice(t):null}getStartOfTail(e){const t={};for(const e of this.watchedArgs)for(const n of e.allAliases)t[n]=e.type;for(let n=e.length-1;n>=0;n--){const r=e[n].toLowerCase(),i=n>0?e[n-1].toLowerCase():null;if(!t[r]){if(null===i)return n;if(t[i])return"boolean"===t[i]&&"false"!==r&&"true"!==r?n:n+1}}return null}}class Ne{constructor(e=new Ie){this.argParser=e}parse(e){return this.argParser.addArgument("input",[],"Files, or globs, to run with the Umbra Test Runner",!1,"trailing").addArgument("debug",["-d","--inspect"],"Enables the Node debugger",!1,"boolean").addArgument("debugBreak",["-db","--debug-brk","--debug-break","--inspect-break"],"Enables the Node debugger, breaking once the first test is evaluated",!1,"boolean").addArgument("watch",["-w"],"Enables watch mode, which will evaluate all tests first and then again once changes occur",!1,"boolean").addArgument("configPath",["--config","-c"],"Sets the config file path",!1,"string").parse(e)}}class Be{constructor(e=a){this.spawnRef=a}spawn(e,t){return new Promise((n,r)=>{const i=this.spawnRef("tsc",["--outFile",t,e],{stdio:"inherit",shell:!0});i.on("error",r),i.on("close",n)})}}var He=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))};class $e{constructor(e=s.mkdir,r=s.stat,i=require,o=new Be){this.makeCacheDir=e=>()=>this.statPromise(e).catch(()=>this.mkdirPromise(e)),this.getJsConfigPath=(e,r)=>{const i=t(e,".ts");return()=>n(r,i+".js")},this.compileTsConfig=e=>t=>this.tsExecutor.spawn(e,t).then(()=>t),this.mkdirPromise=e,this.statPromise=r,this.requireRef=i,this.tsExecutor=o}loadConfig(e,t){return He(this,void 0,void 0,(function*(){if(!e)return Promise.resolve(null);if(!t)throw new Error("Missing cache directory");const i=n(e);if(i.endsWith(".js"))return this.loadJsConfig(i);if(i.endsWith(".ts"))return this.loadTsConfig(i,t);throw new Error(`Invalid umbra config type! Must be either js or ts, but was ${r(i)}`)}))}loadJsConfig(e){return He(this,void 0,void 0,(function*(){return e.endsWith(".js")?this.statPromise(e).then(()=>this.requireRef(e)).catch(()=>null):Promise.resolve(null)}))}loadTsConfig(e,t){return He(this,void 0,void 0,(function*(){return e.endsWith(".ts")?this.statPromise(e).then(this.makeCacheDir(t)).then(this.getJsConfigPath(e,t)).then(this.compileTsConfig(e)).then(e=>this.requireRef(e)):Promise.resolve(null)}))}}const De={input:["./**/*.test.js"],debug:!1,debugBreak:!1,watch:!1,cacheDir:".umbra-cache",timeoutMs:{it:100,before:100,beforeEach:100,after:100,afterEach:100},reporting:{outputPath:void 0,reporters:[]},parallel:{idempotentFiles:!1,idempotentTests:!1}};class je{constructor(e=require){this.requireRef=e}loadConfig(){try{const e=require(n(process.cwd(),"./package.json"));return e.umbra?e.umbra:null}catch(e){return null}}}class Ge{merge(e,...t){for(const n of t)if(n)for(const t in n)if(n.hasOwnProperty(t)){const r=n[t];if(void 0===r)continue;"timeoutMs"===t&&"number"==typeof r?e.timeoutMs={it:r,before:r,beforeEach:r,after:r,afterEach:r}:e[t]=n[t]}return e}}var Ue=function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))};var qe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncPromisifier=void 0;t.AsyncPromisifier=class{exec(e,t){if(Object.defineProperty(e,"name",{value:t,writable:!1}),1===e.length)return new Promise((t,n)=>{e(e=>{e instanceof Error?n(e):t(e)})});try{return Promise.resolve(e())}catch(e){return Promise.reject(e)}}}}));y(qe);qe.AsyncPromisifier;var We=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TimeoutPromisifier=t.TimeoutError=void 0;class n extends Error{constructor(e,t,n){super(e),this.timeoutMs=n}}t.TimeoutError=n;t.TimeoutPromisifier=class{wrap(e,t){if(t<=0)return e;const r=Date.now();let i=null;const s=new Promise((e,s)=>{i=setTimeout(()=>{const e=Date.now()-r;s(new n(`Async task timeout exceeded! Elapsed: ${e}, timeout: ${t}ms.`,e,t))},t)});return e.catch(()=>{clearTimeout(i)}),Promise.race([e,s]).then(e=>(clearTimeout(i),e))}}}));y(We);We.TimeoutPromisifier,We.TimeoutError;var Qe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.mergeConfig=void 0,t.mergeConfig=function(e,t){if(!t||"object"!=typeof t)return e;if("object"==typeof e.timeoutMs&&"object"==typeof t.timeoutMs)for(const n of["it","before","beforeEach","after","afterEach"])"number"==typeof t.timeoutMs[n]&&(e.timeoutMs[n]=t.timeoutMs[n]);else void 0!==t.timeoutMs&&(e.timeoutMs=t.timeoutMs);return e.stopOnFirstFail!==t.stopOnFirstFail&&(e.stopOnFirstFail=t.stopOnFirstFail),e}}));y(Qe);Qe.mergeConfig;var Ke=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultTestRunnerConfig=void 0;t.DefaultTestRunnerConfig={timeoutMs:100,stopOnFirstFail:!1}}));y(Ke);Ke.DefaultTestRunnerConfig;var Ve=v((function(e,t){function n(e,t){if(!e)return t||[];if(!t)return e;for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function r(e,t){if(!e)return[];const n=e.indexOf(t);return-1!==n&&e.splice(n,1),e}Object.defineProperty(t,"__esModule",{value:!0}),t.without=t.union=t.SimpleEventEmitter=void 0,t.union=n,t.without=r;t.SimpleEventEmitter=class{constructor(){this.onListeners={},this.onceListeners={}}on(e,t){this.onListeners[e]=n(this.onListeners[e],[t])}once(e,t){this.onceListeners[e]=n(this.onceListeners[e],[t])}off(e,t){this.onListeners[e]=r(this.onListeners[e],t),this.onceListeners[e]=r(this.onceListeners[e],t)}emit(e,...t){if(this.onListeners[e])for(const n of this.onListeners[e])n.call(null,...t);if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const n of this.onceListeners[e])n.call(null,...t);this.onceListeners[e]=[]}}emitAndWaitForCompletion(e,...t){const n=[];if(this.onListeners[e])for(const r of this.onListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}if(this.onceListeners[e]&&this.onceListeners[e].length>0){for(const r of this.onceListeners[e])try{n.push(Promise.resolve(r.call(null,...t)))}catch(e){n.push(Promise.reject(e))}this.onceListeners[e]=[]}return Promise.all(n).then(e=>{})}}}));y(Ve);Ve.without,Ve.union,Ve.SimpleEventEmitter;var Xe=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.QueueStack=void 0;t.QueueStack=class{constructor(){this.queue=[]}pushOnTop(e){0===this.queue.length?this.queue.push([e]):this.queue[0].push(e)}pushStack(e){this.queue.push(e)}popStack(){return this.queue.pop()}shiftStack(){return this.queue.shift()}traverseLevelOrder(e){let t=Promise.resolve();for(let n=0;n<this.queue.length;n++){const r=this.queue[n];for(let n=0;n<r.length;n++)t=t.then(()=>e(r[n]))}return t}traverseInverseLevelOrder(e){let t=Promise.resolve();for(let n=this.queue.length-1;n>=0;n--){const r=this.queue[n];for(let n=r.length-1;n>=0;n--)t=t.then(()=>e(r[n]))}return t}reset(){this.queue=[]}}}));y(Xe);Xe.QueueStack;var Ye=v((function(e,t){var n=_&&_.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TestRunner=void 0;const r=["before","beforeEach","after","afterEach"];t.TestRunner=class{constructor(e,t=new Ve.SimpleEventEmitter){this.asyncPromisifier=new qe.AsyncPromisifier,this.timeoutPromisifier=new We.TimeoutPromisifier,this.testQueueStack=[],this.queueStacks={before:new Xe.QueueStack,beforeEach:new Xe.QueueStack,after:new Xe.QueueStack,afterEach:new Xe.QueueStack},this.currentTest=null,this.testRunCancelled=!1,this.describe=(e,t)=>{this.throwIfTestInProgress("describe"),this.pushToCurrentTestQueue("describe",e,t)},this.describeOnly=(e,t)=>{this.throwIfTestInProgress("describe.only"),this.pushToCurrentTestQueue("describe",e,t,!0)},this.describeSkip=(e,t,n)=>{this.throwIfTestInProgress("describe.skip"),this.pushToCurrentTestQueue("describe",e,t,!1,void 0,!0)},this.it=(e,t,n)=>{this.throwIfTestInProgress("it"),this.pushToCurrentTestQueue("it",e,t,!1,n?n.timeoutMs:void 0)},this.itOnly=(e,t,n)=>{this.throwIfTestInProgress("it.only"),this.pushToCurrentTestQueue("it",e,t,!0,n?n.timeoutMs:void 0)},this.itSkip=(e,t,n)=>{this.throwIfTestInProgress("it.skip"),this.pushToCurrentTestQueue("it",e,t,!1,void 0,!0)},this.runNextTestQueue=()=>n(this,void 0,void 0,(function*(){if(0===this.testQueueStack.length)return;let e=!1;const t=this.testQueueStack.shift();if(null!==t.firstOnlyIndex)e=yield this.executeTest(t,t.tests[t.firstOnlyIndex]);else for(let n=0;n<t.tests.length;n++)e=(yield this.executeTest(t,t.tests[n]))||e;e&&(yield this.evaluateQueueWithTimeout("after"))})),this.throwIfTestInProgress=e=>{if(this.currentTest)throw new Error(`Cannot add an ${e} block while executing a test!`)},this.resetRunResults=()=>{this.runResults={elapsedTimeMs:0,totalTests:0,totalSuccesses:0,totalFailures:0,totalTimeouts:0,testResults:[]}},this.config=Qe.mergeConfig(Ke.DefaultTestRunnerConfig,e),this.eventEmitter=t,this.it.only=this.itOnly,this.describe.only=this.describeOnly,this.it.skip=this.itSkip,this.describe.skip=this.describeSkip,this.resetRunResults()}setCurrentFile(e){this.lastFilePathSet=e}on(e,t){this.eventEmitter.on(e,t)}once(e,t){this.eventEmitter.once(e,t)}off(e,t){this.eventEmitter.off(e,t)}before(e){this.throwIfTestInProgress("before"),this.queueStacks.before.pushOnTop(e)}beforeEach(e){this.throwIfTestInProgress("beforeEach"),this.queueStacks.beforeEach.pushOnTop(e)}after(e){this.throwIfTestInProgress("after"),this.queueStacks.after.pushOnTop(e)}afterEach(e){this.throwIfTestInProgress("afterEach"),this.queueStacks.afterEach.pushOnTop(e)}run(){if(this.currentRun)throw new Error("Can't start a test run if one is already in progress!");const e=Date.now();return this.currentRun=this.runNextTestQueue().then(()=>{const t=this.runResults;return t.elapsedTimeMs=Date.now()-e,this.currentRun=null,this.resetRunResults(),t}).catch(e=>{throw this.currentRun=null,e}),this.currentRun}getCurrentTestInfo(){if(!this.currentTest)throw new Error("Can't obtain TestInfo if not actively in a test!");return this.currentTest}reset(){if(this.currentRun)throw new Error("Can't reset if a test run is already in progress!");this.resetRunResults(),this.testRunCancelled=!1,this.testQueueStack=[];for(const e of r)this.queueStacks[e].reset()}cancel(){return this.currentRun?(this.testRunCancelled=!0,this.currentRun.then(e=>(this.reset(),e))):Promise.reject(new Error("Not currently executing a test run! Unable to cancel accordingly."))}pushToCurrentTestQueue(e,t,n,r,i,s){if(0===this.testQueueStack.length){const t={describeTitleChain:[],tests:[],evaluatedBefores:!1,skipAllTests:"describe"===e&&s,firstOnlyIndex:r?0:null};this.testQueueStack.push(t)}const o=this.testQueueStack[this.testQueueStack.length-1],a={type:e,callback:n,describeTitleChain:o.describeTitleChain,title:t,absoluteFilePath:this.lastFilePathSet,skip:s||o.skipAllTests};r&&null===o.firstOnlyIndex&&(o.firstOnlyIndex=o.tests.length),i>0&&(a.timeoutMs=i),o.tests.push(a)}executeTest(e,t){return n(this,void 0,void 0,(function*(){return t.absoluteFilePath!==this.currentlyExecutingFilePath&&(this.currentlyExecutingFilePath=t.absoluteFilePath),!this.testRunCancelled&&("describe"===t.type?this.evaluateDescribe(e,t):this.evaluateTest(e,t))}))}evaluateDescribe(e,t){return n(this,void 0,void 0,(function*(){this.testQueueStack.push({describeTitleChain:[].concat(e.describeTitleChain,t.title),tests:[],evaluatedBefores:!1,skipAllTests:t.skip,firstOnlyIndex:null});for(const e of r)this.queueStacks[e].pushStack([]);yield this.asyncPromisifier.exec(t.callback,"describe"),yield this.runNextTestQueue();for(const e of r)this.queueStacks[e].shiftStack();return!1}))}evaluateTest(e,t){return n(this,void 0,void 0,(function*(){if(t.skip){const e={result:"skipped",testInfo:t,elapsedMs:0};return this.eventEmitter.emit("onTestEnd",e),!1}e.evaluatedBefores||(e.evaluatedBefores=!0,yield this.evaluateQueueWithTimeout("before")),yield this.evaluateQueueWithTimeout("beforeEach"),this.currentTest=t;try{yield this.executeTestCallback(t),yield this.evaluateQueueWithTimeout("afterEach")}finally{this.runResults.totalTests++,this.currentTest=null}return!0}))}executeTestCallback(e){return n(this,void 0,void 0,(function*(){const t=Date.now(),n=e.timeoutMs>=0?e.timeoutMs:this.getTimeoutValue("it"),r={testInfo:e};try{yield this.timeoutPromisifier.wrap(this.asyncPromisifier.exec(e.callback,"Test: "+e.title),n),r.result="success"}catch(e){e instanceof We.TimeoutError?r.result="timeout":(r.result="fail",r.error=e)}r.elapsedMs=Date.now()-t;try{yield this.eventEmitter.emitAndWaitForCompletion("onBeforeTestEnd",r)}catch(e){r.result="fail",r.error=e}"success"===r.result?this.runResults.totalSuccesses++:"timeout"===r.result?this.runResults.totalTimeouts++:(this.runResults.totalFailures++,this.config.stopOnFirstFail&&(this.testRunCancelled=!0)),this.runResults.testResults.push(r),this.eventEmitter.emit("onTestEnd",r)}))}evaluateQueueWithTimeout(e){return this.timeoutPromisifier.wrap(this.evaluateQueue(e),this.getTimeoutValue(e))}evaluateQueue(e){const t=this.queueStacks[e];return"before"===e||"beforeEach"===e?t.traverseLevelOrder(t=>this.asyncPromisifier.exec(t,e)):t.traverseInverseLevelOrder(t=>this.asyncPromisifier.exec(t,e))}getTimeoutValue(e){const t=this.config.timeoutMs;return"number"==typeof t?t:t[e]}}}));y(Ye);Ye.TestRunner;var Ze=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.TestRunner=void 0,Object.defineProperty(t,"TestRunner",{enumerable:!0,get:function(){return Ye.TestRunner}})}));y(Ze);var ze=Ze.TestRunner;var Je=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.flatten=function(e){return e.reduce((e,t)=>[].concat(e,t),[])},t.splitWhen=function(e,t){const n=[[]];let r=0;for(const i of e)t(i)?(r++,n[r]=[]):n[r].push(i);return n}}));y(Je);Je.flatten,Je.splitWhen;var et=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.isEnoentCodeError=function(e){return"ENOENT"===e.code}}));y(et);et.isEnoentCodeError;var tt=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new n(e,t)}}));y(tt);tt.createDirentFromStats;var nt=v((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});const r=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;n.unixify=function(e){return e.replace(/\\/g,"/")},n.makeAbsolute=function(t,n){return e.resolve(t,n)},n.escape=function(e){return e.replace(r,"\\$2")},n.removeLeadingDotSegment=function(e){if("."===e.charAt(0)){const t=e.charAt(1);if("/"===t||"\\"===t)return e.slice(2)}return e}}));y(nt);nt.unixify,nt.makeAbsolute,nt.escape,nt.removeLeadingDotSegment;var rt={"{":"}","(":")","[":"]"},it=/\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/,st=/\\(.)|(^!|[*?{}()[\]]|\(\?)/,ot=function(e,t){if("string"!=typeof e||""===e)return!1;if(function(e){if("string"!=typeof e||""===e)return!1;for(var t;t=/(\\).|([@?!+*]\(.*\))/g.exec(e);){if(t[2])return!0;e=e.slice(t.index+t[0].length)}return!1}(e))return!0;var n,r=it;for(t&&!1===t.strict&&(r=st);n=r.exec(e);){if(n[2])return!0;var i=n.index+n[0].length,s=n[1],o=s?rt[s]:null;if(s&&o){var a=e.indexOf(o,i);-1!==a&&(i=a+1)}e=e.slice(i)}return!1},at=e.posix.dirname,ut="win32"===u.platform(),lt=/\\/g,ct=/[\{\[].*[\/]*.*[\}\]]$/,ht=/(^|[^\\])([\{\[]|\([^\)]+$)/,pt=/\\([\*\?\|\[\]\(\)\{\}])/g,ft=v((function(e,t){t.isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),t.find=(e,t)=>e.nodes.find(e=>e.type===t),t.exceedsLimit=(e,n,r=1,i)=>!1!==i&&(!(!t.isInteger(e)||!t.isInteger(n))&&(Number(n)-Number(e))/Number(r)>=i),t.escapeNode=(e,t=0,n)=>{let r=e.nodes[t];r&&(n&&r.type===n||"open"===r.type||"close"===r.type)&&!0!==r.escaped&&(r.value="\\"+r.value,r.escaped=!0)},t.encloseBrace=e=>"brace"===e.type&&(e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0)),t.isInvalidBrace=e=>"brace"===e.type&&(!(!0!==e.invalid&&!e.dollar)||(e.commas>>0+e.ranges>>0==0||!0!==e.open||!0!==e.close)&&(e.invalid=!0,!0)),t.isOpenOrClose=e=>"open"===e.type||"close"===e.type||(!0===e.open||!0===e.close),t.reduce=e=>e.reduce((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e),[]),t.flatten=(...e)=>{const t=[],n=e=>{for(let r=0;r<e.length;r++){let i=e[r];Array.isArray(i)?n(i):void 0!==i&&t.push(i)}return t};return n(e),t}})),gt=(ft.isInteger,ft.find,ft.exceedsLimit,ft.escapeNode,ft.encloseBrace,ft.isInvalidBrace,ft.isOpenOrClose,ft.reduce,ft.flatten,(e,t={})=>{let n=(e,r={})=>{let i=t.escapeInvalid&&ft.isInvalidBrace(r),s=!0===e.invalid&&!0===t.escapeInvalid,o="";if(e.value)return(i||s)&&ft.isOpenOrClose(e)?"\\"+e.value:e.value;if(e.value)return e.value;if(e.nodes)for(let t of e.nodes)o+=n(t);return o};return n(e)}),dt=function(e){return"number"==typeof e?e-e==0:"string"==typeof e&&""!==e.trim()&&(Number.isFinite?Number.isFinite(+e):isFinite(+e))};const mt=(e,t,n)=>{if(!1===dt(e))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===t||e===t)return String(e);if(!1===dt(t))throw new TypeError("toRegexRange: expected the second argument to be a number.");let r={relaxZeros:!0,...n};"boolean"==typeof r.strictZeros&&(r.relaxZeros=!1===r.strictZeros);let i=e+":"+t+"="+String(r.relaxZeros)+String(r.shorthand)+String(r.capture)+String(r.wrap);if(mt.cache.hasOwnProperty(i))return mt.cache[i].result;let s=Math.min(e,t),o=Math.max(e,t);if(1===Math.abs(s-o)){let n=e+"|"+t;return r.capture?`(${n})`:!1===r.wrap?n:`(?:${n})`}let a=wt(e)||wt(t),u={min:e,max:t,a:s,b:o},l=[],c=[];if(a&&(u.isPadded=a,u.maxLen=String(u.max).length),s<0){c=yt(o<0?Math.abs(o):1,Math.abs(s),u,r),s=u.a=0}return o>=0&&(l=yt(s,o,u,r)),u.negatives=c,u.positives=l,u.result=function(e,t,n){let r=vt(e,t,"-",!1)||[],i=vt(t,e,"",!1)||[],s=vt(e,t,"-?",!0)||[];return r.concat(s).concat(i).join("|")}(c,l),!0===r.capture?u.result=`(${u.result})`:!1!==r.wrap&&l.length+c.length>1&&(u.result=`(?:${u.result})`),mt.cache[i]=u,u.result};function _t(e,t,n){if(e===t)return{pattern:e,count:[],digits:0};let r=function(e,t){let n=[];for(let r=0;r<e.length;r++)n.push([e[r],t[r]]);return n}(e,t),i=r.length,s="",o=0;for(let e=0;e<i;e++){let[t,n]=r[e];t===n?s+=t:"0"!==t||"9"!==n?s+=Ct(t,n):o++}return o&&(s+=!0===n.shorthand?"\\d":"[0-9]"),{pattern:s,count:[o],digits:i}}function yt(e,t,n,r){let i,s=function(e,t){let n=1,r=1,i=Et(e,n),s=new Set([t]);for(;e<=i&&i<=t;)s.add(i),n+=1,i=Et(e,n);for(i=At(t+1,r)-1;e<i&&i<=t;)s.add(i),r+=1,i=At(t+1,r)-1;return s=[...s],s.sort(bt),s}(e,t),o=[],a=e;for(let e=0;e<s.length;e++){let t=s[e],u=_t(String(a),String(t),r),l="";n.isPadded||!i||i.pattern!==u.pattern?(n.isPadded&&(l=Ot(t,n,r)),u.string=l+u.pattern+Rt(u.count),o.push(u),a=t+1,i=u):(i.count.length>1&&i.count.pop(),i.count.push(u.count[0]),i.string=i.pattern+Rt(i.count),a=t+1)}return o}function vt(e,t,n,r,i){let s=[];for(let i of e){let{string:e}=i;r||St(t,"string",e)||s.push(n+e),r&&St(t,"string",e)&&s.push(n+e)}return s}function bt(e,t){return e>t?1:t>e?-1:0}function St(e,t,n){return e.some(e=>e[t]===n)}function Et(e,t){return Number(String(e).slice(0,-t)+"9".repeat(t))}function At(e,t){return e-e%Math.pow(10,t)}function Rt(e){let[t=0,n=""]=e;return n||t>1?`{${t+(n?","+n:"")}}`:""}function Ct(e,t,n){return`[${e}${t-e==1?"":"-"}${t}]`}function wt(e){return/^-?(0+)\d/.test(e)}function Ot(e,t,n){if(!t.isPadded)return e;let r=Math.abs(t.maxLen-String(e).length),i=!1!==n.relaxZeros;switch(r){case 0:return"";case 1:return i?"0?":"0";case 2:return i?"0{0,2}":"00";default:return i?`0{0,${r}}`:`0{${r}}`}}mt.cache={},mt.clearCache=()=>mt.cache={};var Tt=mt;const Lt=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),Pt=e=>"number"==typeof e||"string"==typeof e&&""!==e,xt=e=>Number.isInteger(+e),kt=e=>{let t=`${e}`,n=-1;if("-"===t[0]&&(t=t.slice(1)),"0"===t)return!1;for(;"0"===t[++n];);return n>0},Mt=(e,t,n)=>{if(t>0){let n="-"===e[0]?"-":"";n&&(e=e.slice(1)),e=n+e.padStart(n?t-1:t,"0")}return!1===n?String(e):e},Ft=(e,t)=>{let n="-"===e[0]?"-":"";for(n&&(e=e.slice(1),t--);e.length<t;)e="0"+e;return n?"-"+e:e},It=(e,t,n,r)=>{if(n)return Tt(e,t,{wrap:!1,...r});let i=String.fromCharCode(e);return e===t?i:`[${i}-${String.fromCharCode(t)}]`},Nt=(e,t,n)=>{if(Array.isArray(e)){let t=!0===n.wrap,r=n.capture?"":"?:";return t?`(${r}${e.join("|")})`:e.join("|")}return Tt(e,t,n)},Bt=(...e)=>new RangeError("Invalid range arguments: "+l.inspect(...e)),Ht=(e,t,n)=>{if(!0===n.strictRanges)throw Bt([e,t]);return[]},$t=(e,t,n=1,r={})=>{let i=Number(e),s=Number(t);if(!Number.isInteger(i)||!Number.isInteger(s)){if(!0===r.strictRanges)throw Bt([e,t]);return[]}0===i&&(i=0),0===s&&(s=0);let o=i>s,a=String(e),u=String(t),l=String(n);n=Math.max(Math.abs(n),1);let c=kt(a)||kt(u)||kt(l),h=c?Math.max(a.length,u.length,l.length):0,p=!1===c&&!1===((e,t,n)=>"string"==typeof e||"string"==typeof t||!0===n.stringify)(e,t,r),f=r.transform||(e=>t=>!0===e?Number(t):String(t))(p);if(r.toRegex&&1===n)return It(Ft(e,h),Ft(t,h),!0,r);let g={negatives:[],positives:[]},d=[],m=0;for(;o?i>=s:i<=s;)!0===r.toRegex&&n>1?g[(_=i)<0?"negatives":"positives"].push(Math.abs(_)):d.push(Mt(f(i,m),h,p)),i=o?i-n:i+n,m++;var _;return!0===r.toRegex?n>1?((e,t)=>{e.negatives.sort((e,t)=>e<t?-1:e>t?1:0),e.positives.sort((e,t)=>e<t?-1:e>t?1:0);let n,r=t.capture?"":"?:",i="",s="";return e.positives.length&&(i=e.positives.join("|")),e.negatives.length&&(s=`-(${r}${e.negatives.join("|")})`),n=i&&s?`${i}|${s}`:i||s,t.wrap?`(${r}${n})`:n})(g,r):Nt(d,null,{wrap:!1,...r}):d},Dt=(e,t,n,r={})=>{if(null==t&&Pt(e))return[e];if(!Pt(e)||!Pt(t))return Ht(e,t,r);if("function"==typeof n)return Dt(e,t,1,{transform:n});if(Lt(n))return Dt(e,t,0,n);let i={...r};return!0===i.capture&&(i.wrap=!0),n=n||i.step||1,xt(n)?xt(e)&&xt(t)?$t(e,t,n,i):((e,t,n=1,r={})=>{if(!xt(e)&&e.length>1||!xt(t)&&t.length>1)return Ht(e,t,r);let i=r.transform||(e=>String.fromCharCode(e)),s=`${e}`.charCodeAt(0),o=`${t}`.charCodeAt(0),a=s>o,u=Math.min(s,o),l=Math.max(s,o);if(r.toRegex&&1===n)return It(u,l,!1,r);let c=[],h=0;for(;a?s>=o:s<=o;)c.push(i(s,h)),s=a?s-n:s+n,h++;return!0===r.toRegex?Nt(c,null,{wrap:!1,options:r}):c})(e,t,Math.max(Math.abs(n),1),i):null==n||Lt(n)?Dt(e,t,1,n):((e,t)=>{if(!0===t.strictRanges)throw new TypeError(`Expected step "${e}" to be a number`);return[]})(n,i)};var jt=Dt;var Gt=(e,t={})=>{let n=(e,r={})=>{let i=ft.isInvalidBrace(r),s=!0===e.invalid&&!0===t.escapeInvalid,o=!0===i||!0===s,a=!0===t.escapeInvalid?"\\":"",u="";if(!0===e.isOpen)return a+e.value;if(!0===e.isClose)return a+e.value;if("open"===e.type)return o?a+e.value:"(";if("close"===e.type)return o?a+e.value:")";if("comma"===e.type)return"comma"===e.prev.type?"":o?e.value:"|";if(e.value)return e.value;if(e.nodes&&e.ranges>0){let n=ft.reduce(e.nodes),r=jt(...n,{...t,wrap:!1,toRegex:!0});if(0!==r.length)return n.length>1&&r.length>1?`(${r})`:r}if(e.nodes)for(let t of e.nodes)u+=n(t,e);return u};return n(e)};const Ut=(e="",t="",n=!1)=>{let r=[];if(e=[].concat(e),!(t=[].concat(t)).length)return e;if(!e.length)return n?ft.flatten(t).map(e=>`{${e}}`):t;for(let i of e)if(Array.isArray(i))for(let e of i)r.push(Ut(e,t,n));else for(let e of t)!0===n&&"string"==typeof e&&(e=`{${e}}`),r.push(Array.isArray(e)?Ut(i,e,n):i+e);return ft.flatten(r)};var qt=(e,t={})=>{let n=void 0===t.rangeLimit?1e3:t.rangeLimit,r=(e,i={})=>{e.queue=[];let s=i,o=i.queue;for(;"brace"!==s.type&&"root"!==s.type&&s.parent;)s=s.parent,o=s.queue;if(e.invalid||e.dollar)return void o.push(Ut(o.pop(),gt(e,t)));if("brace"===e.type&&!0!==e.invalid&&2===e.nodes.length)return void o.push(Ut(o.pop(),["{}"]));if(e.nodes&&e.ranges>0){let r=ft.reduce(e.nodes);if(ft.exceedsLimit(...r,t.step,n))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let i=jt(...r,t);return 0===i.length&&(i=gt(e,t)),o.push(Ut(o.pop(),i)),void(e.nodes=[])}let a=ft.encloseBrace(e),u=e.queue,l=e;for(;"brace"!==l.type&&"root"!==l.type&&l.parent;)l=l.parent,u=l.queue;for(let t=0;t<e.nodes.length;t++){let n=e.nodes[t];"comma"!==n.type||"brace"!==e.type?"close"!==n.type?n.value&&"open"!==n.type?u.push(Ut(u.pop(),n.value)):n.nodes&&r(n,e):o.push(Ut(o.pop(),u,a)):(1===t&&u.push(""),u.push(""))}return u};return ft.flatten(r(e))};const{MAX_LENGTH:Wt,CHAR_BACKSLASH:Qt,CHAR_BACKTICK:Kt,CHAR_COMMA:Vt,CHAR_DOT:Xt,CHAR_LEFT_PARENTHESES:Yt,CHAR_RIGHT_PARENTHESES:Zt,CHAR_LEFT_CURLY_BRACE:zt,CHAR_RIGHT_CURLY_BRACE:Jt,CHAR_LEFT_SQUARE_BRACKET:en,CHAR_RIGHT_SQUARE_BRACKET:tn,CHAR_DOUBLE_QUOTE:nn,CHAR_SINGLE_QUOTE:rn,CHAR_NO_BREAK_SPACE:sn,CHAR_ZERO_WIDTH_NOBREAK_SPACE:on}={MAX_LENGTH:65536,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:" ",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"};var an=(e,t={})=>{if("string"!=typeof e)throw new TypeError("Expected a string");let n=t||{},r="number"==typeof n.maxLength?Math.min(Wt,n.maxLength):Wt;if(e.length>r)throw new SyntaxError(`Input length (${e.length}), exceeds max characters (${r})`);let i,s={type:"root",input:e,nodes:[]},o=[s],a=s,u=s,l=0,c=e.length,h=0,p=0;const f=()=>e[h++],g=e=>{if("text"===e.type&&"dot"===u.type&&(u.type="text"),!u||"text"!==u.type||"text"!==e.type)return a.nodes.push(e),e.parent=a,e.prev=u,u=e,e;u.value+=e.value};for(g({type:"bos"});h<c;)if(a=o[o.length-1],i=f(),i!==on&&i!==sn)if(i!==Qt)if(i!==tn)if(i!==en)if(i!==Yt)if(i!==Zt)if(i!==nn&&i!==rn&&i!==Kt)if(i!==zt)if(i!==Jt)if(i===Vt&&p>0){if(a.ranges>0){a.ranges=0;let e=a.nodes.shift();a.nodes=[e,{type:"text",value:gt(a)}]}g({type:"comma",value:i}),a.commas++}else if(i===Xt&&p>0&&0===a.commas){let e=a.nodes;if(0===p||0===e.length){g({type:"text",value:i});continue}if("dot"===u.type){if(a.range=[],u.value+=i,u.type="range",3!==a.nodes.length&&5!==a.nodes.length){a.invalid=!0,a.ranges=0,u.type="text";continue}a.ranges++,a.args=[];continue}if("range"===u.type){e.pop();let t=e[e.length-1];t.value+=u.value+i,u=t,a.ranges--;continue}g({type:"dot",value:i})}else g({type:"text",value:i});else{if("brace"!==a.type){g({type:"text",value:i});continue}let e="close";a=o.pop(),a.close=!0,g({type:e,value:i}),p--,a=o[o.length-1]}else{p++;let e=u.value&&"$"===u.value.slice(-1)||!0===a.dollar;a=g({type:"brace",open:!0,close:!1,dollar:e,depth:p,commas:0,ranges:0,nodes:[]}),o.push(a),g({type:"open",value:i})}else{let e,n=i;for(!0!==t.keepQuotes&&(i="");h<c&&(e=f());)if(e!==Qt){if(e===n){!0===t.keepQuotes&&(i+=e);break}i+=e}else i+=e+f();g({type:"text",value:i})}else{if("paren"!==a.type){g({type:"text",value:i});continue}a=o.pop(),g({type:"text",value:i}),a=o[o.length-1]}else a=g({type:"paren",nodes:[]}),o.push(a),g({type:"text",value:i});else{let e;for(l++;h<c&&(e=f());)if(i+=e,e!==en)if(e!==Qt){if(e===tn&&(l--,0===l))break}else i+=f();else l++;g({type:"text",value:i})}else g({type:"text",value:"\\"+i});else g({type:"text",value:(t.keepEscaping?i:"")+f()});do{if(a=o.pop(),"root"!==a.type){a.nodes.forEach(e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)});let e=o[o.length-1],t=e.nodes.indexOf(a);e.nodes.splice(t,1,...a.nodes)}}while(o.length>0);return g({type:"eos"}),s};const un=(e,t={})=>{let n=[];if(Array.isArray(e))for(let r of e){let e=un.create(r,t);Array.isArray(e)?n.push(...e):n.push(e)}else n=[].concat(un.create(e,t));return t&&!0===t.expand&&!0===t.nodupes&&(n=[...new Set(n)]),n};un.parse=(e,t={})=>an(e,t),un.stringify=(e,t={})=>gt("string"==typeof e?un.parse(e,t):e,t),un.compile=(e,t={})=>("string"==typeof e&&(e=un.parse(e,t)),Gt(e,t)),un.expand=(e,t={})=>{"string"==typeof e&&(e=un.parse(e,t));let n=qt(e,t);return!0===t.noempty&&(n=n.filter(Boolean)),!0===t.nodupes&&(n=[...new Set(n)]),n},un.create=(e,t={})=>""===e||e.length<3?[e]:!0!==t.expand?un.compile(e,t):un.expand(e,t);var ln=un;const cn={DOT_LITERAL:"\\.",PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:"\\/",ONE_CHAR:"(?=.)",QMARK:"[^/]",END_ANCHOR:"(?:\\/|$)",DOTS_SLASH:"\\.{1,2}(?:\\/|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|\\/)\\.{1,2}(?:\\/|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:\\/|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:\\/|$))",QMARK_NO_DOT:"[^.\\/]",STAR:"[^/]*?",START_ANCHOR:"(?:^|\\/)"},hn={...cn,SLASH_LITERAL:"[\\\\/]",QMARK:"[^\\\\/]",STAR:"[^\\\\/]*?",DOTS_SLASH:"\\.{1,2}(?:[\\\\/]|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|[\\\\/])\\.{1,2}(?:[\\\\/]|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:[\\\\/]|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:[\\\\/]|$))",QMARK_NO_DOT:"[^.\\\\/]",START_ANCHOR:"(?:^|[\\\\/])",END_ANCHOR:"(?:[\\\\/]|$)"};var pn={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:e.sep,extglobChars:e=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${e.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:e=>!0===e?hn:cn},fn=v((function(t,n){const r="win32"===process.platform,{REGEX_BACKSLASH:i,REGEX_REMOVE_BACKSLASH:s,REGEX_SPECIAL_CHARS:o,REGEX_SPECIAL_CHARS_GLOBAL:a}=pn;n.isObject=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),n.hasRegexChars=e=>o.test(e),n.isRegexChar=e=>1===e.length&&n.hasRegexChars(e),n.escapeRegex=e=>e.replace(a,"\\$1"),n.toPosixSlashes=e=>e.replace(i,"/"),n.removeBackslashes=e=>e.replace(s,e=>"\\"===e?"":e),n.supportsLookbehinds=()=>{const e=process.version.slice(1).split(".").map(Number);return 3===e.length&&e[0]>=9||8===e[0]&&e[1]>=10},n.isWindows=t=>t&&"boolean"==typeof t.windows?t.windows:!0===r||"\\"===e.sep,n.escapeLast=(e,t,r)=>{const i=e.lastIndexOf(t,r);return-1===i?e:"\\"===e[i-1]?n.escapeLast(e,t,i-1):`${e.slice(0,i)}\\${e.slice(i)}`},n.removePrefix=(e,t={})=>{let n=e;return n.startsWith("./")&&(n=n.slice(2),t.prefix="./"),n},n.wrapOutput=(e,t={},n={})=>{let r=`${n.contains?"":"^"}(?:${e})${n.contains?"":"$"}`;return!0===t.negated&&(r=`(?:^(?!${r}).*$)`),r}}));fn.isObject,fn.hasRegexChars,fn.isRegexChar,fn.escapeRegex,fn.toPosixSlashes,fn.removeBackslashes,fn.supportsLookbehinds,fn.isWindows,fn.escapeLast,fn.removePrefix,fn.wrapOutput;const{CHAR_ASTERISK:gn,CHAR_AT:dn,CHAR_BACKWARD_SLASH:mn,CHAR_COMMA:_n,CHAR_DOT:yn,CHAR_EXCLAMATION_MARK:vn,CHAR_FORWARD_SLASH:bn,CHAR_LEFT_CURLY_BRACE:Sn,CHAR_LEFT_PARENTHESES:En,CHAR_LEFT_SQUARE_BRACKET:An,CHAR_PLUS:Rn,CHAR_QUESTION_MARK:Cn,CHAR_RIGHT_CURLY_BRACE:wn,CHAR_RIGHT_PARENTHESES:On,CHAR_RIGHT_SQUARE_BRACKET:Tn}=pn,Ln=e=>e===bn||e===mn,Pn=e=>{!0!==e.isPrefix&&(e.depth=e.isGlobstar?1/0:1)};var xn=(e,t)=>{const n=t||{},r=e.length-1,i=!0===n.parts||!0===n.scanToEnd,s=[],o=[],a=[];let u,l,c=e,h=-1,p=0,f=0,g=!1,d=!1,m=!1,_=!1,y=!1,v=!1,b=!1,S=!1,E=!1,A=0,R={value:"",depth:0,isGlob:!1};const C=()=>h>=r,w=()=>(u=l,c.charCodeAt(++h));for(;h<r;){let e;if(l=w(),l!==mn){if(!0===v||l===Sn){for(A++;!0!==C()&&(l=w());)if(l!==mn)if(l!==Sn){if(!0!==v&&l===yn&&(l=w())===yn){if(g=R.isBrace=!0,m=R.isGlob=!0,E=!0,!0===i)continue;break}if(!0!==v&&l===_n){if(g=R.isBrace=!0,m=R.isGlob=!0,E=!0,!0===i)continue;break}if(l===wn&&(A--,0===A)){v=!1,g=R.isBrace=!0,E=!0;break}}else A++;else b=R.backslashes=!0,w();if(!0===i)continue;break}if(l!==bn){if(!0!==n.noext){if(!0===(l===Rn||l===dn||l===gn||l===Cn||l===vn)&&c.charCodeAt(h+1)===En){if(m=R.isGlob=!0,_=R.isExtglob=!0,E=!0,!0===i){for(;!0!==C()&&(l=w());)if(l!==mn){if(l===On){m=R.isGlob=!0,E=!0;break}}else b=R.backslashes=!0,l=w();continue}break}}if(l===gn){if(u===gn&&(y=R.isGlobstar=!0),m=R.isGlob=!0,E=!0,!0===i)continue;break}if(l===Cn){if(m=R.isGlob=!0,E=!0,!0===i)continue;break}if(l===An)for(;!0!==C()&&(e=w());)if(e!==mn){if(e===Tn){if(d=R.isBracket=!0,m=R.isGlob=!0,E=!0,!0===i)continue;break}}else b=R.backslashes=!0,w();if(!0===n.nonegate||l!==vn||h!==p){if(!0!==n.noparen&&l===En)for(;!0!==C()&&(l=w());)if(l!==mn){if(l===On){if(m=R.isGlob=!0,E=!0,!0===i)continue;break}}else b=R.backslashes=!0,l=w();if(!0===m){if(E=!0,!0===i)continue;break}}else S=R.negated=!0,p++}else{if(s.push(h),o.push(R),R={value:"",depth:0,isGlob:!1},!0===E)continue;if(u===yn&&h===p+1){p+=2;continue}f=h+1}}else b=R.backslashes=!0,l=w(),l===Sn&&(v=!0)}!0===n.noext&&(_=!1,m=!1);let O=c,T="",L="";p>0&&(T=c.slice(0,p),c=c.slice(p),f-=p),O&&!0===m&&f>0?(O=c.slice(0,f),L=c.slice(f)):!0===m?(O="",L=c):O=c,O&&""!==O&&"/"!==O&&O!==c&&Ln(O.charCodeAt(O.length-1))&&(O=O.slice(0,-1)),!0===n.unescape&&(L&&(L=fn.removeBackslashes(L)),O&&!0===b&&(O=fn.removeBackslashes(O)));const P={prefix:T,input:e,start:p,base:O,glob:L,isBrace:g,isBracket:d,isGlob:m,isExtglob:_,isGlobstar:y,negated:S};if(!0===n.tokens&&(P.maxDepth=0,Ln(l)||o.push(R),P.tokens=o),!0===n.parts||!0===n.tokens){let t;for(let r=0;r<s.length;r++){const i=t?t+1:p,u=s[r],l=e.slice(i,u);n.tokens&&(0===r&&0!==p?(o[r].isPrefix=!0,o[r].value=T):o[r].value=l,Pn(o[r]),P.maxDepth+=o[r].depth),0===r&&""===l||a.push(l),t=u}if(t&&t+1<e.length){const r=e.slice(t+1);a.push(r),n.tokens&&(o[o.length-1].value=r,Pn(o[o.length-1]),P.maxDepth+=o[o.length-1].depth)}P.slashes=s,P.parts=a}return P};const{MAX_LENGTH:kn,POSIX_REGEX_SOURCE:Mn,REGEX_NON_SPECIAL_CHARS:Fn,REGEX_SPECIAL_CHARS_BACKREF:In,REPLACEMENTS:Nn}=pn,Bn=(e,t)=>{if("function"==typeof t.expandRange)return t.expandRange(...e,t);e.sort();const n=`[${e.join("-")}]`;try{new RegExp(n)}catch(t){return e.map(e=>fn.escapeRegex(e)).join("..")}return n},Hn=(e,t)=>`Missing ${e}: "${t}" - use "\\\\${t}" to match literal characters`,$n=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");e=Nn[e]||e;const n={...t},r="number"==typeof n.maxLength?Math.min(kn,n.maxLength):kn;let i=e.length;if(i>r)throw new SyntaxError(`Input length: ${i}, exceeds maximum allowed length: ${r}`);const s={type:"bos",value:"",output:n.prepend||""},o=[s],a=n.capture?"":"?:",u=fn.isWindows(t),l=pn.globChars(u),c=pn.extglobChars(l),{DOT_LITERAL:h,PLUS_LITERAL:p,SLASH_LITERAL:f,ONE_CHAR:g,DOTS_SLASH:d,NO_DOT:m,NO_DOT_SLASH:_,NO_DOTS_SLASH:y,QMARK:v,QMARK_NO_DOT:b,STAR:S,START_ANCHOR:E}=l,A=e=>`(${a}(?:(?!${E}${e.dot?d:h}).)*?)`,R=n.dot?"":m,C=n.dot?v:b;let w=!0===n.bash?A(n):S;n.capture&&(w=`(${w})`),"boolean"==typeof n.noext&&(n.noextglob=n.noext);const O={input:e,index:-1,start:0,dot:!0===n.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:o};e=fn.removePrefix(e,O),i=e.length;const T=[],L=[],P=[];let x,k=s;const M=()=>O.index===i-1,F=O.peek=(t=1)=>e[O.index+t],I=O.advance=()=>e[++O.index],N=()=>e.slice(O.index+1),B=(e="",t=0)=>{O.consumed+=e,O.index+=t},H=e=>{O.output+=null!=e.output?e.output:e.value,B(e.value)},$=()=>{let e=1;for(;"!"===F()&&("("!==F(2)||"?"===F(3));)I(),O.start++,e++;return e%2!=0&&(O.negated=!0,O.start++,!0)},D=e=>{O[e]++,P.push(e)},j=e=>{O[e]--,P.pop()},G=e=>{if("globstar"===k.type){const t=O.braces>0&&("comma"===e.type||"brace"===e.type),n=!0===e.extglob||T.length&&("pipe"===e.type||"paren"===e.type);"slash"===e.type||"paren"===e.type||t||n||(O.output=O.output.slice(0,-k.output.length),k.type="star",k.value="*",k.output=w,O.output+=k.output)}if(T.length&&"paren"!==e.type&&!c[e.value]&&(T[T.length-1].inner+=e.value),(e.value||e.output)&&H(e),k&&"text"===k.type&&"text"===e.type)return k.value+=e.value,void(k.output=(k.output||"")+e.value);e.prev=k,o.push(e),k=e},U=(e,t)=>{const r={...c[t],conditions:1,inner:""};r.prev=k,r.parens=O.parens,r.output=O.output;const i=(n.capture?"(":"")+r.open;D("parens"),G({type:e,value:t,output:O.output?"":g}),G({type:"paren",extglob:!0,value:I(),output:i}),T.push(r)},q=e=>{let t=e.close+(n.capture?")":"");if("negate"===e.type){let r=w;e.inner&&e.inner.length>1&&e.inner.includes("/")&&(r=A(n)),(r!==w||M()||/^\)+$/.test(N()))&&(t=e.close=`)$))${r}`),"bos"===e.prev.type&&M()&&(O.negatedExtglob=!0)}G({type:"paren",extglob:!0,value:x,output:t}),j("parens")};if(!1!==n.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(e)){let r=!1,i=e.replace(In,(e,t,n,i,s,o)=>"\\"===i?(r=!0,e):"?"===i?t?t+i+(s?v.repeat(s.length):""):0===o?C+(s?v.repeat(s.length):""):v.repeat(n.length):"."===i?h.repeat(n.length):"*"===i?t?t+i+(s?w:""):w:t?e:`\\${e}`);return!0===r&&(i=!0===n.unescape?i.replace(/\\/g,""):i.replace(/\\+/g,e=>e.length%2==0?"\\\\":e?"\\":"")),i===e&&!0===n.contains?(O.output=e,O):(O.output=fn.wrapOutput(i,O,t),O)}for(;!M();){if(x=I(),"\0"===x)continue;if("\\"===x){const e=F();if("/"===e&&!0!==n.bash)continue;if("."===e||";"===e)continue;if(!e){x+="\\",G({type:"text",value:x});continue}const t=/^\\+/.exec(N());let r=0;if(t&&t[0].length>2&&(r=t[0].length,O.index+=r,r%2!=0&&(x+="\\")),!0===n.unescape?x=I()||"":x+=I()||"",0===O.brackets){G({type:"text",value:x});continue}}if(O.brackets>0&&("]"!==x||"["===k.value||"[^"===k.value)){if(!1!==n.posix&&":"===x){const e=k.value.slice(1);if(e.includes("[")&&(k.posix=!0,e.includes(":"))){const e=k.value.lastIndexOf("["),t=k.value.slice(0,e),n=k.value.slice(e+2),r=Mn[n];if(r){k.value=t+r,O.backtrack=!0,I(),s.output||1!==o.indexOf(k)||(s.output=g);continue}}}("["===x&&":"!==F()||"-"===x&&"]"===F())&&(x=`\\${x}`),"]"!==x||"["!==k.value&&"[^"!==k.value||(x=`\\${x}`),!0===n.posix&&"!"===x&&"["===k.value&&(x="^"),k.value+=x,H({value:x});continue}if(1===O.quotes&&'"'!==x){x=fn.escapeRegex(x),k.value+=x,H({value:x});continue}if('"'===x){O.quotes=1===O.quotes?0:1,!0===n.keepQuotes&&G({type:"text",value:x});continue}if("("===x){D("parens"),G({type:"paren",value:x});continue}if(")"===x){if(0===O.parens&&!0===n.strictBrackets)throw new SyntaxError(Hn("opening","("));const e=T[T.length-1];if(e&&O.parens===e.parens+1){q(T.pop());continue}G({type:"paren",value:x,output:O.parens?")":"\\)"}),j("parens");continue}if("["===x){if(!0!==n.nobracket&&N().includes("]"))D("brackets");else{if(!0!==n.nobracket&&!0===n.strictBrackets)throw new SyntaxError(Hn("closing","]"));x=`\\${x}`}G({type:"bracket",value:x});continue}if("]"===x){if(!0===n.nobracket||k&&"bracket"===k.type&&1===k.value.length){G({type:"text",value:x,output:`\\${x}`});continue}if(0===O.brackets){if(!0===n.strictBrackets)throw new SyntaxError(Hn("opening","["));G({type:"text",value:x,output:`\\${x}`});continue}j("brackets");const e=k.value.slice(1);if(!0===k.posix||"^"!==e[0]||e.includes("/")||(x=`/${x}`),k.value+=x,H({value:x}),!1===n.literalBrackets||fn.hasRegexChars(e))continue;const t=fn.escapeRegex(k.value);if(O.output=O.output.slice(0,-k.value.length),!0===n.literalBrackets){O.output+=t,k.value=t;continue}k.value=`(${a}${t}|${k.value})`,O.output+=k.value;continue}if("{"===x&&!0!==n.nobrace){D("braces");const e={type:"brace",value:x,output:"(",outputIndex:O.output.length,tokensIndex:O.tokens.length};L.push(e),G(e);continue}if("}"===x){const e=L[L.length-1];if(!0===n.nobrace||!e){G({type:"text",value:x,output:x});continue}let t=")";if(!0===e.dots){const e=o.slice(),r=[];for(let t=e.length-1;t>=0&&(o.pop(),"brace"!==e[t].type);t--)"dots"!==e[t].type&&r.unshift(e[t].value);t=Bn(r,n),O.backtrack=!0}if(!0!==e.comma&&!0!==e.dots){const n=O.output.slice(0,e.outputIndex),r=O.tokens.slice(e.tokensIndex);e.value=e.output="\\{",x=t="\\}",O.output=n;for(const e of r)O.output+=e.output||e.value}G({type:"brace",value:x,output:t}),j("braces"),L.pop();continue}if("|"===x){T.length>0&&T[T.length-1].conditions++,G({type:"text",value:x});continue}if(","===x){let e=x;const t=L[L.length-1];t&&"braces"===P[P.length-1]&&(t.comma=!0,e="|"),G({type:"comma",value:x,output:e});continue}if("/"===x){if("dot"===k.type&&O.index===O.start+1){O.start=O.index+1,O.consumed="",O.output="",o.pop(),k=s;continue}G({type:"slash",value:x,output:f});continue}if("."===x){if(O.braces>0&&"dot"===k.type){"."===k.value&&(k.output=h);const e=L[L.length-1];k.type="dots",k.output+=x,k.value+=x,e.dots=!0;continue}if(O.braces+O.parens===0&&"bos"!==k.type&&"slash"!==k.type){G({type:"text",value:x,output:h});continue}G({type:"dot",value:x,output:h});continue}if("?"===x){if(!(k&&"("===k.value)&&!0!==n.noextglob&&"("===F()&&"?"!==F(2)){U("qmark",x);continue}if(k&&"paren"===k.type){const e=F();let t=x;if("<"===e&&!fn.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===k.value&&!/[!=<:]/.test(e)||"<"===e&&!/<([!=]|\w+>)/.test(N()))&&(t=`\\${x}`),G({type:"text",value:x,output:t});continue}if(!0!==n.dot&&("slash"===k.type||"bos"===k.type)){G({type:"qmark",value:x,output:b});continue}G({type:"qmark",value:x,output:v});continue}if("!"===x){if(!0!==n.noextglob&&"("===F()&&("?"!==F(2)||!/[!=<:]/.test(F(3)))){U("negate",x);continue}if(!0!==n.nonegate&&0===O.index){$();continue}}if("+"===x){if(!0!==n.noextglob&&"("===F()&&"?"!==F(2)){U("plus",x);continue}if(k&&"("===k.value||!1===n.regex){G({type:"plus",value:x,output:p});continue}if(k&&("bracket"===k.type||"paren"===k.type||"brace"===k.type)||O.parens>0){G({type:"plus",value:x});continue}G({type:"plus",value:p});continue}if("@"===x){if(!0!==n.noextglob&&"("===F()&&"?"!==F(2)){G({type:"at",extglob:!0,value:x,output:""});continue}G({type:"text",value:x});continue}if("*"!==x){"$"!==x&&"^"!==x||(x=`\\${x}`);const e=Fn.exec(N());e&&(x+=e[0],O.index+=e[0].length),G({type:"text",value:x});continue}if(k&&("globstar"===k.type||!0===k.star)){k.type="star",k.star=!0,k.value+=x,k.output=w,O.backtrack=!0,O.globstar=!0,B(x);continue}let t=N();if(!0!==n.noextglob&&/^\([^?]/.test(t)){U("star",x);continue}if("star"===k.type){if(!0===n.noglobstar){B(x);continue}const r=k.prev,i=r.prev,s="slash"===r.type||"bos"===r.type,o=i&&("star"===i.type||"globstar"===i.type);if(!0===n.bash&&(!s||t[0]&&"/"!==t[0])){G({type:"star",value:x,output:""});continue}const a=O.braces>0&&("comma"===r.type||"brace"===r.type),u=T.length&&("pipe"===r.type||"paren"===r.type);if(!s&&"paren"!==r.type&&!a&&!u){G({type:"star",value:x,output:""});continue}for(;"/**"===t.slice(0,3);){const n=e[O.index+4];if(n&&"/"!==n)break;t=t.slice(3),B("/**",3)}if("bos"===r.type&&M()){k.type="globstar",k.value+=x,k.output=A(n),O.output=k.output,O.globstar=!0,B(x);continue}if("slash"===r.type&&"bos"!==r.prev.type&&!o&&M()){O.output=O.output.slice(0,-(r.output+k.output).length),r.output=`(?:${r.output}`,k.type="globstar",k.output=A(n)+(n.strictSlashes?")":"|$)"),k.value+=x,O.globstar=!0,O.output+=r.output+k.output,B(x);continue}if("slash"===r.type&&"bos"!==r.prev.type&&"/"===t[0]){const e=void 0!==t[1]?"|$":"";O.output=O.output.slice(0,-(r.output+k.output).length),r.output=`(?:${r.output}`,k.type="globstar",k.output=`${A(n)}${f}|${f}${e})`,k.value+=x,O.output+=r.output+k.output,O.globstar=!0,B(x+I()),G({type:"slash",value:"/",output:""});continue}if("bos"===r.type&&"/"===t[0]){k.type="globstar",k.value+=x,k.output=`(?:^|${f}|${A(n)}${f})`,O.output=k.output,O.globstar=!0,B(x+I()),G({type:"slash",value:"/",output:""});continue}O.output=O.output.slice(0,-k.output.length),k.type="globstar",k.output=A(n),k.value+=x,O.output+=k.output,O.globstar=!0,B(x);continue}const r={type:"star",value:x,output:w};!0!==n.bash?!k||"bracket"!==k.type&&"paren"!==k.type||!0!==n.regex?(O.index!==O.start&&"slash"!==k.type&&"dot"!==k.type||("dot"===k.type?(O.output+=_,k.output+=_):!0===n.dot?(O.output+=y,k.output+=y):(O.output+=R,k.output+=R),"*"!==F()&&(O.output+=g,k.output+=g)),G(r)):(r.output=x,G(r)):(r.output=".*?","bos"!==k.type&&"slash"!==k.type||(r.output=R+r.output),G(r))}for(;O.brackets>0;){if(!0===n.strictBrackets)throw new SyntaxError(Hn("closing","]"));O.output=fn.escapeLast(O.output,"["),j("brackets")}for(;O.parens>0;){if(!0===n.strictBrackets)throw new SyntaxError(Hn("closing",")"));O.output=fn.escapeLast(O.output,"("),j("parens")}for(;O.braces>0;){if(!0===n.strictBrackets)throw new SyntaxError(Hn("closing","}"));O.output=fn.escapeLast(O.output,"{"),j("braces")}if(!0===n.strictSlashes||"star"!==k.type&&"bracket"!==k.type||G({type:"maybe_slash",value:"",output:`${f}?`}),!0===O.backtrack){O.output="";for(const e of O.tokens)O.output+=null!=e.output?e.output:e.value,e.suffix&&(O.output+=e.suffix)}return O};$n.fastpaths=(e,t)=>{const n={...t},r="number"==typeof n.maxLength?Math.min(kn,n.maxLength):kn,i=e.length;if(i>r)throw new SyntaxError(`Input length: ${i}, exceeds maximum allowed length: ${r}`);e=Nn[e]||e;const s=fn.isWindows(t),{DOT_LITERAL:o,SLASH_LITERAL:a,ONE_CHAR:u,DOTS_SLASH:l,NO_DOT:c,NO_DOTS:h,NO_DOTS_SLASH:p,STAR:f,START_ANCHOR:g}=pn.globChars(s),d=n.dot?h:c,m=n.dot?p:c,_=n.capture?"":"?:";let y=!0===n.bash?".*?":f;n.capture&&(y=`(${y})`);const v=e=>!0===e.noglobstar?y:`(${_}(?:(?!${g}${e.dot?l:o}).)*?)`,b=e=>{switch(e){case"*":return`${d}${u}${y}`;case".*":return`${o}${u}${y}`;case"*.*":return`${d}${y}${o}${u}${y}`;case"*/*":return`${d}${y}${a}${u}${m}${y}`;case"**":return d+v(n);case"**/*":return`(?:${d}${v(n)}${a})?${m}${u}${y}`;case"**/*.*":return`(?:${d}${v(n)}${a})?${m}${y}${o}${u}${y}`;case"**/.*":return`(?:${d}${v(n)}${a})?${o}${u}${y}`;default:{const t=/^(.*?)\.(\w+)$/.exec(e);if(!t)return;const n=b(t[1]);if(!n)return;return n+o+t[2]}}},S=fn.removePrefix(e,{negated:!1,prefix:""});let E=b(S);return E&&!0!==n.strictSlashes&&(E+=`${a}?`),E};var Dn=$n;const jn=(e,t,n=!1)=>{if(Array.isArray(e)){const r=e.map(e=>jn(e,t,n));return e=>{for(const t of r){const n=t(e);if(n)return n}return!1}}const r=(i=e)&&"object"==typeof i&&!Array.isArray(i)&&e.tokens&&e.input;var i;if(""===e||"string"!=typeof e&&!r)throw new TypeError("Expected pattern to be a non-empty string");const s=t||{},o=fn.isWindows(t),a=r?jn.compileRe(e,t):jn.makeRe(e,t,!1,!0),u=a.state;delete a.state;let l=()=>!1;if(s.ignore){const e={...t,ignore:null,onMatch:null,onResult:null};l=jn(s.ignore,e,n)}const c=(n,r=!1)=>{const{isMatch:i,match:c,output:h}=jn.test(n,a,t,{glob:e,posix:o}),p={glob:e,state:u,regex:a,posix:o,input:n,output:h,match:c,isMatch:i};return"function"==typeof s.onResult&&s.onResult(p),!1===i?(p.isMatch=!1,!!r&&p):l(n)?("function"==typeof s.onIgnore&&s.onIgnore(p),p.isMatch=!1,!!r&&p):("function"==typeof s.onMatch&&s.onMatch(p),!r||p)};return n&&(c.state=u),c};jn.test=(e,t,n,{glob:r,posix:i}={})=>{if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(""===e)return{isMatch:!1,output:""};const s=n||{},o=s.format||(i?fn.toPosixSlashes:null);let a=e===r,u=a&&o?o(e):e;return!1===a&&(u=o?o(e):e,a=u===r),!1!==a&&!0!==s.capture||(a=!0===s.matchBase||!0===s.basename?jn.matchBase(e,t,n,i):t.exec(u)),{isMatch:Boolean(a),match:a,output:u}},jn.matchBase=(t,n,r,i=fn.isWindows(r))=>(n instanceof RegExp?n:jn.makeRe(n,r)).test(e.basename(t)),jn.isMatch=(e,t,n)=>jn(t,n)(e),jn.parse=(e,t)=>Array.isArray(e)?e.map(e=>jn.parse(e,t)):Dn(e,{...t,fastpaths:!1}),jn.scan=(e,t)=>xn(e,t),jn.compileRe=(e,t,n=!1,r=!1)=>{if(!0===n)return e.output;const i=t||{},s=i.contains?"":"^",o=i.contains?"":"$";let a=`${s}(?:${e.output})${o}`;e&&!0===e.negated&&(a=`^(?!${a}).*$`);const u=jn.toRegex(a,t);return!0===r&&(u.state=e),u},jn.makeRe=(e,t,n=!1,r=!1)=>{if(!e||"string"!=typeof e)throw new TypeError("Expected a non-empty string");const i=t||{};let s,o={negated:!1,fastpaths:!0},a="";return e.startsWith("./")&&(e=e.slice(2),a=o.prefix="./"),!1===i.fastpaths||"."!==e[0]&&"*"!==e[0]||(s=Dn.fastpaths(e,t)),void 0===s?(o=Dn(e,t),o.prefix=a+(o.prefix||"")):o.output=s,jn.compileRe(o,t,n,r)},jn.toRegex=(e,t)=>{try{const n=t||{};return new RegExp(e,n.flags||(n.nocase?"i":""))}catch(e){if(t&&!0===t.debug)throw e;return/$^/}},jn.constants=pn;var Gn=jn;const Un=e=>"string"==typeof e&&(""===e||"./"===e),qn=(e,t,n)=>{t=[].concat(t),e=[].concat(e);let r=new Set,i=new Set,s=new Set,o=0,a=e=>{s.add(e.output),n&&n.onResult&&n.onResult(e)};for(let s=0;s<t.length;s++){let u=Gn(String(t[s]),{...n,onResult:a},!0),l=u.state.negated||u.state.negatedExtglob;l&&o++;for(let t of e){let e=u(t,!0);(l?!e.isMatch:e.isMatch)&&(l?r.add(e.output):(r.delete(e.output),i.add(e.output)))}}let u=(o===t.length?[...s]:[...i]).filter(e=>!r.has(e));if(n&&0===u.length){if(!0===n.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===n.nonull||!0===n.nullglob)return n.unescape?t.map(e=>e.replace(/\\/g,"")):t}return u};qn.match=qn,qn.matcher=(e,t)=>Gn(e,t),qn.any=qn.isMatch=(e,t,n)=>Gn(t,n)(e),qn.not=(e,t,n={})=>{t=[].concat(t).map(String);let r=new Set,i=[],s=qn(e,t,{...n,onResult:e=>{n.onResult&&n.onResult(e),i.push(e.output)}});for(let e of i)s.includes(e)||r.add(e);return[...r]},qn.contains=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${l.inspect(e)}"`);if(Array.isArray(t))return t.some(t=>qn.contains(e,t,n));if("string"==typeof t){if(Un(e)||Un(t))return!1;if(e.includes(t)||e.startsWith("./")&&e.slice(2).includes(t))return!0}return qn.isMatch(e,t,{...n,contains:!0})},qn.matchKeys=(e,t,n)=>{if(!fn.isObject(e))throw new TypeError("Expected the first argument to be an object");let r=qn(Object.keys(e),t,n),i={};for(let t of r)i[t]=e[t];return i},qn.some=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=Gn(String(e),n);if(r.some(e=>t(e)))return!0}return!1},qn.every=(e,t,n)=>{let r=[].concat(e);for(let e of[].concat(t)){let t=Gn(String(e),n);if(!r.every(e=>t(e)))return!1}return!0},qn.all=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${l.inspect(e)}"`);return[].concat(t).every(t=>Gn(t,n)(e))},qn.capture=(e,t,n)=>{let r=fn.isWindows(n),i=Gn.makeRe(String(e),{...n,capture:!0}).exec(r?fn.toPosixSlashes(t):t);if(i)return i.slice(1).map(e=>void 0===e?"":e)},qn.makeRe=(...e)=>Gn.makeRe(...e),qn.scan=(...e)=>Gn.scan(...e),qn.parse=(e,t)=>{let n=[];for(let r of[].concat(e||[]))for(let e of ln(String(r),t))n.push(Gn.parse(e,t));return n},qn.braces=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return t&&!0===t.nobrace||!/\{.*\}/.test(e)?[e]:ln(e,t)},qn.braceExpand=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return qn.braces(e,{...t,expand:!0})};var Wn=qn,Qn=v((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});const r=/[*?]|^!/,i=/\[.*]/,s=/(?:^|[^!*+?@])\(.*\|.*\)/,o=/[!*+?@]\(.*\)/,a=/{.*(?:,|\.\.).*}/;function u(e,t={}){return!l(e,t)}function l(e,t={}){return!(!1!==t.caseSensitiveMatch&&!e.includes("\\"))||(!!(r.test(e)||i.test(e)||s.test(e))||(!(!1===t.extglob||!o.test(e))||!(!1===t.braceExpansion||!a.test(e))))}function c(e){return e.startsWith("!")&&"("!==e[1]}function h(e){return!c(e)}function p(e){return e.endsWith("/**")}function f(e){return Wn.braces(e,{expand:!0,nodupes:!0})}function g(e,t){return Wn.makeRe(e,t)}n.isStaticPattern=u,n.isDynamicPattern=l,n.convertToPositivePattern=function(e){return c(e)?e.slice(1):e},n.convertToNegativePattern=function(e){return"!"+e},n.isNegativePattern=c,n.isPositivePattern=h,n.getNegativePatterns=function(e){return e.filter(c)},n.getPositivePatterns=function(e){return e.filter(h)},n.getBaseDirectory=function(e){return function(e,t){Object.assign({flipBackslashes:!0},t).flipBackslashes&&ut&&e.indexOf("/")<0&&(e=e.replace(lt,"/")),ct.test(e)&&(e+="/"),e+="a";do{e=at(e)}while(ot(e)||ht.test(e));return e.replace(pt,"$1")}(e,{flipBackslashes:!1})},n.hasGlobStar=function(e){return e.includes("**")},n.endsWithSlashGlobStar=p,n.isAffectDepthOfReadingPattern=function(t){const n=e.basename(t);return p(t)||u(n)},n.expandPatternsWithBraceExpansion=function(e){return e.reduce((e,t)=>e.concat(f(t)),[])},n.expandBraceExpansion=f,n.getPatternParts=function(e,t){const n=Gn.scan(e,Object.assign(Object.assign({},t),{parts:!0}));return 0===n.parts.length?[e]:n.parts},n.makeRe=g,n.convertPatternsToRe=function(e,t){return e.map(e=>g(e,t))},n.matchAny=function(e,t){return t.some(t=>t.test(e))}}));y(Qn);Qn.isStaticPattern,Qn.isDynamicPattern,Qn.convertToPositivePattern,Qn.convertToNegativePattern,Qn.isNegativePattern,Qn.isPositivePattern,Qn.getNegativePatterns,Qn.getPositivePatterns,Qn.getBaseDirectory,Qn.hasGlobStar,Qn.endsWithSlashGlobStar,Qn.isAffectDepthOfReadingPattern,Qn.expandPatternsWithBraceExpansion,Qn.expandBraceExpansion,Qn.getPatternParts,Qn.makeRe,Qn.convertPatternsToRe,Qn.matchAny;const Kn=c.PassThrough,Vn=Array.prototype.slice;var Xn=function(){const e=[];let t=!1;const n=Vn.call(arguments);let r=n[n.length-1];r&&!Array.isArray(r)&&null==r.pipe?n.pop():r={};const i=!1!==r.end;null==r.objectMode&&(r.objectMode=!0);null==r.highWaterMark&&(r.highWaterMark=65536);const s=Kn(r);function o(){for(let t=0,n=arguments.length;t<n;t++)e.push(Yn(arguments[t],r));return a(),this}function a(){if(t)return;t=!0;let n=e.shift();if(!n)return void process.nextTick(u);Array.isArray(n)||(n=[n]);let r=n.length+1;function i(){--r>0||(t=!1,a())}function o(e){function t(){e.removeListener("merge2UnpipeEnd",t),e.removeListener("end",t),i()}if(e._readableState.endEmitted)return i();e.on("merge2UnpipeEnd",t),e.on("end",t),e.pipe(s,{end:!1}),e.resume()}for(let e=0;e<n.length;e++)o(n[e]);i()}function u(){return t=!1,s.emit("queueDrain"),i&&s.end()}s.setMaxListeners(0),s.add=o,s.on("unpipe",(function(e){e.emit("merge2UnpipeEnd")})),n.length&&o.apply(null,n);return s};function Yn(e,t){if(Array.isArray(e))for(let n=0,r=e.length;n<r;n++)e[n]=Yn(e[n],t);else{if(!e._readableState&&e.pipe&&(e=e.pipe(Kn(t))),!e._readableState||!e.pause||!e.pipe)throw new Error("Only readable stream can be merged.");e.pause()}return e}var Zn=v((function(e,t){function n(e){e.forEach(e=>e.emit("close"))}Object.defineProperty(t,"__esModule",{value:!0}),t.merge=function(e){const t=Xn(e);return e.forEach(e=>{e.once("error",e=>t.emit("error",e))}),t.once("close",()=>n(e)),t.once("end",()=>n(e)),t}}));y(Zn);Zn.merge;var zn=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.isString=function(e){return"string"==typeof e},t.isEmpty=function(e){return""===e}}));y(zn);zn.isString,zn.isEmpty;var Jn=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.array=Je,t.errno=et,t.fs=tt,t.path=nt,t.pattern=Qn,t.stream=Zn,t.string=zn}));y(Jn);Jn.array,Jn.errno,Jn.fs,Jn.path,Jn.pattern,Jn.stream,Jn.string;var er=v((function(e,t){function n(e,t,n){const r=s(e);if("."in r){return[a(".",e,t,n)]}return o(r,t,n)}function r(e){return Jn.pattern.getPositivePatterns(e)}function i(e,t){return Jn.pattern.getNegativePatterns(e).concat(t).map(Jn.pattern.convertToPositivePattern)}function s(e){return e.reduce((e,t)=>{const n=Jn.pattern.getBaseDirectory(t);return n in e?e[n].push(t):e[n]=[t],e},{})}function o(e,t,n){return Object.keys(e).map(r=>a(r,e[r],t,n))}function a(e,t,n,r){return{dynamic:r,positive:t,negative:n,base:e,patterns:[].concat(t,n.map(Jn.pattern.convertToNegativePattern))}}Object.defineProperty(t,"__esModule",{value:!0}),t.generate=function(e,t){const s=r(e),o=i(e,t.ignore),a=s.filter(e=>Jn.pattern.isStaticPattern(e,t)),u=s.filter(e=>Jn.pattern.isDynamicPattern(e,t)),l=n(a,o,!1),c=n(u,o,!0);return l.concat(c)},t.convertPatternsToTasks=n,t.getPositivePatterns=r,t.getNegativePatternsAsPositive=i,t.groupPatternsByBaseDirectory=s,t.convertPatternGroupsToTasks=o,t.convertPatternGroupToTask=a}));y(er);er.generate,er.convertPatternsToTasks,er.getPositivePatterns,er.getNegativePatternsAsPositive,er.groupPatternsByBaseDirectory,er.convertPatternGroupsToTasks,er.convertPatternGroupToTask;var tr=v((function(e,t){function n(e,t){e(t)}function r(e,t){e(null,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t,i){t.fs.lstat(e,(s,o)=>null!==s?n(i,s):o.isSymbolicLink()&&t.followSymbolicLink?void t.fs.stat(e,(e,s)=>{if(null!==e)return t.throwErrorOnBrokenSymbolicLink?n(i,e):r(i,o);t.markSymbolicLink&&(s.isSymbolicLink=()=>!0),r(i,s)}):r(i,o))}}));y(tr);tr.read;var nr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t){const n=t.fs.lstatSync(e);if(!n.isSymbolicLink()||!t.followSymbolicLink)return n;try{const n=t.fs.statSync(e);return t.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(e){if(!t.throwErrorOnBrokenSymbolicLink)return n;throw e}}}));y(nr);nr.read;var rr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FILE_SYSTEM_ADAPTER={lstat:i.lstat,stat:i.stat,lstatSync:i.lstatSync,statSync:i.statSync},t.createFileSystemAdapter=function(e){return void 0===e?t.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},t.FILE_SYSTEM_ADAPTER),e)}}));y(rr);rr.FILE_SYSTEM_ADAPTER,rr.createFileSystemAdapter;var ir=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e={}){this._options=e,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=rr.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(e,t){return void 0===e?t:e}}}));y(ir);var sr=v((function(e,t){function n(e={}){return e instanceof ir.default?e:new ir.default(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=ir.default,t.stat=function(e,t,r){if("function"==typeof t)return tr.read(e,n(),t);tr.read(e,n(t),r)},t.statSync=function(e,t){const r=n(t);return nr.read(e,r)}}));y(sr);sr.Settings,sr.stat,sr.statSync;var or=function(e,t){var n,r,i,s=!0;Array.isArray(e)?(n=[],r=e.length):(i=Object.keys(e),n={},r=i.length);function o(e){function r(){t&&t(e,n),t=null}s?process.nextTick(r):r()}function a(e,t,i){n[e]=i,(0==--r||t)&&o(t)}r?i?i.forEach((function(t){e[t]((function(e,n){a(t,e,n)}))})):e.forEach((function(e,t){e((function(e,n){a(t,e,n)}))})):o(null);s=!1};var ar=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});const n=process.versions.node.split("."),r=parseInt(n[0],10),i=parseInt(n[1],10),s=r>10,o=10===r&&i>=10;t.IS_SUPPORT_READDIR_WITH_FILE_TYPES=s||o}));y(ar);ar.IS_SUPPORT_READDIR_WITH_FILE_TYPES;var ur=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new n(e,t)}}));y(ur);ur.createDirentFromStats;var lr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.fs=ur}));y(lr);lr.fs;var cr=v((function(e,t){function n(e,t,n){t.fs.readdir(e,{withFileTypes:!0},(r,o)=>{if(null!==r)return i(n,r);const a=o.map(n=>({dirent:n,name:n.name,path:`${e}${t.pathSegmentSeparator}${n.name}`}));if(!t.followSymbolicLinks)return s(n,a);const u=a.map(e=>function(e,t){return n=>{if(!e.dirent.isSymbolicLink())return n(null,e);t.fs.stat(e.path,(r,i)=>null!==r?t.throwErrorOnBrokenSymbolicLink?n(r):n(null,e):(e.dirent=lr.fs.createDirentFromStats(e.name,i),n(null,e)))}}(e,t));or(u,(e,t)=>{if(null!==e)return i(n,e);s(n,t)})})}function r(e,t,n){t.fs.readdir(e,(r,o)=>{if(null!==r)return i(n,r);const a=o.map(n=>`${e}${t.pathSegmentSeparator}${n}`),u=a.map(e=>n=>sr.stat(e,t.fsStatSettings,n));or(u,(e,r)=>{if(null!==e)return i(n,e);const u=[];o.forEach((e,n)=>{const i=r[n],s={name:e,path:a[n],dirent:lr.fs.createDirentFromStats(e,i)};t.stats&&(s.stats=i),u.push(s)}),s(n,u)})})}function i(e,t){e(t)}function s(e,t){e(null,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t,i){return!t.stats&&ar.IS_SUPPORT_READDIR_WITH_FILE_TYPES?n(e,t,i):r(e,t,i)},t.readdirWithFileTypes=n,t.readdir=r}));y(cr);cr.read,cr.readdirWithFileTypes,cr.readdir;var hr=v((function(e,t){function n(e,t){return t.fs.readdirSync(e,{withFileTypes:!0}).map(n=>{const r={dirent:n,name:n.name,path:`${e}${t.pathSegmentSeparator}${n.name}`};if(r.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{const e=t.fs.statSync(r.path);r.dirent=lr.fs.createDirentFromStats(r.name,e)}catch(e){if(t.throwErrorOnBrokenSymbolicLink)throw e}return r})}function r(e,t){return t.fs.readdirSync(e).map(n=>{const r=`${e}${t.pathSegmentSeparator}${n}`,i=sr.statSync(r,t.fsStatSettings),s={name:n,path:r,dirent:lr.fs.createDirentFromStats(n,i)};return t.stats&&(s.stats=i),s})}Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t){return!t.stats&&ar.IS_SUPPORT_READDIR_WITH_FILE_TYPES?n(e,t):r(e,t)},t.readdirWithFileTypes=n,t.readdir=r}));y(hr);hr.read,hr.readdirWithFileTypes,hr.readdir;var pr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FILE_SYSTEM_ADAPTER={lstat:i.lstat,stat:i.stat,lstatSync:i.lstatSync,statSync:i.statSync,readdir:i.readdir,readdirSync:i.readdirSync},t.createFileSystemAdapter=function(e){return void 0===e?t.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},t.FILE_SYSTEM_ADAPTER),e)}}));y(pr);pr.FILE_SYSTEM_ADAPTER,pr.createFileSystemAdapter;var fr=v((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t={}){this._options=t,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=pr.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,e.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new sr.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return void 0===e?t:e}}}));y(fr);var gr=v((function(e,t){function n(e={}){return e instanceof fr.default?e:new fr.default(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=fr.default,t.scandir=function(e,t,r){if("function"==typeof t)return cr.read(e,n(),t);cr.read(e,n(t),r)},t.scandirSync=function(e,t){const r=n(t);return hr.read(e,r)}}));y(gr);gr.Settings,gr.scandir,gr.scandirSync;var dr=function(e){var t=new e,n=t;return{get:function(){var r=t;return r.next?t=r.next:(t=new e,n=t),r.next=null,r},release:function(e){n.next=e,n=e}}};function mr(){}function _r(){this.value=null,this.callback=mr,this.next=null,this.release=mr,this.context=null;var e=this;this.worked=function(t,n){var r=e.callback;e.value=null,e.callback=mr,r.call(e.context,t,n),e.release(e)}}var yr=function(e,t,n){"function"==typeof e&&(n=t,t=e,e=null);var r=dr(_r),i=null,s=null,o=0,a={push:function(n,l){var c=r.get();c.context=e,c.release=u,c.value=n,c.callback=l||mr,o===a.concurrency||a.paused?s?(s.next=c,s=c):(i=c,s=c,a.saturated()):(o++,t.call(e,c.value,c.worked))},drain:mr,saturated:mr,pause:function(){a.paused=!0},paused:!1,concurrency:n,running:function(){return o},resume:function(){if(!a.paused)return;a.paused=!1;for(var e=0;e<a.concurrency;e++)o++,u()},idle:function(){return 0===o&&0===a.length()},length:function(){var e=i,t=0;for(;e;)e=e.next,t++;return t},unshift:function(n,l){var c=r.get();c.context=e,c.release=u,c.value=n,c.callback=l||mr,o===a.concurrency||a.paused?i?(c.next=i,i=c):(i=c,s=c,a.saturated()):(o++,t.call(e,c.value,c.worked))},empty:mr,kill:function(){i=null,s=null,a.drain=mr},killAndDrain:function(){i=null,s=null,a.drain(),a.drain=mr}};return a;function u(n){n&&r.release(n);var u=i;u?a.paused?o--:(s===i&&(s=null),i=u.next,u.next=null,t.call(e,u.value,u.worked),null===s&&a.empty()):0==--o&&a.drain()}},vr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.isFatalError=function(e,t){return null===e.errorFilter||!e.errorFilter(t)},t.isAppliedFilter=function(e,t){return null===e||e(t)},t.replacePathSegmentSeparator=function(e,t){return e.split(/[\\/]/).join(t)},t.joinPathSegments=function(e,t,n){return""===e?t:e+n+t}}));y(vr);vr.isFatalError,vr.isAppliedFilter,vr.replacePathSegmentSeparator,vr.joinPathSegments;var br=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._root=vr.replacePathSegmentSeparator(e,t.pathSegmentSeparator)}}}));y(br);var Sr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends br.default{constructor(e,t){super(e,t),this._settings=t,this._scandir=gr.scandir,this._emitter=new h.EventEmitter,this._queue=yr(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(e){this._emitter.on("entry",e)}onError(e){this._emitter.once("error",e)}onEnd(e){this._emitter.once("end",e)}_pushToQueue(e,t){const n={directory:e,base:t};this._queue.push(n,e=>{null!==e&&this._handleError(e)})}_worker(e,t){this._scandir(e.directory,this._settings.fsScandirSettings,(n,r)=>{if(null!==n)return t(n,void 0);for(const t of r)this._handleEntry(t,e.base);t(null,void 0)})}_handleError(e){vr.isFatalError(this._settings,e)&&(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",e))}_handleEntry(e,t){if(this._isDestroyed||this._isFatalError)return;const n=e.path;void 0!==t&&(e.path=vr.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),vr.isAppliedFilter(this._settings.entryFilter,e)&&this._emitEntry(e),e.dirent.isDirectory()&&vr.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,e.path)}_emitEntry(e){this._emitter.emit("entry",e)}}t.default=n}));y(Sr);var Er=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new Sr.default(this._root,this._settings),this._storage=new Set}read(e){this._reader.onError(t=>{!function(e,t){e(t)}(e,t)}),this._reader.onEntry(e=>{this._storage.add(e)}),this._reader.onEnd(()=>{!function(e,t){e(null,t)}(e,[...this._storage])}),this._reader.read()}}}));y(Er);var Ar=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new Sr.default(this._root,this._settings),this._stream=new c.Readable({objectMode:!0,read:()=>{},destroy:this._reader.destroy.bind(this._reader)})}read(){return this._reader.onError(e=>{this._stream.emit("error",e)}),this._reader.onEntry(e=>{this._stream.push(e)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}}}));y(Ar);var Rr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends br.default{constructor(){super(...arguments),this._scandir=gr.scandirSync,this._storage=new Set,this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),[...this._storage]}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(const e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{const n=this._scandir(e,this._settings.fsScandirSettings);for(const e of n)this._handleEntry(e,t)}catch(e){this._handleError(e)}}_handleError(e){if(vr.isFatalError(this._settings,e))throw e}_handleEntry(e,t){const n=e.path;void 0!==t&&(e.path=vr.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),vr.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&vr.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,e.path)}_pushToStorage(e){this._storage.add(e)}}t.default=n}));y(Rr);var Cr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new Rr.default(this._root,this._settings)}read(){return this._reader.read()}}}));y(Cr);var wr=v((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(t={}){this._options=t,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,1/0),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,e.sep),this.fsScandirSettings=new gr.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return void 0===e?t:e}}}));y(wr);var Or=v((function(e,t){function n(e={}){return e instanceof wr.default?e:new wr.default(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=wr.default,t.walk=function(e,t,r){if("function"==typeof t)return new Er.default(e,n()).read(t);new Er.default(e,n(t)).read(r)},t.walkSync=function(e,t){const r=n(t);return new Cr.default(e,r).read()},t.walkStream=function(e,t){const r=n(t);return new Ar.default(e,r).read()}}));y(Or);Or.Settings,Or.walk,Or.walkSync,Or.walkStream;var Tr=v((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(e){this._settings=e,this._fsStatSettings=new sr.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(t){return e.resolve(this._settings.cwd,t)}_makeEntry(e,t){const n={name:t,path:t,dirent:Jn.fs.createDirentFromStats(t,e)};return this._settings.stats&&(n.stats=e),n}_isFatalError(e){return!Jn.errno.isEnoentCodeError(e)&&!this._settings.suppressErrors}}}));y(Tr);var Lr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Tr.default{constructor(){super(...arguments),this._walkStream=Or.walkStream,this._stat=sr.stat}dynamic(e,t){return this._walkStream(e,t)}static(e,t){const n=e.map(this._getFullEntryPath,this),r=new c.PassThrough({objectMode:!0});r._write=(i,s,o)=>this._getEntry(n[i],e[i],t).then(e=>{null!==e&&t.entryFilter(e)&&r.push(e),i===n.length-1&&r.end(),o()}).catch(o);for(let e=0;e<n.length;e++)r.write(e);return r}_getEntry(e,t,n){return this._getStat(e).then(e=>this._makeEntry(e,t)).catch(e=>{if(n.errorFilter(e))return null;throw e})}_getStat(e){return new Promise((t,n)=>{this._stat(e,this._fsStatSettings,(e,r)=>null===e?t(r):n(e))})}}t.default=n}));y(Lr);var Pr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,n){this._patterns=e,this._settings=t,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){const e=Jn.pattern.expandPatternsWithBraceExpansion(this._patterns);for(const t of e){const e=this._getPatternSegments(t),n=this._splitSegmentsIntoSections(e);this._storage.push({complete:n.length<=1,pattern:t,segments:e,sections:n})}}_getPatternSegments(e){return Jn.pattern.getPatternParts(e,this._micromatchOptions).map(e=>Jn.pattern.isDynamicPattern(e,this._settings)?{dynamic:!0,pattern:e,patternRe:Jn.pattern.makeRe(e,this._micromatchOptions)}:{dynamic:!1,pattern:e})}_splitSegmentsIntoSections(e){return Jn.array.splitWhen(e,e=>e.dynamic&&Jn.pattern.hasGlobStar(e.pattern))}}}));y(Pr);var xr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Pr.default{match(e){const t=e.split("/"),n=t.length,r=this._storage.filter(e=>!e.complete||e.segments.length>n);for(const e of r){const r=e.sections[0];if(!e.complete&&n>r.length)return!0;if(t.every((t,n)=>{const r=e.segments[n];return!(!r.dynamic||!r.patternRe.test(t))||!r.dynamic&&r.pattern===t}))return!0}return!1}}t.default=n}));y(xr);var kr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t}getFilter(e,t,n){const r=this._getMatcher(t),i=this._getNegativePatternsRe(n);return t=>this._filter(e,t,r,i)}_getMatcher(e){return new xr.default(e,this._settings,this._micromatchOptions)}_getNegativePatternsRe(e){const t=e.filter(Jn.pattern.isAffectDepthOfReadingPattern);return Jn.pattern.convertPatternsToRe(t,this._micromatchOptions)}_filter(e,t,n,r){const i=this._getEntryLevel(e,t.path);if(this._isSkippedByDeep(i))return!1;if(this._isSkippedSymbolicLink(t))return!1;const s=Jn.path.removeLeadingDotSegment(t.path);return!this._isSkippedByPositivePatterns(s,n)&&this._isSkippedByNegativePatterns(s,r)}_isSkippedByDeep(e){return e>=this._settings.deep}_isSkippedSymbolicLink(e){return!this._settings.followSymbolicLinks&&e.dirent.isSymbolicLink()}_getEntryLevel(e,t){const n=e.split("/").length;return t.split("/").length-(""===e?0:n)}_isSkippedByPositivePatterns(e,t){return!this._settings.baseNameMatch&&!t.match(e)}_isSkippedByNegativePatterns(e,t){return!Jn.pattern.matchAny(e,t)}}}));y(kr);var Mr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t,this.index=new Map}getFilter(e,t){const n=Jn.pattern.convertPatternsToRe(e,this._micromatchOptions),r=Jn.pattern.convertPatternsToRe(t,this._micromatchOptions);return e=>this._filter(e,n,r)}_filter(e,t,n){if(this._settings.unique){if(this._isDuplicateEntry(e))return!1;this._createIndexRecord(e)}if(this._onlyFileFilter(e)||this._onlyDirectoryFilter(e))return!1;if(this._isSkippedByAbsoluteNegativePatterns(e,n))return!1;const r=this._settings.baseNameMatch?e.name:e.path;return this._isMatchToPatterns(r,t)&&!this._isMatchToPatterns(e.path,n)}_isDuplicateEntry(e){return this.index.has(e.path)}_createIndexRecord(e){this.index.set(e.path,void 0)}_onlyFileFilter(e){return this._settings.onlyFiles&&!e.dirent.isFile()}_onlyDirectoryFilter(e){return this._settings.onlyDirectories&&!e.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(e,t){if(!this._settings.absolute)return!1;const n=Jn.path.makeAbsolute(this._settings.cwd,e.path);return this._isMatchToPatterns(n,t)}_isMatchToPatterns(e,t){const n=Jn.path.removeLeadingDotSegment(e);return Jn.pattern.matchAny(n,t)}}}));y(Mr);var Fr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._settings=e}getFilter(){return e=>this._isNonFatalError(e)}_isNonFatalError(e){return Jn.errno.isEnoentCodeError(e)||this._settings.suppressErrors}}}));y(Fr);var Ir=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this._settings=e}getTransformer(){return e=>this._transform(e)}_transform(e){let t=e.path;return this._settings.absolute&&(t=Jn.path.makeAbsolute(this._settings.cwd,t),t=Jn.path.unixify(t)),this._settings.markDirectories&&e.dirent.isDirectory()&&(t+="/"),this._settings.objectMode?Object.assign(Object.assign({},e),{path:t}):t}}}));y(Ir);var Nr=v((function(t,n){Object.defineProperty(n,"__esModule",{value:!0});n.default=class{constructor(e){this._settings=e,this.errorFilter=new Fr.default(this._settings),this.entryFilter=new Mr.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new kr.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new Ir.default(this._settings)}_getRootDirectory(t){return e.resolve(this._settings.cwd,t.base)}_getReaderOptions(e){const t="."===e.base?"":e.base;return{basePath:t,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(t,e.positive,e.negative),entryFilter:this.entryFilter.getFilter(e.positive,e.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}}}));y(Nr);var Br=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Nr.default{constructor(){super(...arguments),this._reader=new Lr.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e),r=[];return new Promise((i,s)=>{const o=this.api(t,e,n);o.once("error",s),o.on("data",e=>r.push(n.transform(e))),o.once("end",()=>i(r))})}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=n}));y(Br);var Hr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Nr.default{constructor(){super(...arguments),this._reader=new Lr.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e),r=this.api(t,e,n),i=new c.Readable({objectMode:!0,read:()=>{}});return r.once("error",e=>i.emit("error",e)).on("data",e=>i.emit("data",n.transform(e))).once("end",()=>i.emit("end")),i.once("close",()=>r.destroy()),i}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=n}));y(Hr);var $r=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Tr.default{constructor(){super(...arguments),this._walkSync=Or.walkSync,this._statSync=sr.statSync}dynamic(e,t){return this._walkSync(e,t)}static(e,t){const n=[];for(const r of e){const e=this._getFullEntryPath(r),i=this._getEntry(e,r,t);null!==i&&t.entryFilter(i)&&n.push(i)}return n}_getEntry(e,t,n){try{const n=this._getStat(e);return this._makeEntry(n,t)}catch(e){if(n.errorFilter(e))return null;throw e}}_getStat(e){return this._statSync(e,this._fsStatSettings)}}t.default=n}));y($r);var Dr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});class n extends Nr.default{constructor(){super(...arguments),this._reader=new $r.default(this._settings)}read(e){const t=this._getRootDirectory(e),n=this._getReaderOptions(e);return this.api(t,e,n).map(n.transform)}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}}t.default=n}));y(Dr);var jr=v((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});const n=u.cpus().length;t.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:i.lstat,lstatSync:i.lstatSync,stat:i.stat,statSync:i.statSync,readdir:i.readdir,readdirSync:i.readdirSync};t.default=class{constructor(e={}){this._options=e,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,n),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(e,t){return void 0===e?t:e}_getFileSystemMethods(e={}){return Object.assign(Object.assign({},t.DEFAULT_FILE_SYSTEM_ADAPTER),e)}}}));y(jr);jr.DEFAULT_FILE_SYSTEM_ADAPTER;async function Gr(e,t){qr(e);const n=Ur(e,Br.default,t),r=await Promise.all(n);return Jn.array.flatten(r)}function Ur(e,t,n){const r=[].concat(e),i=new jr.default(n),s=er.generate(r,i),o=new t(i);return s.map(o.read,o)}function qr(e){if(![].concat(e).every(e=>Jn.string.isString(e)&&!Jn.string.isEmpty(e)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}!function(e){e.sync=function(e,t){qr(e);const n=Ur(e,Dr.default,t);return Jn.array.flatten(n)},e.stream=function(e,t){qr(e);const n=Ur(e,Hr.default,t);return Jn.stream.merge(n)},e.generateTasks=function(e,t){qr(e);const n=[].concat(e),r=new jr.default(t);return er.generate(n,r)},e.isDynamicPattern=function(e,t){qr(e);const n=new jr.default(t);return Jn.pattern.isDynamicPattern(e,n)},e.escapePath=function(e){return qr(e),Jn.path.escape(e)}}(Gr||(Gr={}));var Wr=Gr;class Qr{constructor(e){this.testRunner=e}resolveGlob(e){return Wr(e,{ignore:["node_modules/**/*"]}).then(e=>{for(const t of e){const e=n(t.toString());this.testRunner.setCurrentFile(e),require(e)}})}}!function(e){if((e=e||{}).environment&&(ne=e.environment,-1===["node","browser","auto"].indexOf(ne)))throw new Error("environment "+ne+" was unknown. Available options are {auto, browser, node}");if(e.retrieveFile&&(e.overrideRetrieveFile&&(oe.length=0),oe.unshift(e.retrieveFile)),e.retrieveSourceMap&&(e.overrideRetrieveSourceMap&&(ae.length=0),ae.unshift(e.retrieveSourceMap)),e.hookRequire&&!ue()){var t;try{t=o}catch(e){}var n=t.prototype._compile;n.__sourceMapSupport||(t.prototype._compile=function(e,t){return re[t]=e,ie[t]=void 0,n.call(this,e,t)},t.prototype._compile.__sourceMapSupport=!0)}var r;(te||(te="emptyCacheBetweenOperations"in e&&e.emptyCacheBetweenOperations),J||(J=!0,Error.prepareStackTrace=_e),ee)||(!("handleUncaughtExceptions"in e)||e.handleUncaughtExceptions)&&"object"==typeof process&&null!==process&&"function"==typeof process.on&&(ee=!0,r=process.emit,process.emit=function(e){if("uncaughtException"===e){var t=arguments[1]&&arguments[1].stack,n=this.listeners(e).length>0;if(t&&!n)return ye(arguments[1])}return r.apply(this,arguments)})}(),(new class{constructor(e=new Ne,t=new $e,n=new je,r=new Ge){this.cliConfigResolver=e,this.configFileLoader=t,this.packageJsonConfigLoader=n,this.configMerger=r}resolve(e){return Ue(this,void 0,void 0,(function*(){const t=this.cliConfigResolver.parse(e),n=yield this.getFileConfig(t.configPath),r=this.packageJsonConfigLoader.loadConfig();if(n&&r)throw new Error("Config exists within both package.json and an umbra.config file. Please remove one.");return this.configMerger.merge(De,r,n,t)}))}getFileConfig(e){return Ue(this,void 0,void 0,(function*(){if(e)return yield this.configFileLoader.loadConfig(e,De.cacheDir);try{return yield this.configFileLoader.loadConfig("./umbra.config.ts",De.cacheDir)}catch(e){}try{return yield this.configFileLoader.loadConfig("./umbra.config.js",De.cacheDir)}catch(e){}return null}))}}).resolve(process.argv).then(e=>({config:e})).then(e=>(e.runner=new ze({timeoutMs:e.config.timeoutMs,stopOnFirstFail:!1}),e)).then(e=>{const t=e.config.reporting,n=t?t.reporters:null;return n&&0!==n.length?e.reporters=n.map(e=>{try{return require(e)}catch(t){if(Me[e])return new Me[e];throw new Error(`Unable to load reporter: ${e}`)}}):e.reporters=[new ke],e}).then(e=>{const t=e.runner;for(const n of e.reporters)t.on("onTestStart",n.onTestStart.bind(n)),t.on("onTestEnd",n.onTestEnd.bind(n));return e}).then(e=>{const t=e.runner,n=t.it.only.bind(t),r=t.describe.only.bind(t),i=["it","describe","after","afterEach","before","beforeEach"];for(const e of i)Fe[e]=t[e].bind(t);return Fe.it.only=n,Fe.describe.only=r,Fe.__testRunner=t,e}).then(e=>Promise.all(e.reporters.map(e=>e.initialize())).then(()=>e)).then(e=>{if(!e.config.input)throw new Error("Config is missing an input file.");return new Qr(e.runner).resolveGlob(e.config.input).then(()=>e.runner.run()).then(t=>{for(const n of e.reporters)n.onRunEnd(t);return t})}).then(e=>{(e.totalFailures>0||e.totalTimeouts>0)&&process.exit(2)}).catch(e=>{console.error(e),process.exit(1)});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZXNtLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmFzZTY0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2Jhc2U2NC12bHEuanMiLCIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvdXRpbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9hcnJheS1zZXQuanMiLCIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvbWFwcGluZy1saXN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2JpbmFyeS1zZWFyY2guanMiLCIuLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1ub2RlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvc291cmNlLW1hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9idWZmZXItZnJvbS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwLXN1cHBvcnQvc291cmNlLW1hcC1zdXBwb3J0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Fuc2ktY29sb3JzL3N5bWJvbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvYW5zaS1jb2xvcnMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHVtYnJhLXRlc3QvdW1icmEtdXRpbC9saWIvRGVlcEVxdWFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B1bWJyYS10ZXN0L3VtYnJhLXV0aWwvbGliL0FycmF5VXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvQHVtYnJhLXRlc3QvdW1icmEtdXRpbC9saWIvU2ltcGxlRXZlbnRFbWl0dGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B1bWJyYS10ZXN0L3VtYnJhLXV0aWwvbGliL1NvcnRlZEFycmF5LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B1bWJyYS10ZXN0L3VtYnJhLXV0aWwvbGliL1N0cmluZ2lmeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AdW1icmEtdGVzdC91bWJyYS11dGlsL2xpYi9Bcmd1bWVudFZhbGlkYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9AdW1icmEtdGVzdC91bWJyYS11dGlsL2xpYi9pbmRleC5qcyIsIlJlcG9ydGVyL1N0b2NrL0Jhc2ljUmVwb3J0ZXIuanMiLCJSZXBvcnRlci9TdG9jay9TdG9ja1JlcG9ydGVyTWFwLmpzIiwiU3RhcnR1cFN0YWdlcy9FeHBvcnRHbG9iYWxzLmpzIiwiQ29uZmlnL1NpbXBsZUFyZ1BhcnNlci5qcyIsIkNvbmZpZy9DbGlDb25maWdSZXNvbHZlci5qcyIsIkNvbmZpZy9TaW1wbGVUU0NXcmFwcGVyLmpzIiwiQ29uZmlnL0NvbmZpZ0ZpbGVMb2FkZXIuanMiLCJDb25maWcvRGVmYXVsdENvbmZpZy5qcyIsIkNvbmZpZy9QYWNrYWdlSnNvbkNvbmZpZ0xvYWRlci5qcyIsIkNvbmZpZy9Db25maWdNZXJnZXIuanMiLCJDb25maWcvQ29tcG9zaXRlQ29uZmlnUmVzb2x2ZXIuanMiLCIuLi8uLi91bWJyYS10ZXN0LXJ1bm5lci9saWIvQXN5bmMvQXN5bmNQcm9taXNpZmllci5qcyIsIi4uLy4uL3VtYnJhLXRlc3QtcnVubmVyL2xpYi9Bc3luYy9UaW1lb3V0UHJvbWlzaWZpZXIuanMiLCIuLi8uLi91bWJyYS10ZXN0LXJ1bm5lci9saWIvQ29uZmlnL1Rlc3RSdW5uZXJDb25maWcuanMiLCIuLi8uLi91bWJyYS10ZXN0LXJ1bm5lci9saWIvQ29uZmlnL0RlZmF1bHRUZXN0UnVubmVyQ29uZmlnLmpzIiwiLi4vLi4vdW1icmEtdGVzdC1ydW5uZXIvbGliL0V2ZW50RW1pdHRlci9TaW1wbGVFdmVudEVtaXR0ZXIuanMiLCIuLi8uLi91bWJyYS10ZXN0LXJ1bm5lci9saWIvUXVldWVTdGFjay5qcyIsIi4uLy4uL3VtYnJhLXRlc3QtcnVubmVyL2xpYi9UZXN0UnVubmVyLmpzIiwiLi4vLi4vdW1icmEtdGVzdC1ydW5uZXIvbGliL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvYXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC91dGlscy9lcnJuby5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3V0aWxzL2ZzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvcGF0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9pcy1nbG9iL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2lzLWV4dGdsb2IvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZ2xvYi1wYXJlbnQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvYnJhY2VzL2xpYi91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL3N0cmluZ2lmeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9pcy1udW1iZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvdG8tcmVnZXgtcmFuZ2UvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZmlsbC1yYW5nZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL2NvbXBpbGUuanMiLCIuLi9ub2RlX21vZHVsZXMvYnJhY2VzL2xpYi9leHBhbmQuanMiLCIuLi9ub2RlX21vZHVsZXMvYnJhY2VzL2xpYi9wYXJzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL2NvbnN0YW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9icmFjZXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi9jb25zdGFudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL3NjYW4uanMiLCIuLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi9wYXJzZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL3BpY29tYXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9taWNyb21hdGNoL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvcGF0dGVybi5qcyIsIi4uL25vZGVfbW9kdWxlcy9tZXJnZTIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC91dGlscy9zdHJlYW0uanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC91dGlscy9zdHJpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC91dGlscy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L21hbmFnZXJzL3Rhc2tzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnN0YXQvb3V0L3Byb3ZpZGVycy9hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9wcm92aWRlcnMvc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9hZGFwdGVycy9mcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9zZXR0aW5ncy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9ydW4tcGFyYWxsZWwvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvY29uc3RhbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L3V0aWxzL2ZzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L3V0aWxzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L3Byb3ZpZGVycy9hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC9wcm92aWRlcnMvc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC9hZGFwdGVycy9mcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC9zZXR0aW5ncy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZXVzaWZ5L3JldXNpZnkuanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdHEvcXVldWUuanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcmVhZGVycy9jb21tb24uanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcmVhZGVycy9yZWFkZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcmVhZGVycy9hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9wcm92aWRlcnMvYXN5bmMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcHJvdmlkZXJzL3N0cmVhbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9yZWFkZXJzL3N5bmMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcHJvdmlkZXJzL3N5bmMuanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvc2V0dGluZ3MuanMiLCIuLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9yZWFkZXJzL3JlYWRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3JlYWRlcnMvc3RyZWFtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL21hdGNoZXJzL21hdGNoZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvbWF0Y2hlcnMvcGFydGlhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9maWx0ZXJzL2RlZXAuanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvZmlsdGVycy9lbnRyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9maWx0ZXJzL2Vycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL3RyYW5zZm9ybWVycy9lbnRyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9wcm92aWRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9hc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9zdHJlYW0uanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9yZWFkZXJzL3N5bmMuanMiLCIuLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvc3luYy5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3NldHRpbmdzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvaW5kZXguanMiLCJNb2R1bGVSZXNvbHZlci5qcyIsImluZGV4LmpzIiwiU3RhcnR1cFN0YWdlcy9DcmVhdGVDb250ZXh0LmpzIiwiU3RhcnR1cFN0YWdlcy9DcmVhdGVSdW5uZXIuanMiLCJTdGFydHVwU3RhZ2VzL1NlbGVjdFJlcG9ydGVycy5qcyIsIlN0YXJ0dXBTdGFnZXMvQXR0YWNoUmVwb3J0ZXJzLmpzIiwiU3RhcnR1cFN0YWdlcy9Jbml0aWFsaXplUmVwb3J0ZXJzLmpzIiwiU3RhcnR1cFN0YWdlcy9SdW5UZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBpbnRUb0NoYXJNYXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycuc3BsaXQoJycpO1xuXG4vKipcbiAqIEVuY29kZSBhbiBpbnRlZ2VyIGluIHRoZSByYW5nZSBvZiAwIHRvIDYzIHRvIGEgc2luZ2xlIGJhc2UgNjQgZGlnaXQuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG51bWJlcikge1xuICBpZiAoMCA8PSBudW1iZXIgJiYgbnVtYmVyIDwgaW50VG9DaGFyTWFwLmxlbmd0aCkge1xuICAgIHJldHVybiBpbnRUb0NoYXJNYXBbbnVtYmVyXTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYzOiBcIiArIG51bWJlcik7XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHNpbmdsZSBiYXNlIDY0IGNoYXJhY3RlciBjb2RlIGRpZ2l0IHRvIGFuIGludGVnZXIuIFJldHVybnMgLTEgb25cbiAqIGZhaWx1cmUuXG4gKi9cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gKGNoYXJDb2RlKSB7XG4gIHZhciBiaWdBID0gNjU7ICAgICAvLyAnQSdcbiAgdmFyIGJpZ1ogPSA5MDsgICAgIC8vICdaJ1xuXG4gIHZhciBsaXR0bGVBID0gOTc7ICAvLyAnYSdcbiAgdmFyIGxpdHRsZVogPSAxMjI7IC8vICd6J1xuXG4gIHZhciB6ZXJvID0gNDg7ICAgICAvLyAnMCdcbiAgdmFyIG5pbmUgPSA1NzsgICAgIC8vICc5J1xuXG4gIHZhciBwbHVzID0gNDM7ICAgICAvLyAnKydcbiAgdmFyIHNsYXNoID0gNDc7ICAgIC8vICcvJ1xuXG4gIHZhciBsaXR0bGVPZmZzZXQgPSAyNjtcbiAgdmFyIG51bWJlck9mZnNldCA9IDUyO1xuXG4gIC8vIDAgLSAyNTogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcbiAgaWYgKGJpZ0EgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gYmlnWikge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSBiaWdBKTtcbiAgfVxuXG4gIC8vIDI2IC0gNTE6IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XG4gIGlmIChsaXR0bGVBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGxpdHRsZVopIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gbGl0dGxlQSArIGxpdHRsZU9mZnNldCk7XG4gIH1cblxuICAvLyA1MiAtIDYxOiAwMTIzNDU2Nzg5XG4gIGlmICh6ZXJvIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IG5pbmUpIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gemVybyArIG51bWJlck9mZnNldCk7XG4gIH1cblxuICAvLyA2MjogK1xuICBpZiAoY2hhckNvZGUgPT0gcGx1cykge1xuICAgIHJldHVybiA2MjtcbiAgfVxuXG4gIC8vIDYzOiAvXG4gIGlmIChjaGFyQ29kZSA9PSBzbGFzaCkge1xuICAgIHJldHVybiA2MztcbiAgfVxuXG4gIC8vIEludmFsaWQgYmFzZTY0IGRpZ2l0LlxuICByZXR1cm4gLTE7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiBCYXNlZCBvbiB0aGUgQmFzZSA2NCBWTFEgaW1wbGVtZW50YXRpb24gaW4gQ2xvc3VyZSBDb21waWxlcjpcbiAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2xvc3VyZS1jb21waWxlci9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9jb20vZ29vZ2xlL2RlYnVnZ2luZy9zb3VyY2VtYXAvQmFzZTY0VkxRLmphdmFcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSBUaGUgQ2xvc3VyZSBDb21waWxlciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbiAqICAgIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4gKiAgICBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcbiAqICAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgR29vZ2xlIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZFxuICogICAgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTllcbiAqIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnLi9iYXNlNjQnKTtcblxuLy8gQSBzaW5nbGUgYmFzZSA2NCBkaWdpdCBjYW4gY29udGFpbiA2IGJpdHMgb2YgZGF0YS4gRm9yIHRoZSBiYXNlIDY0IHZhcmlhYmxlXG4vLyBsZW5ndGggcXVhbnRpdGllcyB3ZSB1c2UgaW4gdGhlIHNvdXJjZSBtYXAgc3BlYywgdGhlIGZpcnN0IGJpdCBpcyB0aGUgc2lnbixcbi8vIHRoZSBuZXh0IGZvdXIgYml0cyBhcmUgdGhlIGFjdHVhbCB2YWx1ZSwgYW5kIHRoZSA2dGggYml0IGlzIHRoZVxuLy8gY29udGludWF0aW9uIGJpdC4gVGhlIGNvbnRpbnVhdGlvbiBiaXQgdGVsbHMgdXMgd2hldGhlciB0aGVyZSBhcmUgbW9yZVxuLy8gZGlnaXRzIGluIHRoaXMgdmFsdWUgZm9sbG93aW5nIHRoaXMgZGlnaXQuXG4vL1xuLy8gICBDb250aW51YXRpb25cbi8vICAgfCAgICBTaWduXG4vLyAgIHwgICAgfFxuLy8gICBWICAgIFZcbi8vICAgMTAxMDExXG5cbnZhciBWTFFfQkFTRV9TSElGVCA9IDU7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0JBU0UgPSAxIDw8IFZMUV9CQVNFX1NISUZUO1xuXG4vLyBiaW5hcnk6IDAxMTExMVxudmFyIFZMUV9CQVNFX01BU0sgPSBWTFFfQkFTRSAtIDE7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0NPTlRJTlVBVElPTl9CSVQgPSBWTFFfQkFTRTtcblxuLyoqXG4gKiBDb252ZXJ0cyBmcm9tIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgdG8gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAxIGJlY29tZXMgMiAoMTAgYmluYXJ5KSwgLTEgYmVjb21lcyAzICgxMSBiaW5hcnkpXG4gKiAgIDIgYmVjb21lcyA0ICgxMDAgYmluYXJ5KSwgLTIgYmVjb21lcyA1ICgxMDEgYmluYXJ5KVxuICovXG5mdW5jdGlvbiB0b1ZMUVNpZ25lZChhVmFsdWUpIHtcbiAgcmV0dXJuIGFWYWx1ZSA8IDBcbiAgICA/ICgoLWFWYWx1ZSkgPDwgMSkgKyAxXG4gICAgOiAoYVZhbHVlIDw8IDEpICsgMDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0byBhIHR3by1jb21wbGVtZW50IHZhbHVlIGZyb20gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAyICgxMCBiaW5hcnkpIGJlY29tZXMgMSwgMyAoMTEgYmluYXJ5KSBiZWNvbWVzIC0xXG4gKiAgIDQgKDEwMCBiaW5hcnkpIGJlY29tZXMgMiwgNSAoMTAxIGJpbmFyeSkgYmVjb21lcyAtMlxuICovXG5mdW5jdGlvbiBmcm9tVkxRU2lnbmVkKGFWYWx1ZSkge1xuICB2YXIgaXNOZWdhdGl2ZSA9IChhVmFsdWUgJiAxKSA9PT0gMTtcbiAgdmFyIHNoaWZ0ZWQgPSBhVmFsdWUgPj4gMTtcbiAgcmV0dXJuIGlzTmVnYXRpdmVcbiAgICA/IC1zaGlmdGVkXG4gICAgOiBzaGlmdGVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgNjQgVkxRIGVuY29kZWQgdmFsdWUuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2VuY29kZShhVmFsdWUpIHtcbiAgdmFyIGVuY29kZWQgPSBcIlwiO1xuICB2YXIgZGlnaXQ7XG5cbiAgdmFyIHZscSA9IHRvVkxRU2lnbmVkKGFWYWx1ZSk7XG5cbiAgZG8ge1xuICAgIGRpZ2l0ID0gdmxxICYgVkxRX0JBU0VfTUFTSztcbiAgICB2bHEgPj4+PSBWTFFfQkFTRV9TSElGVDtcbiAgICBpZiAodmxxID4gMCkge1xuICAgICAgLy8gVGhlcmUgYXJlIHN0aWxsIG1vcmUgZGlnaXRzIGluIHRoaXMgdmFsdWUsIHNvIHdlIG11c3QgbWFrZSBzdXJlIHRoZVxuICAgICAgLy8gY29udGludWF0aW9uIGJpdCBpcyBtYXJrZWQuXG4gICAgICBkaWdpdCB8PSBWTFFfQ09OVElOVUFUSU9OX0JJVDtcbiAgICB9XG4gICAgZW5jb2RlZCArPSBiYXNlNjQuZW5jb2RlKGRpZ2l0KTtcbiAgfSB3aGlsZSAodmxxID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59O1xuXG4vKipcbiAqIERlY29kZXMgdGhlIG5leHQgYmFzZSA2NCBWTFEgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nIGFuZCByZXR1cm5zIHRoZVxuICogdmFsdWUgYW5kIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgdmlhIHRoZSBvdXQgcGFyYW1ldGVyLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9kZWNvZGUoYVN0ciwgYUluZGV4LCBhT3V0UGFyYW0pIHtcbiAgdmFyIHN0ckxlbiA9IGFTdHIubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gMDtcbiAgdmFyIHNoaWZ0ID0gMDtcbiAgdmFyIGNvbnRpbnVhdGlvbiwgZGlnaXQ7XG5cbiAgZG8ge1xuICAgIGlmIChhSW5kZXggPj0gc3RyTGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBtb3JlIGRpZ2l0cyBpbiBiYXNlIDY0IFZMUSB2YWx1ZS5cIik7XG4gICAgfVxuXG4gICAgZGlnaXQgPSBiYXNlNjQuZGVjb2RlKGFTdHIuY2hhckNvZGVBdChhSW5kZXgrKykpO1xuICAgIGlmIChkaWdpdCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGRpZ2l0OiBcIiArIGFTdHIuY2hhckF0KGFJbmRleCAtIDEpKTtcbiAgICB9XG5cbiAgICBjb250aW51YXRpb24gPSAhIShkaWdpdCAmIFZMUV9DT05USU5VQVRJT05fQklUKTtcbiAgICBkaWdpdCAmPSBWTFFfQkFTRV9NQVNLO1xuICAgIHJlc3VsdCA9IHJlc3VsdCArIChkaWdpdCA8PCBzaGlmdCk7XG4gICAgc2hpZnQgKz0gVkxRX0JBU0VfU0hJRlQ7XG4gIH0gd2hpbGUgKGNvbnRpbnVhdGlvbik7XG5cbiAgYU91dFBhcmFtLnZhbHVlID0gZnJvbVZMUVNpZ25lZChyZXN1bHQpO1xuICBhT3V0UGFyYW0ucmVzdCA9IGFJbmRleDtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8qKlxuICogVGhpcyBpcyBhIGhlbHBlciBmdW5jdGlvbiBmb3IgZ2V0dGluZyB2YWx1ZXMgZnJvbSBwYXJhbWV0ZXIvb3B0aW9uc1xuICogb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0gYXJncyBUaGUgb2JqZWN0IHdlIGFyZSBleHRyYWN0aW5nIHZhbHVlcyBmcm9tXG4gKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2UgYXJlIGdldHRpbmcuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIEFuIG9wdGlvbmFsIHZhbHVlIHRvIHJldHVybiBpZiB0aGUgcHJvcGVydHkgaXMgbWlzc2luZ1xuICogZnJvbSB0aGUgb2JqZWN0LiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYW5kIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nLCBhblxuICogZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKi9cbmZ1bmN0aW9uIGdldEFyZyhhQXJncywgYU5hbWUsIGFEZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGFOYW1lIGluIGFBcmdzKSB7XG4gICAgcmV0dXJuIGFBcmdzW2FOYW1lXTtcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIGFEZWZhdWx0VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhTmFtZSArICdcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LicpO1xuICB9XG59XG5leHBvcnRzLmdldEFyZyA9IGdldEFyZztcblxudmFyIHVybFJlZ2V4cCA9IC9eKD86KFtcXHcrXFwtLl0rKTopP1xcL1xcLyg/OihcXHcrOlxcdyspQCk/KFtcXHcuLV0qKSg/OjooXFxkKykpPyguKikkLztcbnZhciBkYXRhVXJsUmVnZXhwID0gL15kYXRhOi4rXFwsLiskLztcblxuZnVuY3Rpb24gdXJsUGFyc2UoYVVybCkge1xuICB2YXIgbWF0Y2ggPSBhVXJsLm1hdGNoKHVybFJlZ2V4cCk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNjaGVtZTogbWF0Y2hbMV0sXG4gICAgYXV0aDogbWF0Y2hbMl0sXG4gICAgaG9zdDogbWF0Y2hbM10sXG4gICAgcG9ydDogbWF0Y2hbNF0sXG4gICAgcGF0aDogbWF0Y2hbNV1cbiAgfTtcbn1cbmV4cG9ydHMudXJsUGFyc2UgPSB1cmxQYXJzZTtcblxuZnVuY3Rpb24gdXJsR2VuZXJhdGUoYVBhcnNlZFVybCkge1xuICB2YXIgdXJsID0gJyc7XG4gIGlmIChhUGFyc2VkVXJsLnNjaGVtZSkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLnNjaGVtZSArICc6JztcbiAgfVxuICB1cmwgKz0gJy8vJztcbiAgaWYgKGFQYXJzZWRVcmwuYXV0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmF1dGggKyAnQCc7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwuaG9zdCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLmhvc3Q7XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwucG9ydCkge1xuICAgIHVybCArPSBcIjpcIiArIGFQYXJzZWRVcmwucG9ydFxuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBhdGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5wYXRoO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5leHBvcnRzLnVybEdlbmVyYXRlID0gdXJsR2VuZXJhdGU7XG5cbi8qKlxuICogTm9ybWFsaXplcyBhIHBhdGgsIG9yIHRoZSBwYXRoIHBvcnRpb24gb2YgYSBVUkw6XG4gKlxuICogLSBSZXBsYWNlcyBjb25zZWN1dGl2ZSBzbGFzaGVzIHdpdGggb25lIHNsYXNoLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICcuJyBwYXJ0cy5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnPGRpcj4vLi4nIHBhcnRzLlxuICpcbiAqIEJhc2VkIG9uIGNvZGUgaW4gdGhlIE5vZGUuanMgJ3BhdGgnIGNvcmUgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciB1cmwgdG8gbm9ybWFsaXplLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUoYVBhdGgpIHtcbiAgdmFyIHBhdGggPSBhUGF0aDtcbiAgdmFyIHVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgaWYgKHVybCkge1xuICAgIGlmICghdXJsLnBhdGgpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG4gICAgcGF0aCA9IHVybC5wYXRoO1xuICB9XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpO1xuXG4gIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoL1xcLysvKTtcbiAgZm9yICh2YXIgcGFydCwgdXAgPSAwLCBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBwYXJ0ID0gcGFydHNbaV07XG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwID4gMCkge1xuICAgICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJ0IGlzIGJsYW5rIGlmIHRoZSBwYXRoIGlzIGFic29sdXRlLiBUcnlpbmcgdG8gZ29cbiAgICAgICAgLy8gYWJvdmUgdGhlIHJvb3QgaXMgYSBuby1vcC4gVGhlcmVmb3JlIHdlIGNhbiByZW1vdmUgYWxsICcuLicgcGFydHNcbiAgICAgICAgLy8gZGlyZWN0bHkgYWZ0ZXIgdGhlIHJvb3QuXG4gICAgICAgIHBhcnRzLnNwbGljZShpICsgMSwgdXApO1xuICAgICAgICB1cCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMik7XG4gICAgICAgIHVwLS07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhdGggPSBwYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKHBhdGggPT09ICcnKSB7XG4gICAgcGF0aCA9IGlzQWJzb2x1dGUgPyAnLycgOiAnLic7XG4gIH1cblxuICBpZiAodXJsKSB7XG4gICAgdXJsLnBhdGggPSBwYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZSh1cmwpO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG5cbi8qKlxuICogSm9pbnMgdHdvIHBhdGhzL1VSTHMuXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBqb2luZWQgd2l0aCB0aGUgcm9vdC5cbiAqXG4gKiAtIElmIGFQYXRoIGlzIGEgVVJMIG9yIGEgZGF0YSBVUkksIGFQYXRoIGlzIHJldHVybmVkLCB1bmxlc3MgYVBhdGggaXMgYVxuICogICBzY2hlbWUtcmVsYXRpdmUgVVJMOiBUaGVuIHRoZSBzY2hlbWUgb2YgYVJvb3QsIGlmIGFueSwgaXMgcHJlcGVuZGVkXG4gKiAgIGZpcnN0LlxuICogLSBPdGhlcndpc2UgYVBhdGggaXMgYSBwYXRoLiBJZiBhUm9vdCBpcyBhIFVSTCwgdGhlbiBpdHMgcGF0aCBwb3J0aW9uXG4gKiAgIGlzIHVwZGF0ZWQgd2l0aCB0aGUgcmVzdWx0IGFuZCBhUm9vdCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlIHRoZSByZXN1bHRcbiAqICAgaXMgcmV0dXJuZWQuXG4gKiAgIC0gSWYgYVBhdGggaXMgYWJzb2x1dGUsIHRoZSByZXN1bHQgaXMgYVBhdGguXG4gKiAgIC0gT3RoZXJ3aXNlIHRoZSB0d28gcGF0aHMgYXJlIGpvaW5lZCB3aXRoIGEgc2xhc2guXG4gKiAtIEpvaW5pbmcgZm9yIGV4YW1wbGUgJ2h0dHA6Ly8nIGFuZCAnd3d3LmV4YW1wbGUuY29tJyBpcyBhbHNvIHN1cHBvcnRlZC5cbiAqL1xuZnVuY3Rpb24gam9pbihhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuICBpZiAoYVBhdGggPT09IFwiXCIpIHtcbiAgICBhUGF0aCA9IFwiLlwiO1xuICB9XG4gIHZhciBhUGF0aFVybCA9IHVybFBhcnNlKGFQYXRoKTtcbiAgdmFyIGFSb290VXJsID0gdXJsUGFyc2UoYVJvb3QpO1xuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdCA9IGFSb290VXJsLnBhdGggfHwgJy8nO1xuICB9XG5cbiAgLy8gYGpvaW4oZm9vLCAnLy93d3cuZXhhbXBsZS5vcmcnKWBcbiAgaWYgKGFQYXRoVXJsICYmICFhUGF0aFVybC5zY2hlbWUpIHtcbiAgICBpZiAoYVJvb3RVcmwpIHtcbiAgICAgIGFQYXRoVXJsLnNjaGVtZSA9IGFSb290VXJsLnNjaGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFQYXRoVXJsKTtcbiAgfVxuXG4gIGlmIChhUGF0aFVybCB8fCBhUGF0aC5tYXRjaChkYXRhVXJsUmVnZXhwKSkge1xuICAgIHJldHVybiBhUGF0aDtcbiAgfVxuXG4gIC8vIGBqb2luKCdodHRwOi8vJywgJ3d3dy5leGFtcGxlLmNvbScpYFxuICBpZiAoYVJvb3RVcmwgJiYgIWFSb290VXJsLmhvc3QgJiYgIWFSb290VXJsLnBhdGgpIHtcbiAgICBhUm9vdFVybC5ob3N0ID0gYVBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgfVxuXG4gIHZhciBqb2luZWQgPSBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJ1xuICAgID8gYVBhdGhcbiAgICA6IG5vcm1hbGl6ZShhUm9vdC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIGFQYXRoKTtcblxuICBpZiAoYVJvb3RVcmwpIHtcbiAgICBhUm9vdFVybC5wYXRoID0gam9pbmVkO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cbiAgcmV0dXJuIGpvaW5lZDtcbn1cbmV4cG9ydHMuam9pbiA9IGpvaW47XG5cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIChhUGF0aCkge1xuICByZXR1cm4gYVBhdGguY2hhckF0KDApID09PSAnLycgfHwgdXJsUmVnZXhwLnRlc3QoYVBhdGgpO1xufTtcblxuLyoqXG4gKiBNYWtlIGEgcGF0aCByZWxhdGl2ZSB0byBhIFVSTCBvciBhbm90aGVyIHBhdGguXG4gKlxuICogQHBhcmFtIGFSb290IFRoZSByb290IHBhdGggb3IgVVJMLlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIFVSTCB0byBiZSBtYWRlIHJlbGF0aXZlIHRvIGFSb290LlxuICovXG5mdW5jdGlvbiByZWxhdGl2ZShhUm9vdCwgYVBhdGgpIHtcbiAgaWYgKGFSb290ID09PSBcIlwiKSB7XG4gICAgYVJvb3QgPSBcIi5cIjtcbiAgfVxuXG4gIGFSb290ID0gYVJvb3QucmVwbGFjZSgvXFwvJC8sICcnKTtcblxuICAvLyBJdCBpcyBwb3NzaWJsZSBmb3IgdGhlIHBhdGggdG8gYmUgYWJvdmUgdGhlIHJvb3QuIEluIHRoaXMgY2FzZSwgc2ltcGx5XG4gIC8vIGNoZWNraW5nIHdoZXRoZXIgdGhlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlIHBhdGggd29uJ3Qgd29yay4gSW5zdGVhZCwgd2VcbiAgLy8gbmVlZCB0byByZW1vdmUgY29tcG9uZW50cyBmcm9tIHRoZSByb290IG9uZSBieSBvbmUsIHVudGlsIGVpdGhlciB3ZSBmaW5kXG4gIC8vIGEgcHJlZml4IHRoYXQgZml0cywgb3Igd2UgcnVuIG91dCBvZiBjb21wb25lbnRzIHRvIHJlbW92ZS5cbiAgdmFyIGxldmVsID0gMDtcbiAgd2hpbGUgKGFQYXRoLmluZGV4T2YoYVJvb3QgKyAnLycpICE9PSAwKSB7XG4gICAgdmFyIGluZGV4ID0gYVJvb3QubGFzdEluZGV4T2YoXCIvXCIpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgb25seSBwYXJ0IG9mIHRoZSByb290IHRoYXQgaXMgbGVmdCBpcyB0aGUgc2NoZW1lIChpLmUuIGh0dHA6Ly8sXG4gICAgLy8gZmlsZTovLy8sIGV0Yy4pLCBvbmUgb3IgbW9yZSBzbGFzaGVzICgvKSwgb3Igc2ltcGx5IG5vdGhpbmcgYXQgYWxsLCB3ZVxuICAgIC8vIGhhdmUgZXhoYXVzdGVkIGFsbCBjb21wb25lbnRzLCBzbyB0aGUgcGF0aCBpcyBub3QgcmVsYXRpdmUgdG8gdGhlIHJvb3QuXG4gICAgYVJvb3QgPSBhUm9vdC5zbGljZSgwLCBpbmRleCk7XG4gICAgaWYgKGFSb290Lm1hdGNoKC9eKFteXFwvXSs6XFwvKT9cXC8qJC8pKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgKytsZXZlbDtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBhZGQgYSBcIi4uL1wiIGZvciBlYWNoIGNvbXBvbmVudCB3ZSByZW1vdmVkIGZyb20gdGhlIHJvb3QuXG4gIHJldHVybiBBcnJheShsZXZlbCArIDEpLmpvaW4oXCIuLi9cIikgKyBhUGF0aC5zdWJzdHIoYVJvb3QubGVuZ3RoICsgMSk7XG59XG5leHBvcnRzLnJlbGF0aXZlID0gcmVsYXRpdmU7XG5cbnZhciBzdXBwb3J0c051bGxQcm90byA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gISgnX19wcm90b19fJyBpbiBvYmopO1xufSgpKTtcblxuZnVuY3Rpb24gaWRlbnRpdHkgKHMpIHtcbiAgcmV0dXJuIHM7XG59XG5cbi8qKlxuICogQmVjYXVzZSBiZWhhdmlvciBnb2VzIHdhY2t5IHdoZW4geW91IHNldCBgX19wcm90b19fYCBvbiBvYmplY3RzLCB3ZVxuICogaGF2ZSB0byBwcmVmaXggYWxsIHRoZSBzdHJpbmdzIGluIG91ciBzZXQgd2l0aCBhbiBhcmJpdHJhcnkgY2hhcmFjdGVyLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL3B1bGwvMzEgYW5kXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2lzc3Vlcy8zMFxuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5mdW5jdGlvbiB0b1NldFN0cmluZyhhU3RyKSB7XG4gIGlmIChpc1Byb3RvU3RyaW5nKGFTdHIpKSB7XG4gICAgcmV0dXJuICckJyArIGFTdHI7XG4gIH1cblxuICByZXR1cm4gYVN0cjtcbn1cbmV4cG9ydHMudG9TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogdG9TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGZyb21TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiBhU3RyLnNsaWNlKDEpO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLmZyb21TZXRTdHJpbmcgPSBzdXBwb3J0c051bGxQcm90byA/IGlkZW50aXR5IDogZnJvbVNldFN0cmluZztcblxuZnVuY3Rpb24gaXNQcm90b1N0cmluZyhzKSB7XG4gIGlmICghcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBzLmxlbmd0aDtcblxuICBpZiAobGVuZ3RoIDwgOSAvKiBcIl9fcHJvdG9fX1wiLmxlbmd0aCAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMSkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAyKSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDMpICE9PSAxMTEgLyogJ28nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNCkgIT09IDExNiAvKiAndCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA1KSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDYpICE9PSAxMTQgLyogJ3InICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNykgIT09IDExMiAvKiAncCcgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA4KSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDkpICE9PSA5NSAgLyogJ18nICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IGxlbmd0aCAtIDEwOyBpID49IDA7IGktLSkge1xuICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgIT09IDM2IC8qICckJyAqLykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2hlcmUgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBvcmlnaW5hbCBzb3VyY2UvbGluZS9jb2x1bW4sIGJ1dCBkaWZmZXJlbnQgZ2VuZXJhdGVkXG4gKiBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYSBtYXBwaW5nIHdpdGggYVxuICogc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gIHZhciBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zID0gY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnM7XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGRlZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBpbmRpY2VzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKlxuICogT3B0aW9uYWxseSBwYXNzIGluIGB0cnVlYCBhcyBgb25seUNvbXBhcmVHZW5lcmF0ZWRgIHRvIGNvbnNpZGVyIHR3b1xuICogbWFwcGluZ3Mgd2l0aCB0aGUgc2FtZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uLCBidXQgZGlmZmVyZW50XG4gKiBzb3VyY2UvbmFtZS9vcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gdGhlIHNhbWUuIFVzZWZ1bCB3aGVuIHNlYXJjaGluZyBmb3IgYVxuICogbWFwcGluZyB3aXRoIGEgc3R1YmJlZCBvdXQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCLCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwIHx8IG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZDtcblxuZnVuY3Rpb24gc3RyY21wKGFTdHIxLCBhU3RyMikge1xuICBpZiAoYVN0cjEgPT09IGFTdHIyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZiAoYVN0cjEgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMTsgLy8gYVN0cjIgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMiA9PT0gbnVsbCkge1xuICAgIHJldHVybiAtMTsgLy8gYVN0cjEgIT09IG51bGxcbiAgfVxuXG4gIGlmIChhU3RyMSA+IGFTdHIyKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aXRoIGluZmxhdGVkIHNvdXJjZSBhbmQgbmFtZSBzdHJpbmdzIHdoZXJlXG4gKiB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucyBhcmUgY29tcGFyZWQuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICB2YXIgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uIC0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQgPSBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZDtcblxuLyoqXG4gKiBTdHJpcCBhbnkgSlNPTiBYU1NJIGF2b2lkYW5jZSBwcmVmaXggZnJvbSB0aGUgc3RyaW5nIChhcyBkb2N1bWVudGVkXG4gKiBpbiB0aGUgc291cmNlIG1hcHMgc3BlY2lmaWNhdGlvbiksIGFuZCB0aGVuIHBhcnNlIHRoZSBzdHJpbmcgYXNcbiAqIEpTT04uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU291cmNlTWFwSW5wdXQoc3RyKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKHN0ci5yZXBsYWNlKC9eXFwpXX0nW15cXG5dKlxcbi8sICcnKSk7XG59XG5leHBvcnRzLnBhcnNlU291cmNlTWFwSW5wdXQgPSBwYXJzZVNvdXJjZU1hcElucHV0O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIFVSTCBvZiBhIHNvdXJjZSBnaXZlbiB0aGUgdGhlIHNvdXJjZSByb290LCB0aGUgc291cmNlJ3NcbiAqIFVSTCwgYW5kIHRoZSBzb3VyY2UgbWFwJ3MgVVJMLlxuICovXG5mdW5jdGlvbiBjb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKSB7XG4gIHNvdXJjZVVSTCA9IHNvdXJjZVVSTCB8fCAnJztcblxuICBpZiAoc291cmNlUm9vdCkge1xuICAgIC8vIFRoaXMgZm9sbG93cyB3aGF0IENocm9tZSBkb2VzLlxuICAgIGlmIChzb3VyY2VSb290W3NvdXJjZVJvb3QubGVuZ3RoIC0gMV0gIT09ICcvJyAmJiBzb3VyY2VVUkxbMF0gIT09ICcvJykge1xuICAgICAgc291cmNlUm9vdCArPSAnLyc7XG4gICAgfVxuICAgIC8vIFRoZSBzcGVjIHNheXM6XG4gICAgLy8gICBMaW5lIDQ6IEFuIG9wdGlvbmFsIHNvdXJjZSByb290LCB1c2VmdWwgZm9yIHJlbG9jYXRpbmcgc291cmNlXG4gICAgLy8gICBmaWxlcyBvbiBhIHNlcnZlciBvciByZW1vdmluZyByZXBlYXRlZCB2YWx1ZXMgaW4gdGhlXG4gICAgLy8gICDigJxzb3VyY2Vz4oCdIGVudHJ5LiAgVGhpcyB2YWx1ZSBpcyBwcmVwZW5kZWQgdG8gdGhlIGluZGl2aWR1YWxcbiAgICAvLyAgIGVudHJpZXMgaW4gdGhlIOKAnHNvdXJjZeKAnSBmaWVsZC5cbiAgICBzb3VyY2VVUkwgPSBzb3VyY2VSb290ICsgc291cmNlVVJMO1xuICB9XG5cbiAgLy8gSGlzdG9yaWNhbGx5LCBTb3VyY2VNYXBDb25zdW1lciBkaWQgbm90IHRha2UgdGhlIHNvdXJjZU1hcFVSTCBhc1xuICAvLyBhIHBhcmFtZXRlci4gIFRoaXMgbW9kZSBpcyBzdGlsbCBzb21ld2hhdCBzdXBwb3J0ZWQsIHdoaWNoIGlzIHdoeVxuICAvLyB0aGlzIGNvZGUgYmxvY2sgaXMgY29uZGl0aW9uYWwuICBIb3dldmVyLCBpdCdzIHByZWZlcmFibGUgdG8gcGFzc1xuICAvLyB0aGUgc291cmNlIG1hcCBVUkwgdG8gU291cmNlTWFwQ29uc3VtZXIsIHNvIHRoYXQgdGhpcyBmdW5jdGlvblxuICAvLyBjYW4gaW1wbGVtZW50IHRoZSBzb3VyY2UgVVJMIHJlc29sdXRpb24gYWxnb3JpdGhtIGFzIG91dGxpbmVkIGluXG4gIC8vIHRoZSBzcGVjLiAgVGhpcyBibG9jayBpcyBiYXNpY2FsbHkgdGhlIGVxdWl2YWxlbnQgb2Y6XG4gIC8vICAgIG5ldyBVUkwoc291cmNlVVJMLCBzb3VyY2VNYXBVUkwpLnRvU3RyaW5nKClcbiAgLy8gLi4uIGV4Y2VwdCBpdCBhdm9pZHMgdXNpbmcgVVJMLCB3aGljaCB3YXNuJ3QgYXZhaWxhYmxlIGluIHRoZVxuICAvLyBvbGRlciByZWxlYXNlcyBvZiBub2RlIHN0aWxsIHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnkuXG4gIC8vXG4gIC8vIFRoZSBzcGVjIHNheXM6XG4gIC8vICAgSWYgdGhlIHNvdXJjZXMgYXJlIG5vdCBhYnNvbHV0ZSBVUkxzIGFmdGVyIHByZXBlbmRpbmcgb2YgdGhlXG4gIC8vICAg4oCcc291cmNlUm9vdOKAnSwgdGhlIHNvdXJjZXMgYXJlIHJlc29sdmVkIHJlbGF0aXZlIHRvIHRoZVxuICAvLyAgIFNvdXJjZU1hcCAobGlrZSByZXNvbHZpbmcgc2NyaXB0IHNyYyBpbiBhIGh0bWwgZG9jdW1lbnQpLlxuICBpZiAoc291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHBhcnNlZCA9IHVybFBhcnNlKHNvdXJjZU1hcFVSTCk7XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInNvdXJjZU1hcFVSTCBjb3VsZCBub3QgYmUgcGFyc2VkXCIpO1xuICAgIH1cbiAgICBpZiAocGFyc2VkLnBhdGgpIHtcbiAgICAgIC8vIFN0cmlwIHRoZSBsYXN0IHBhdGggY29tcG9uZW50LCBidXQga2VlcCB0aGUgXCIvXCIuXG4gICAgICB2YXIgaW5kZXggPSBwYXJzZWQucGF0aC5sYXN0SW5kZXhPZignLycpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgcGFyc2VkLnBhdGggPSBwYXJzZWQucGF0aC5zdWJzdHJpbmcoMCwgaW5kZXggKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlVVJMID0gam9pbih1cmxHZW5lcmF0ZShwYXJzZWQpLCBzb3VyY2VVUkwpO1xuICB9XG5cbiAgcmV0dXJuIG5vcm1hbGl6ZShzb3VyY2VVUkwpO1xufVxuZXhwb3J0cy5jb21wdXRlU291cmNlVVJMID0gY29tcHV0ZVNvdXJjZVVSTDtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc05hdGl2ZU1hcCA9IHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCI7XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBpcyBhIGNvbWJpbmF0aW9uIG9mIGFuIGFycmF5IGFuZCBhIHNldC4gQWRkaW5nIGEgbmV3XG4gKiBtZW1iZXIgaXMgTygxKSwgdGVzdGluZyBmb3IgbWVtYmVyc2hpcCBpcyBPKDEpLCBhbmQgZmluZGluZyB0aGUgaW5kZXggb2YgYW5cbiAqIGVsZW1lbnQgaXMgTygxKS4gUmVtb3ZpbmcgZWxlbWVudHMgZnJvbSB0aGUgc2V0IGlzIG5vdCBzdXBwb3J0ZWQuIE9ubHlcbiAqIHN0cmluZ3MgYXJlIHN1cHBvcnRlZCBmb3IgbWVtYmVyc2hpcC5cbiAqL1xuZnVuY3Rpb24gQXJyYXlTZXQoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NldCA9IGhhc05hdGl2ZU1hcCA/IG5ldyBNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgQXJyYXlTZXQgaW5zdGFuY2VzIGZyb20gYW4gZXhpc3RpbmcgYXJyYXkuXG4gKi9cbkFycmF5U2V0LmZyb21BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X2Zyb21BcnJheShhQXJyYXksIGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgdmFyIHNldCA9IG5ldyBBcnJheVNldCgpO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYUFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc2V0LmFkZChhQXJyYXlbaV0sIGFBbGxvd0R1cGxpY2F0ZXMpO1xuICB9XG4gIHJldHVybiBzZXQ7XG59O1xuXG4vKipcbiAqIFJldHVybiBob3cgbWFueSB1bmlxdWUgaXRlbXMgYXJlIGluIHRoaXMgQXJyYXlTZXQuIElmIGR1cGxpY2F0ZXMgaGF2ZSBiZWVuXG4gKiBhZGRlZCwgdGhhbiB0aG9zZSBkbyBub3QgY291bnQgdG93YXJkcyB0aGUgc2l6ZS5cbiAqXG4gKiBAcmV0dXJucyBOdW1iZXJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiBBcnJheVNldF9zaXplKCkge1xuICByZXR1cm4gaGFzTmF0aXZlTWFwID8gdGhpcy5fc2V0LnNpemUgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9zZXQpLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzdHJpbmcgdG8gdGhpcyBzZXQuXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBBcnJheVNldF9hZGQoYVN0ciwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc1N0ciA9IGhhc05hdGl2ZU1hcCA/IGFTdHIgOiB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICB2YXIgaXNEdXBsaWNhdGUgPSBoYXNOYXRpdmVNYXAgPyB0aGlzLmhhcyhhU3RyKSA6IGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cik7XG4gIHZhciBpZHggPSB0aGlzLl9hcnJheS5sZW5ndGg7XG4gIGlmICghaXNEdXBsaWNhdGUgfHwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIHRoaXMuX2FycmF5LnB1c2goYVN0cik7XG4gIH1cbiAgaWYgKCFpc0R1cGxpY2F0ZSkge1xuICAgIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICAgIHRoaXMuX3NldC5zZXQoYVN0ciwgaWR4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2V0W3NTdHJdID0gaWR4O1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJcyB0aGUgZ2l2ZW4gc3RyaW5nIGEgbWVtYmVyIG9mIHRoaXMgc2V0P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gQXJyYXlTZXRfaGFzKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHJldHVybiB0aGlzLl9zZXQuaGFzKGFTdHIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICByZXR1cm4gaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gc3RyaW5nIGluIHRoZSBhcnJheT9cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBBcnJheVNldF9pbmRleE9mKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHZhciBpZHggPSB0aGlzLl9zZXQuZ2V0KGFTdHIpO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc1N0ciA9IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRbc1N0cl07XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU3RyICsgJ1wiIGlzIG5vdCBpbiB0aGUgc2V0LicpO1xufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleD9cbiAqXG4gKiBAcGFyYW0gTnVtYmVyIGFJZHhcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gQXJyYXlTZXRfYXQoYUlkeCkge1xuICBpZiAoYUlkeCA+PSAwICYmIGFJZHggPCB0aGlzLl9hcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbYUlkeF07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IGluZGV4ZWQgYnkgJyArIGFJZHgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNldCAod2hpY2ggaGFzIHRoZSBwcm9wZXIgaW5kaWNlc1xuICogaW5kaWNhdGVkIGJ5IGluZGV4T2YpLiBOb3RlIHRoYXQgdGhpcyBpcyBhIGNvcHkgb2YgdGhlIGludGVybmFsIGFycmF5IHVzZWRcbiAqIGZvciBzdG9yaW5nIHRoZSBtZW1iZXJzIHNvIHRoYXQgbm8gb25lIGNhbiBtZXNzIHdpdGggaW50ZXJuYWwgc3RhdGUuXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfdG9BcnJheSgpIHtcbiAgcmV0dXJuIHRoaXMuX2FycmF5LnNsaWNlKCk7XG59O1xuXG5leHBvcnRzLkFycmF5U2V0ID0gQXJyYXlTZXQ7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTQgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgbWFwcGluZ0IgaXMgYWZ0ZXIgbWFwcGluZ0Egd2l0aCByZXNwZWN0IHRvIGdlbmVyYXRlZFxuICogcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gIC8vIE9wdGltaXplZCBmb3IgbW9zdCBjb21tb24gY2FzZVxuICB2YXIgbGluZUEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgbGluZUIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgY29sdW1uQSA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbjtcbiAgdmFyIGNvbHVtbkIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIHJldHVybiBsaW5lQiA+IGxpbmVBIHx8IGxpbmVCID09IGxpbmVBICYmIGNvbHVtbkIgPj0gY29sdW1uQSB8fFxuICAgICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIDw9IDA7XG59XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB0byBwcm92aWRlIGEgc29ydGVkIHZpZXcgb2YgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gYVxuICogcGVyZm9ybWFuY2UgY29uc2Npb3VzIG1hbm5lci4gSXQgdHJhZGVzIGEgbmVnbGliYWJsZSBvdmVyaGVhZCBpbiBnZW5lcmFsXG4gKiBjYXNlIGZvciBhIGxhcmdlIHNwZWVkdXAgaW4gY2FzZSBvZiBtYXBwaW5ncyBiZWluZyBhZGRlZCBpbiBvcmRlci5cbiAqL1xuZnVuY3Rpb24gTWFwcGluZ0xpc3QoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIC8vIFNlcnZlcyBhcyBpbmZpbXVtXG4gIHRoaXMuX2xhc3QgPSB7Z2VuZXJhdGVkTGluZTogLTEsIGdlbmVyYXRlZENvbHVtbjogMH07XG59XG5cbi8qKlxuICogSXRlcmF0ZSB0aHJvdWdoIGludGVybmFsIGl0ZW1zLiBUaGlzIG1ldGhvZCB0YWtlcyB0aGUgc2FtZSBhcmd1bWVudHMgdGhhdFxuICogYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCB0YWtlcy5cbiAqXG4gKiBOT1RFOiBUaGUgb3JkZXIgb2YgdGhlIG1hcHBpbmdzIGlzIE5PVCBndWFyYW50ZWVkLlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudW5zb3J0ZWRGb3JFYWNoID1cbiAgZnVuY3Rpb24gTWFwcGluZ0xpc3RfZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKSB7XG4gICAgdGhpcy5fYXJyYXkuZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKTtcbiAgfTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHNvdXJjZSBtYXBwaW5nLlxuICpcbiAqIEBwYXJhbSBPYmplY3QgYU1hcHBpbmdcbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2FkZChhTWFwcGluZykge1xuICBpZiAoZ2VuZXJhdGVkUG9zaXRpb25BZnRlcih0aGlzLl9sYXN0LCBhTWFwcGluZykpIHtcbiAgICB0aGlzLl9sYXN0ID0gYU1hcHBpbmc7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fc29ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmxhdCwgc29ydGVkIGFycmF5IG9mIG1hcHBpbmdzLiBUaGUgbWFwcGluZ3MgYXJlIHNvcnRlZCBieVxuICogZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICpcbiAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHJldHVybnMgaW50ZXJuYWwgZGF0YSB3aXRob3V0IGNvcHlpbmcsIGZvclxuICogcGVyZm9ybWFuY2UuIFRoZSByZXR1cm4gdmFsdWUgbXVzdCBOT1QgYmUgbXV0YXRlZCwgYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzXG4gKiBhbiBpbW11dGFibGUgYm9ycm93LiBJZiB5b3Ugd2FudCB0byB0YWtlIG93bmVyc2hpcCwgeW91IG11c3QgbWFrZSB5b3VyIG93blxuICogY29weS5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF90b0FycmF5KCkge1xuICBpZiAoIXRoaXMuX3NvcnRlZCkge1xuICAgIHRoaXMuX2FycmF5LnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCk7XG4gICAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdGhpcy5fYXJyYXk7XG59O1xuXG5leHBvcnRzLk1hcHBpbmdMaXN0ID0gTWFwcGluZ0xpc3Q7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBiYXNlNjRWTFEgPSByZXF1aXJlKCcuL2Jhc2U2NC12bHEnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xudmFyIE1hcHBpbmdMaXN0ID0gcmVxdWlyZSgnLi9tYXBwaW5nLWxpc3QnKS5NYXBwaW5nTGlzdDtcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGUgU291cmNlTWFwR2VuZXJhdG9yIHJlcHJlc2VudHMgYSBzb3VyY2UgbWFwIHdoaWNoIGlzXG4gKiBiZWluZyBidWlsdCBpbmNyZW1lbnRhbGx5LiBZb3UgbWF5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZ1xuICogcHJvcGVydGllczpcbiAqXG4gKiAgIC0gZmlsZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICogICAtIHNvdXJjZVJvb3Q6IEEgcm9vdCBmb3IgYWxsIHJlbGF0aXZlIFVSTHMgaW4gdGhpcyBzb3VyY2UgbWFwLlxuICovXG5mdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3IoYUFyZ3MpIHtcbiAgaWYgKCFhQXJncykge1xuICAgIGFBcmdzID0ge307XG4gIH1cbiAgdGhpcy5fZmlsZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZmlsZScsIG51bGwpO1xuICB0aGlzLl9zb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2VSb290JywgbnVsbCk7XG4gIHRoaXMuX3NraXBWYWxpZGF0aW9uID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdza2lwVmFsaWRhdGlvbicsIGZhbHNlKTtcbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9tYXBwaW5ncyA9IG5ldyBNYXBwaW5nTGlzdCgpO1xuICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xufVxuXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNvdXJjZU1hcEdlbmVyYXRvciBiYXNlZCBvbiBhIFNvdXJjZU1hcENvbnN1bWVyXG4gKlxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IuZnJvbVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lcikge1xuICAgIHZhciBzb3VyY2VSb290ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZVJvb3Q7XG4gICAgdmFyIGdlbmVyYXRvciA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3Ioe1xuICAgICAgZmlsZTogYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUsXG4gICAgICBzb3VyY2VSb290OiBzb3VyY2VSb290XG4gICAgfSk7XG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICB2YXIgbmV3TWFwcGluZyA9IHtcbiAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSBtYXBwaW5nLnNvdXJjZTtcbiAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBuZXdNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdNYXBwaW5nLm9yaWdpbmFsID0ge1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcubmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBnZW5lcmF0b3IuYWRkTWFwcGluZyhuZXdNYXBwaW5nKTtcbiAgICB9KTtcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgc291cmNlUmVsYXRpdmUgPSBzb3VyY2VGaWxlO1xuICAgICAgaWYgKHNvdXJjZVJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgc291cmNlUmVsYXRpdmUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdlbmVyYXRvci5fc291cmNlcy5oYXMoc291cmNlUmVsYXRpdmUpKSB7XG4gICAgICAgIGdlbmVyYXRvci5fc291cmNlcy5hZGQoc291cmNlUmVsYXRpdmUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBnZW5lcmF0b3Iuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9O1xuXG4vKipcbiAqIEFkZCBhIHNpbmdsZSBtYXBwaW5nIGZyb20gb3JpZ2luYWwgc291cmNlIGxpbmUgYW5kIGNvbHVtbiB0byB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gZm9yIHRoaXMgc291cmNlIG1hcCBiZWluZyBjcmVhdGVkLiBUaGUgbWFwcGluZ1xuICogb2JqZWN0IHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gZ2VuZXJhdGVkOiBBbiBvYmplY3Qgd2l0aCB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMuXG4gKiAgIC0gb3JpZ2luYWw6IEFuIG9iamVjdCB3aXRoIHRoZSBvcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIChyZWxhdGl2ZSB0byB0aGUgc291cmNlUm9vdCkuXG4gKiAgIC0gbmFtZTogQW4gb3B0aW9uYWwgb3JpZ2luYWwgdG9rZW4gbmFtZSBmb3IgdGhpcyBtYXBwaW5nLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFkZE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYWRkTWFwcGluZyhhQXJncykge1xuICAgIHZhciBnZW5lcmF0ZWQgPSB1dGlsLmdldEFyZyhhQXJncywgJ2dlbmVyYXRlZCcpO1xuICAgIHZhciBvcmlnaW5hbCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnb3JpZ2luYWwnLCBudWxsKTtcbiAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnLCBudWxsKTtcbiAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbmFtZScsIG51bGwpO1xuXG4gICAgaWYgKCF0aGlzLl9za2lwVmFsaWRhdGlvbikge1xuICAgICAgdGhpcy5fdmFsaWRhdGVNYXBwaW5nKGdlbmVyYXRlZCwgb3JpZ2luYWwsIHNvdXJjZSwgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSBTdHJpbmcoc291cmNlKTtcbiAgICAgIGlmICghdGhpcy5fc291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICB0aGlzLl9zb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgICBpZiAoIXRoaXMuX25hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fbWFwcGluZ3MuYWRkKHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uLFxuICAgICAgb3JpZ2luYWxMaW5lOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmxpbmUsXG4gICAgICBvcmlnaW5hbENvbHVtbjogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5jb2x1bW4sXG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIG5hbWU6IG5hbWVcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICB2YXIgc291cmNlID0gYVNvdXJjZUZpbGU7XG4gICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLl9zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgIH1cblxuICAgIGlmIChhU291cmNlQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAvLyBBZGQgdGhlIHNvdXJjZSBjb250ZW50IHRvIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIENyZWF0ZSBhIG5ldyBfc291cmNlc0NvbnRlbnRzIG1hcCBpZiB0aGUgcHJvcGVydHkgaXMgbnVsbC5cbiAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXSA9IGFTb3VyY2VDb250ZW50O1xuICAgIH0gZWxzZSBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHNvdXJjZSBmaWxlIGZyb20gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gSWYgdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwIGlzIGVtcHR5LCBzZXQgdGhlIHByb3BlcnR5IHRvIG51bGwuXG4gICAgICBkZWxldGUgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV07XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fc291cmNlc0NvbnRlbnRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQXBwbGllcyB0aGUgbWFwcGluZ3Mgb2YgYSBzdWItc291cmNlLW1hcCBmb3IgYSBzcGVjaWZpYyBzb3VyY2UgZmlsZSB0byB0aGVcbiAqIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkLiBFYWNoIG1hcHBpbmcgdG8gdGhlIHN1cHBsaWVkIHNvdXJjZSBmaWxlIGlzXG4gKiByZXdyaXR0ZW4gdXNpbmcgdGhlIHN1cHBsaWVkIHNvdXJjZSBtYXAuIE5vdGU6IFRoZSByZXNvbHV0aW9uIGZvciB0aGVcbiAqIHJlc3VsdGluZyBtYXBwaW5ncyBpcyB0aGUgbWluaW1pdW0gb2YgdGhpcyBtYXAgYW5kIHRoZSBzdXBwbGllZCBtYXAuXG4gKlxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkLlxuICogQHBhcmFtIGFTb3VyY2VGaWxlIE9wdGlvbmFsLiBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlLlxuICogICAgICAgIElmIG9taXR0ZWQsIFNvdXJjZU1hcENvbnN1bWVyJ3MgZmlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVzZWQuXG4gKiBAcGFyYW0gYVNvdXJjZU1hcFBhdGggT3B0aW9uYWwuIFRoZSBkaXJuYW1lIG9mIHRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgbWFwXG4gKiAgICAgICAgdG8gYmUgYXBwbGllZC4gSWYgcmVsYXRpdmUsIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBDb25zdW1lci5cbiAqICAgICAgICBUaGlzIHBhcmFtZXRlciBpcyBuZWVkZWQgd2hlbiB0aGUgdHdvIHNvdXJjZSBtYXBzIGFyZW4ndCBpbiB0aGUgc2FtZVxuICogICAgICAgIGRpcmVjdG9yeSwgYW5kIHRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQgY29udGFpbnMgcmVsYXRpdmUgc291cmNlXG4gKiAgICAgICAgcGF0aHMuIElmIHNvLCB0aG9zZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbmVlZCB0byBiZSByZXdyaXR0ZW5cbiAqICAgICAgICByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwR2VuZXJhdG9yLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FwcGx5U291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lciwgYVNvdXJjZUZpbGUsIGFTb3VyY2VNYXBQYXRoKSB7XG4gICAgdmFyIHNvdXJjZUZpbGUgPSBhU291cmNlRmlsZTtcbiAgICAvLyBJZiBhU291cmNlRmlsZSBpcyBvbWl0dGVkLCB3ZSB3aWxsIHVzZSB0aGUgZmlsZSBwcm9wZXJ0eSBvZiB0aGUgU291cmNlTWFwXG4gICAgaWYgKGFTb3VyY2VGaWxlID09IG51bGwpIHtcbiAgICAgIGlmIChhU291cmNlTWFwQ29uc3VtZXIuZmlsZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCByZXF1aXJlcyBlaXRoZXIgYW4gZXhwbGljaXQgc291cmNlIGZpbGUsICcgK1xuICAgICAgICAgICdvciB0aGUgc291cmNlIG1hcFxcJ3MgXCJmaWxlXCIgcHJvcGVydHkuIEJvdGggd2VyZSBvbWl0dGVkLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHNvdXJjZUZpbGUgPSBhU291cmNlTWFwQ29uc3VtZXIuZmlsZTtcbiAgICB9XG4gICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgIC8vIE1ha2UgXCJzb3VyY2VGaWxlXCIgcmVsYXRpdmUgaWYgYW4gYWJzb2x1dGUgVXJsIGlzIHBhc3NlZC5cbiAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICB9XG4gICAgLy8gQXBwbHlpbmcgdGhlIFNvdXJjZU1hcCBjYW4gYWRkIGFuZCByZW1vdmUgaXRlbXMgZnJvbSB0aGUgc291cmNlcyBhbmRcbiAgICAvLyB0aGUgbmFtZXMgYXJyYXkuXG4gICAgdmFyIG5ld1NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICB2YXIgbmV3TmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcblxuICAgIC8vIEZpbmQgbWFwcGluZ3MgZm9yIHRoZSBcInNvdXJjZUZpbGVcIlxuICAgIHRoaXMuX21hcHBpbmdzLnVuc29ydGVkRm9yRWFjaChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBzb3VyY2VGaWxlICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lICE9IG51bGwpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgY2FuIGJlIG1hcHBlZCBieSB0aGUgc291cmNlIG1hcCwgdGhlbiB1cGRhdGUgdGhlIG1hcHBpbmcuXG4gICAgICAgIHZhciBvcmlnaW5hbCA9IGFTb3VyY2VNYXBDb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENvcHkgbWFwcGluZ1xuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgbWFwcGluZy5zb3VyY2UpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gb3JpZ2luYWwuY29sdW1uO1xuICAgICAgICAgIGlmIChvcmlnaW5hbC5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZTtcbiAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiAhbmV3U291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICBuZXdTb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgIGlmIChuYW1lICE9IG51bGwgJiYgIW5ld05hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICBuZXdOYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG5cbiAgICB9LCB0aGlzKTtcbiAgICB0aGlzLl9zb3VyY2VzID0gbmV3U291cmNlcztcbiAgICB0aGlzLl9uYW1lcyA9IG5ld05hbWVzO1xuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudHMgb2YgYXBwbGllZCBtYXAuXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEEgbWFwcGluZyBjYW4gaGF2ZSBvbmUgb2YgdGhlIHRocmVlIGxldmVscyBvZiBkYXRhOlxuICpcbiAqICAgMS4gSnVzdCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICogICAyLiBUaGUgR2VuZXJhdGVkIHBvc2l0aW9uLCBvcmlnaW5hbCBwb3NpdGlvbiwgYW5kIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgMy4gR2VuZXJhdGVkIGFuZCBvcmlnaW5hbCBwb3NpdGlvbiwgb3JpZ2luYWwgc291cmNlLCBhcyB3ZWxsIGFzIGEgbmFtZVxuICogICAgICB0b2tlbi5cbiAqXG4gKiBUbyBtYWludGFpbiBjb25zaXN0ZW5jeSwgd2UgdmFsaWRhdGUgdGhhdCBhbnkgbmV3IG1hcHBpbmcgYmVpbmcgYWRkZWQgZmFsbHNcbiAqIGluIHRvIG9uZSBvZiB0aGVzZSBjYXRlZ29yaWVzLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0ZU1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdmFsaWRhdGVNYXBwaW5nKGFHZW5lcmF0ZWQsIGFPcmlnaW5hbCwgYVNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhTmFtZSkge1xuICAgIC8vIFdoZW4gYU9yaWdpbmFsIGlzIHRydXRoeSBidXQgaGFzIGVtcHR5IHZhbHVlcyBmb3IgLmxpbmUgYW5kIC5jb2x1bW4sXG4gICAgLy8gaXQgaXMgbW9zdCBsaWtlbHkgYSBwcm9ncmFtbWVyIGVycm9yLiBJbiB0aGlzIGNhc2Ugd2UgdGhyb3cgYSB2ZXJ5XG4gICAgLy8gc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSB0byB0cnkgdG8gZ3VpZGUgdGhlbSB0aGUgcmlnaHQgd2F5LlxuICAgIC8vIEZvciBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyLWJ1bmRsZXIvcHVsbC81MTlcbiAgICBpZiAoYU9yaWdpbmFsICYmIHR5cGVvZiBhT3JpZ2luYWwubGluZSAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGFPcmlnaW5hbC5jb2x1bW4gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdvcmlnaW5hbC5saW5lIGFuZCBvcmlnaW5hbC5jb2x1bW4gYXJlIG5vdCBudW1iZXJzIC0tIHlvdSBwcm9iYWJseSBtZWFudCB0byBvbWl0ICcgK1xuICAgICAgICAgICAgJ3RoZSBvcmlnaW5hbCBtYXBwaW5nIGVudGlyZWx5IGFuZCBvbmx5IG1hcCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLiBJZiBzbywgcGFzcyAnICtcbiAgICAgICAgICAgICdudWxsIGZvciB0aGUgb3JpZ2luYWwgbWFwcGluZyBpbnN0ZWFkIG9mIGFuIG9iamVjdCB3aXRoIGVtcHR5IG9yIG51bGwgdmFsdWVzLidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAmJiAhYU9yaWdpbmFsICYmICFhU291cmNlICYmICFhTmFtZSkge1xuICAgICAgLy8gQ2FzZSAxLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgICAgICAmJiBhT3JpZ2luYWwgJiYgJ2xpbmUnIGluIGFPcmlnaW5hbCAmJiAnY29sdW1uJyBpbiBhT3JpZ2luYWxcbiAgICAgICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgICAgICAmJiBhT3JpZ2luYWwubGluZSA+IDAgJiYgYU9yaWdpbmFsLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYVNvdXJjZSkge1xuICAgICAgLy8gQ2FzZXMgMiBhbmQgMy5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWFwcGluZzogJyArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZ2VuZXJhdGVkOiBhR2VuZXJhdGVkLFxuICAgICAgICBzb3VyY2U6IGFTb3VyY2UsXG4gICAgICAgIG9yaWdpbmFsOiBhT3JpZ2luYWwsXG4gICAgICAgIG5hbWU6IGFOYW1lXG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gdG8gdGhlIHN0cmVhbSBvZiBiYXNlIDY0IFZMUXNcbiAqIHNwZWNpZmllZCBieSB0aGUgc291cmNlIG1hcCBmb3JtYXQuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3NlcmlhbGl6ZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NlcmlhbGl6ZU1hcHBpbmdzKCkge1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkTGluZSA9IDE7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdmFyIG5leHQ7XG4gICAgdmFyIG1hcHBpbmc7XG4gICAgdmFyIG5hbWVJZHg7XG4gICAgdmFyIHNvdXJjZUlkeDtcblxuICAgIHZhciBtYXBwaW5ncyA9IHRoaXMuX21hcHBpbmdzLnRvQXJyYXkoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG1hcHBpbmcgPSBtYXBwaW5nc1tpXTtcbiAgICAgIG5leHQgPSAnJ1xuXG4gICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICB3aGlsZSAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICBuZXh0ICs9ICc7JztcbiAgICAgICAgICBwcmV2aW91c0dlbmVyYXRlZExpbmUrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgIGlmICghdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nLCBtYXBwaW5nc1tpIC0gMV0pKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dCArPSAnLCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZUlkeCA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShzb3VyY2VJZHggLSBwcmV2aW91c1NvdXJjZSk7XG4gICAgICAgIHByZXZpb3VzU291cmNlID0gc291cmNlSWR4O1xuXG4gICAgICAgIC8vIGxpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZCBpbiBTb3VyY2VNYXAgc3BlYyB2ZXJzaW9uIDNcbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxMaW5lKTtcbiAgICAgICAgcHJldmlvdXNPcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDE7XG5cbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsQ29sdW1uKTtcbiAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmFtZUlkeCA9IHRoaXMuX25hbWVzLmluZGV4T2YobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobmFtZUlkeCAtIHByZXZpb3VzTmFtZSk7XG4gICAgICAgICAgcHJldmlvdXNOYW1lID0gbmFtZUlkeDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQgKz0gbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoYVNvdXJjZXMsIGFTb3VyY2VSb290KSB7XG4gICAgcmV0dXJuIGFTb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChhU291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUoYVNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdXRpbC50b1NldFN0cmluZyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zb3VyY2VzQ29udGVudHMsIGtleSlcbiAgICAgICAgPyB0aGlzLl9zb3VyY2VzQ29udGVudHNba2V5XVxuICAgICAgICA6IG51bGw7XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbi8qKlxuICogRXh0ZXJuYWxpemUgdGhlIHNvdXJjZSBtYXAuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9KU09OID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvSlNPTigpIHtcbiAgICB2YXIgbWFwID0ge1xuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIHNvdXJjZXM6IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgbmFtZXM6IHRoaXMuX25hbWVzLnRvQXJyYXkoKSxcbiAgICAgIG1hcHBpbmdzOiB0aGlzLl9zZXJpYWxpemVNYXBwaW5ncygpXG4gICAgfTtcbiAgICBpZiAodGhpcy5fZmlsZSAhPSBudWxsKSB7XG4gICAgICBtYXAuZmlsZSA9IHRoaXMuX2ZpbGU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIG1hcC5zb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gdGhpcy5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChtYXAuc291cmNlcywgbWFwLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG4gIH07XG5cbi8qKlxuICogUmVuZGVyIHRoZSBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZCB0byBhIHN0cmluZy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b1N0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSk7XG4gIH07XG5cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gU291cmNlTWFwR2VuZXJhdG9yO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG5leHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcbmV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQgPSAyO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZSBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoLlxuICpcbiAqIEBwYXJhbSBhTG93IEluZGljZXMgaGVyZSBhbmQgbG93ZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhSGlnaCBJbmRpY2VzIGhlcmUgYW5kIGhpZ2hlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgYmVpbmcgc2VhcmNoZWQgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgbm9uLWVtcHR5IGFycmF5IGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBlbGVtZW50cyBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gcmVjdXJzaXZlU2VhcmNoKGFMb3csIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHRlcm1pbmF0ZXMgd2hlbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICAvL1xuICAvLyAgIDEuIFdlIGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAvL1xuICAvLyAgIDIuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYnV0IHdlIGNhbiByZXR1cm4gdGhlIGluZGV4IG9mXG4gIC8vICAgICAgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50LlxuICAvL1xuICAvLyAgIDMuIFdlIGRpZCBub3QgZmluZCB0aGUgZXhhY3QgZWxlbWVudCwgYW5kIHRoZXJlIGlzIG5vIG5leHQtY2xvc2VzdFxuICAvLyAgICAgIGVsZW1lbnQgdGhhbiB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCBzbyB3ZSByZXR1cm4gLTEuXG4gIHZhciBtaWQgPSBNYXRoLmZsb29yKChhSGlnaCAtIGFMb3cpIC8gMikgKyBhTG93O1xuICB2YXIgY21wID0gYUNvbXBhcmUoYU5lZWRsZSwgYUhheXN0YWNrW21pZF0sIHRydWUpO1xuICBpZiAoY21wID09PSAwKSB7XG4gICAgLy8gRm91bmQgdGhlIGVsZW1lbnQgd2UgYXJlIGxvb2tpbmcgZm9yLlxuICAgIHJldHVybiBtaWQ7XG4gIH1cbiAgZWxzZSBpZiAoY21wID4gMCkge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgZ3JlYXRlciB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChhSGlnaCAtIG1pZCA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSB1cHBlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChtaWQsIGFIaWdoLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGV4YWN0IG5lZWRsZSBlbGVtZW50IHdhcyBub3QgZm91bmQgaW4gdGhpcyBoYXlzdGFjay4gRGV0ZXJtaW5lIGlmXG4gICAgLy8gd2UgYXJlIGluIHRlcm1pbmF0aW9uIGNhc2UgKDMpIG9yICgyKSBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSB0aGluZy5cbiAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgcmV0dXJuIGFIaWdoIDwgYUhheXN0YWNrLmxlbmd0aCA/IGFIaWdoIDogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIC8vIE91ciBuZWVkbGUgaXMgbGVzcyB0aGFuIGFIYXlzdGFja1ttaWRdLlxuICAgIGlmIChtaWQgLSBhTG93ID4gMSkge1xuICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIGxvd2VyIGhhbGYuXG4gICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKGFMb3csIG1pZCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhTG93IDwgMCA/IC0xIDogYUxvdztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2ggd2hpY2ggd2lsbCBhbHdheXMgdHJ5IGFuZCByZXR1cm5cbiAqIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBlbGVtZW50IGlmIHRoZXJlIGlzIG5vIGV4YWN0IGhpdC4gVGhpcyBpcyBiZWNhdXNlXG4gKiBtYXBwaW5ncyBiZXR3ZWVuIG9yaWdpbmFsIGFuZCBnZW5lcmF0ZWQgbGluZS9jb2wgcGFpcnMgYXJlIHNpbmdsZSBwb2ludHMsXG4gKiBhbmQgdGhlcmUgaXMgYW4gaW1wbGljaXQgcmVnaW9uIGJldHdlZW4gZWFjaCBvZiB0aGVtLCBzbyBhIG1pc3MganVzdCBtZWFuc1xuICogdGhhdCB5b3UgYXJlbid0IG9uIHRoZSB2ZXJ5IHN0YXJ0IG9mIGEgcmVnaW9uLlxuICpcbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IHlvdSBhcmUgbG9va2luZyBmb3IuXG4gKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBhcnJheSB0aGF0IGlzIGJlaW5nIHNlYXJjaGVkLlxuICogQHBhcmFtIGFDb21wYXJlIEEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdGhlIG5lZWRsZSBhbmQgYW4gZWxlbWVudCBpbiB0aGVcbiAqICAgICBhcnJheSBhbmQgcmV0dXJucyAtMSwgMCwgb3IgMSBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbmVlZGxlIGlzIGxlc3NcbiAqICAgICB0aGFuLCBlcXVhbCB0bywgb3IgZ3JlYXRlciB0aGFuIHRoZSBlbGVtZW50LCByZXNwZWN0aXZlbHkuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKi9cbmV4cG9ydHMuc2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKSB7XG4gIGlmIChhSGF5c3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gcmVjdXJzaXZlU2VhcmNoKC0xLCBhSGF5c3RhY2subGVuZ3RoLCBhTmVlZGxlLCBhSGF5c3RhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29tcGFyZSwgYUJpYXMgfHwgZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCk7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvLyBXZSBoYXZlIGZvdW5kIGVpdGhlciB0aGUgZXhhY3QgZWxlbWVudCwgb3IgdGhlIG5leHQtY2xvc2VzdCBlbGVtZW50IHRoYW5cbiAgLy8gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvci4gSG93ZXZlciwgdGhlcmUgbWF5IGJlIG1vcmUgdGhhbiBvbmUgc3VjaFxuICAvLyBlbGVtZW50LiBNYWtlIHN1cmUgd2UgYWx3YXlzIHJldHVybiB0aGUgc21hbGxlc3Qgb2YgdGhlc2UuXG4gIHdoaWxlIChpbmRleCAtIDEgPj0gMCkge1xuICAgIGlmIChhQ29tcGFyZShhSGF5c3RhY2tbaW5kZXhdLCBhSGF5c3RhY2tbaW5kZXggLSAxXSwgdHJ1ZSkgIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAtLWluZGV4O1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuLy8gSXQgdHVybnMgb3V0IHRoYXQgc29tZSAobW9zdD8pIEphdmFTY3JpcHQgZW5naW5lcyBkb24ndCBzZWxmLWhvc3Rcbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAuIFRoaXMgbWFrZXMgc2Vuc2UgYmVjYXVzZSBDKysgd2lsbCBsaWtlbHkgcmVtYWluXG4vLyBmYXN0ZXIgdGhhbiBKUyB3aGVuIGRvaW5nIHJhdyBDUFUtaW50ZW5zaXZlIHNvcnRpbmcuIEhvd2V2ZXIsIHdoZW4gdXNpbmcgYVxuLy8gY3VzdG9tIGNvbXBhcmF0b3IgZnVuY3Rpb24sIGNhbGxpbmcgYmFjayBhbmQgZm9ydGggYmV0d2VlbiB0aGUgVk0ncyBDKysgYW5kXG4vLyBKSVQnZCBKUyBpcyByYXRoZXIgc2xvdyAqYW5kKiBsb3NlcyBKSVQgdHlwZSBpbmZvcm1hdGlvbiwgcmVzdWx0aW5nIGluXG4vLyB3b3JzZSBnZW5lcmF0ZWQgY29kZSBmb3IgdGhlIGNvbXBhcmF0b3IgZnVuY3Rpb24gdGhhbiB3b3VsZCBiZSBvcHRpbWFsLiBJblxuLy8gZmFjdCwgd2hlbiBzb3J0aW5nIHdpdGggYSBjb21wYXJhdG9yLCB0aGVzZSBjb3N0cyBvdXR3ZWlnaCB0aGUgYmVuZWZpdHMgb2Zcbi8vIHNvcnRpbmcgaW4gQysrLiBCeSB1c2luZyBvdXIgb3duIEpTLWltcGxlbWVudGVkIFF1aWNrIFNvcnQgKGJlbG93KSwgd2UgZ2V0XG4vLyBhIH4zNTAwbXMgbWVhbiBzcGVlZC11cCBpbiBgYmVuY2gvYmVuY2guaHRtbGAuXG5cbi8qKlxuICogU3dhcCB0aGUgZWxlbWVudHMgaW5kZXhlZCBieSBgeGAgYW5kIGB5YCBpbiB0aGUgYXJyYXkgYGFyeWAuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgVGhlIGFycmF5LlxuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIGZpcnN0IGl0ZW0uXG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogICAgICAgIFRoZSBpbmRleCBvZiB0aGUgc2Vjb25kIGl0ZW0uXG4gKi9cbmZ1bmN0aW9uIHN3YXAoYXJ5LCB4LCB5KSB7XG4gIHZhciB0ZW1wID0gYXJ5W3hdO1xuICBhcnlbeF0gPSBhcnlbeV07XG4gIGFyeVt5XSA9IHRlbXA7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIHdpdGhpbiB0aGUgcmFuZ2UgYGxvdyAuLiBoaWdoYCBpbmNsdXNpdmUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGxvd1xuICogICAgICAgIFRoZSBsb3dlciBib3VuZCBvbiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge051bWJlcn0gaGlnaFxuICogICAgICAgIFRoZSB1cHBlciBib3VuZCBvbiB0aGUgcmFuZ2UuXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbUludEluUmFuZ2UobG93LCBoaWdoKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKGxvdyArIChNYXRoLnJhbmRvbSgpICogKGhpZ2ggLSBsb3cpKSk7XG59XG5cbi8qKlxuICogVGhlIFF1aWNrIFNvcnQgYWxnb3JpdGhtLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gKiAgICAgICAgRnVuY3Rpb24gdG8gdXNlIHRvIGNvbXBhcmUgdHdvIGl0ZW1zLlxuICogQHBhcmFtIHtOdW1iZXJ9IHBcbiAqICAgICAgICBTdGFydCBpbmRleCBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSByXG4gKiAgICAgICAgRW5kIGluZGV4IG9mIHRoZSBhcnJheVxuICovXG5mdW5jdGlvbiBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHAsIHIpIHtcbiAgLy8gSWYgb3VyIGxvd2VyIGJvdW5kIGlzIGxlc3MgdGhhbiBvdXIgdXBwZXIgYm91bmQsIHdlICgxKSBwYXJ0aXRpb24gdGhlXG4gIC8vIGFycmF5IGludG8gdHdvIHBpZWNlcyBhbmQgKDIpIHJlY3Vyc2Ugb24gZWFjaCBoYWxmLiBJZiBpdCBpcyBub3QsIHRoaXMgaXNcbiAgLy8gdGhlIGVtcHR5IGFycmF5IGFuZCBvdXIgYmFzZSBjYXNlLlxuXG4gIGlmIChwIDwgcikge1xuICAgIC8vICgxKSBQYXJ0aXRpb25pbmcuXG4gICAgLy9cbiAgICAvLyBUaGUgcGFydGl0aW9uaW5nIGNob29zZXMgYSBwaXZvdCBiZXR3ZWVuIGBwYCBhbmQgYHJgIGFuZCBtb3ZlcyBhbGxcbiAgICAvLyBlbGVtZW50cyB0aGF0IGFyZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHBpdm90IHRvIHRoZSBiZWZvcmUgaXQsIGFuZFxuICAgIC8vIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBhcmUgZ3JlYXRlciB0aGFuIGl0IGFmdGVyIGl0LiBUaGUgZWZmZWN0IGlzIHRoYXRcbiAgICAvLyBvbmNlIHBhcnRpdGlvbiBpcyBkb25lLCB0aGUgcGl2b3QgaXMgaW4gdGhlIGV4YWN0IHBsYWNlIGl0IHdpbGwgYmUgd2hlblxuICAgIC8vIHRoZSBhcnJheSBpcyBwdXQgaW4gc29ydGVkIG9yZGVyLCBhbmQgaXQgd2lsbCBub3QgbmVlZCB0byBiZSBtb3ZlZFxuICAgIC8vIGFnYWluLiBUaGlzIHJ1bnMgaW4gTyhuKSB0aW1lLlxuXG4gICAgLy8gQWx3YXlzIGNob29zZSBhIHJhbmRvbSBwaXZvdCBzbyB0aGF0IGFuIGlucHV0IGFycmF5IHdoaWNoIGlzIHJldmVyc2VcbiAgICAvLyBzb3J0ZWQgZG9lcyBub3QgY2F1c2UgTyhuXjIpIHJ1bm5pbmcgdGltZS5cbiAgICB2YXIgcGl2b3RJbmRleCA9IHJhbmRvbUludEluUmFuZ2UocCwgcik7XG4gICAgdmFyIGkgPSBwIC0gMTtcblxuICAgIHN3YXAoYXJ5LCBwaXZvdEluZGV4LCByKTtcbiAgICB2YXIgcGl2b3QgPSBhcnlbcl07XG5cbiAgICAvLyBJbW1lZGlhdGVseSBhZnRlciBgamAgaXMgaW5jcmVtZW50ZWQgaW4gdGhpcyBsb29wLCB0aGUgZm9sbG93aW5nIGhvbGRcbiAgICAvLyB0cnVlOlxuICAgIC8vXG4gICAgLy8gICAqIEV2ZXJ5IGVsZW1lbnQgaW4gYGFyeVtwIC4uIGldYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHBpdm90LlxuICAgIC8vXG4gICAgLy8gICAqIEV2ZXJ5IGVsZW1lbnQgaW4gYGFyeVtpKzEgLi4gai0xXWAgaXMgZ3JlYXRlciB0aGFuIHRoZSBwaXZvdC5cbiAgICBmb3IgKHZhciBqID0gcDsgaiA8IHI7IGorKykge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJ5W2pdLCBwaXZvdCkgPD0gMCkge1xuICAgICAgICBpICs9IDE7XG4gICAgICAgIHN3YXAoYXJ5LCBpLCBqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2FwKGFyeSwgaSArIDEsIGopO1xuICAgIHZhciBxID0gaSArIDE7XG5cbiAgICAvLyAoMikgUmVjdXJzZSBvbiBlYWNoIGhhbGYuXG5cbiAgICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHAsIHEgLSAxKTtcbiAgICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIHEgKyAxLCByKTtcbiAgfVxufVxuXG4vKipcbiAqIFNvcnQgdGhlIGdpdmVuIGFycmF5IGluLXBsYWNlIHdpdGggdGhlIGdpdmVuIGNvbXBhcmF0b3IgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgQW4gYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gKi9cbmV4cG9ydHMucXVpY2tTb3J0ID0gZnVuY3Rpb24gKGFyeSwgY29tcGFyYXRvcikge1xuICBkb1F1aWNrU29ydChhcnksIGNvbXBhcmF0b3IsIDAsIGFyeS5sZW5ndGggLSAxKTtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgYmluYXJ5U2VhcmNoID0gcmVxdWlyZSgnLi9iaW5hcnktc2VhcmNoJyk7XG52YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xudmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xudmFyIHF1aWNrU29ydCA9IHJlcXVpcmUoJy4vcXVpY2stc29ydCcpLnF1aWNrU29ydDtcblxuZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IHV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChhU291cmNlTWFwKTtcbiAgfVxuXG4gIHJldHVybiBzb3VyY2VNYXAuc2VjdGlvbnMgIT0gbnVsbFxuICAgID8gbmV3IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpXG4gICAgOiBuZXcgQmFzaWNTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpO1xufVxuXG5Tb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID0gZnVuY3Rpb24oYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICByZXR1cm4gQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpO1xufVxuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLy8gYF9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZCBgX19vcmlnaW5hbE1hcHBpbmdzYCBhcmUgYXJyYXlzIHRoYXQgaG9sZCB0aGVcbi8vIHBhcnNlZCBtYXBwaW5nIGNvb3JkaW5hdGVzIGZyb20gdGhlIHNvdXJjZSBtYXAncyBcIm1hcHBpbmdzXCIgYXR0cmlidXRlLiBUaGV5XG4vLyBhcmUgbGF6aWx5IGluc3RhbnRpYXRlZCwgYWNjZXNzZWQgdmlhIHRoZSBgX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbi8vIGBfb3JpZ2luYWxNYXBwaW5nc2AgZ2V0dGVycyByZXNwZWN0aXZlbHksIGFuZCB3ZSBvbmx5IHBhcnNlIHRoZSBtYXBwaW5nc1xuLy8gYW5kIGNyZWF0ZSB0aGVzZSBhcnJheXMgb25jZSBxdWVyaWVkIGZvciBhIHNvdXJjZSBsb2NhdGlvbi4gV2UganVtcCB0aHJvdWdoXG4vLyB0aGVzZSBob29wcyBiZWNhdXNlIHRoZXJlIGNhbiBiZSBtYW55IHRob3VzYW5kcyBvZiBtYXBwaW5ncywgYW5kIHBhcnNpbmdcbi8vIHRoZW0gaXMgZXhwZW5zaXZlLCBzbyB3ZSBvbmx5IHdhbnQgdG8gZG8gaXQgaWYgd2UgbXVzdC5cbi8vXG4vLyBFYWNoIG9iamVjdCBpbiB0aGUgYXJyYXlzIGlzIG9mIHRoZSBmb3JtOlxuLy9cbi8vICAgICB7XG4vLyAgICAgICBnZW5lcmF0ZWRMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBzb3VyY2U6IFRoZSBwYXRoIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSB0aGF0IGdlbmVyYXRlZCB0aGlzXG4vLyAgICAgICAgICAgICAgIGNodW5rIG9mIGNvZGUsXG4vLyAgICAgICBvcmlnaW5hbExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlIHRoYXRcbi8vICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsQ29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlIHRoYXRcbi8vICAgICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgbmFtZTogVGhlIG5hbWUgb2YgdGhlIG9yaWdpbmFsIHN5bWJvbCB3aGljaCBnZW5lcmF0ZWQgdGhpcyBjaHVuayBvZlxuLy8gICAgICAgICAgICAgY29kZS5cbi8vICAgICB9XG4vL1xuLy8gQWxsIHByb3BlcnRpZXMgZXhjZXB0IGZvciBgZ2VuZXJhdGVkTGluZWAgYW5kIGBnZW5lcmF0ZWRDb2x1bW5gIGNhbiBiZVxuLy8gYG51bGxgLlxuLy9cbi8vIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMuXG4vL1xuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMuXG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX2dlbmVyYXRlZE1hcHBpbmdzID0gbnVsbDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfZ2VuZXJhdGVkTWFwcGluZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MpIHtcbiAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncztcbiAgfVxufSk7XG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX29yaWdpbmFsTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19vcmlnaW5hbE1hcHBpbmdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MpIHtcbiAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzO1xuICB9XG59KTtcblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBpbmRleCkge1xuICAgIHZhciBjID0gYVN0ci5jaGFyQXQoaW5kZXgpO1xuICAgIHJldHVybiBjID09PSBcIjtcIiB8fCBjID09PSBcIixcIjtcbiAgfTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50IF9wYXJzZU1hcHBpbmdzXCIpO1xuICB9O1xuXG5Tb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVIgPSAxO1xuU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVIgPSAyO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCA9IDI7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGVhY2ggbWFwcGluZyBiZXR3ZWVuIGFuIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiBhbmQgYVxuICogZ2VuZXJhdGVkIGxpbmUvY29sdW1uIGluIHRoaXMgc291cmNlIG1hcC5cbiAqXG4gKiBAcGFyYW0gRnVuY3Rpb24gYUNhbGxiYWNrXG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdpdGggZWFjaCBtYXBwaW5nLlxuICogQHBhcmFtIE9iamVjdCBhQ29udGV4dFxuICogICAgICAgIE9wdGlvbmFsLiBJZiBzcGVjaWZpZWQsIHRoaXMgb2JqZWN0IHdpbGwgYmUgdGhlIHZhbHVlIG9mIGB0aGlzYCBldmVyeVxuICogICAgICAgIHRpbWUgdGhhdCBgYUNhbGxiYWNrYCBpcyBjYWxsZWQuXG4gKiBAcGFyYW0gYU9yZGVyXG4gKiAgICAgICAgRWl0aGVyIGBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVJgIG9yXG4gKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSYC4gU3BlY2lmaWVzIHdoZXRoZXIgeW91IHdhbnQgdG9cbiAqICAgICAgICBpdGVyYXRlIG92ZXIgdGhlIG1hcHBpbmdzIHNvcnRlZCBieSB0aGUgZ2VuZXJhdGVkIGZpbGUncyBsaW5lL2NvbHVtblxuICogICAgICAgIG9yZGVyIG9yIHRoZSBvcmlnaW5hbCdzIHNvdXJjZS9saW5lL2NvbHVtbiBvcmRlciwgcmVzcGVjdGl2ZWx5LiBEZWZhdWx0cyB0b1xuICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVJgLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZWFjaE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9lYWNoTWFwcGluZyhhQ2FsbGJhY2ssIGFDb250ZXh0LCBhT3JkZXIpIHtcbiAgICB2YXIgY29udGV4dCA9IGFDb250ZXh0IHx8IG51bGw7XG4gICAgdmFyIG9yZGVyID0gYU9yZGVyIHx8IFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjtcblxuICAgIHZhciBtYXBwaW5ncztcbiAgICBzd2l0Y2ggKG9yZGVyKSB7XG4gICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI6XG4gICAgICBtYXBwaW5ncyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUjpcbiAgICAgIG1hcHBpbmdzID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5ncztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG9yZGVyIG9mIGl0ZXJhdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLnNvdXJjZVJvb3Q7XG4gICAgbWFwcGluZ3MubWFwKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2UgPT09IG51bGwgPyBudWxsIDogdGhpcy5fc291cmNlcy5hdChtYXBwaW5nLnNvdXJjZSk7XG4gICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbixcbiAgICAgICAgb3JpZ2luYWxMaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgIG5hbWU6IG1hcHBpbmcubmFtZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9uYW1lcy5hdChtYXBwaW5nLm5hbWUpXG4gICAgICB9O1xuICAgIH0sIHRoaXMpLmZvckVhY2goYUNhbGxiYWNrLCBjb250ZXh0KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwcm92aWRlZC4gSWYgbm8gY29sdW1uIGlzIHByb3ZpZGVkLCByZXR1cm5zIGFsbCBtYXBwaW5nc1xuICogY29ycmVzcG9uZGluZyB0byBhIGVpdGhlciB0aGUgbGluZSB3ZSBhcmUgc2VhcmNoaW5nIGZvciBvciB0aGUgbmV4dFxuICogY2xvc2VzdCBsaW5lIHRoYXQgaGFzIGFueSBtYXBwaW5ncy4gT3RoZXJ3aXNlLCByZXR1cm5zIGFsbCBtYXBwaW5nc1xuICogY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gbGluZSBhbmQgZWl0aGVyIHRoZSBjb2x1bW4gd2UgYXJlIHNlYXJjaGluZyBmb3JcbiAqIG9yIHRoZSBuZXh0IGNsb3Nlc3QgY29sdW1uIHRoYXQgaGFzIGFueSBvZmZzZXRzLlxuICpcbiAqIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogT3B0aW9uYWwuIHRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICpcbiAqIGFuZCBhbiBhcnJheSBvZiBvYmplY3RzIGlzIHJldHVybmVkLCBlYWNoIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IoYUFyZ3MpIHtcbiAgICB2YXIgbGluZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpO1xuXG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBleGFjdCBtYXRjaCwgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nXG4gICAgLy8gcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgbWFwcGluZyBsZXNzIHRoYW4gdGhlIG5lZWRsZS4gQnlcbiAgICAvLyBzZXR0aW5nIG5lZWRsZS5vcmlnaW5hbENvbHVtbiB0byAwLCB3ZSB0aHVzIGZpbmQgdGhlIGxhc3QgbWFwcGluZyBmb3JcbiAgICAvLyB0aGUgZ2l2ZW4gbGluZSwgcHJvdmlkZWQgc3VjaCBhIG1hcHBpbmcgZXhpc3RzLlxuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBzb3VyY2U6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyksXG4gICAgICBvcmlnaW5hbExpbmU6IGxpbmUsXG4gICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nLCAwKVxuICAgIH07XG5cbiAgICBuZWVkbGUuc291cmNlID0gdGhpcy5fZmluZFNvdXJjZUluZGV4KG5lZWRsZS5zb3VyY2UpO1xuICAgIGlmIChuZWVkbGUuc291cmNlIDwgMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHZhciBtYXBwaW5ncyA9IFtdO1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcobmVlZGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAoYUFyZ3MuY29sdW1uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2UgZm91bmQuIFNpbmNlXG4gICAgICAgIC8vIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgZm91bmQuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBvcmlnaW5hbExpbmUpIHtcbiAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2Ugd2VyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICAvLyBTaW5jZSBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IGxpbmUgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPT0gb3JpZ2luYWxDb2x1bW4pIHtcbiAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBpbmdzO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluc3RhbmNlIHJlcHJlc2VudHMgYSBwYXJzZWQgc291cmNlIG1hcCB3aGljaCB3ZSBjYW5cbiAqIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZmlsZSBwb3NpdGlvbnMgYnkgZ2l2aW5nIGl0IGEgZmlsZVxuICogcG9zaXRpb24gaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKlxuICogVGhlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvclxuICogYWxyZWFkeSBwYXJzZWQgdG8gYW4gb2JqZWN0KS4gQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzb3VyY2UgbWFwcyBoYXZlIHRoZVxuICogZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKlxuICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gKiAgIC0gc291cmNlczogQW4gYXJyYXkgb2YgVVJMcyB0byB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG5hbWVzOiBBbiBhcnJheSBvZiBpZGVudGlmaWVycyB3aGljaCBjYW4gYmUgcmVmZXJyZW5jZWQgYnkgaW5kaXZpZHVhbCBtYXBwaW5ncy5cbiAqICAgLSBzb3VyY2VSb290OiBPcHRpb25hbC4gVGhlIFVSTCByb290IGZyb20gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIHJlbGF0aXZlLlxuICogICAtIHNvdXJjZXNDb250ZW50OiBPcHRpb25hbC4gQW4gYXJyYXkgb2YgY29udGVudHMgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAqICAgLSBtYXBwaW5nczogQSBzdHJpbmcgb2YgYmFzZTY0IFZMUXMgd2hpY2ggY29udGFpbiB0aGUgYWN0dWFsIG1hcHBpbmdzLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdOlxuICpcbiAqICAgICB7XG4gKiAgICAgICB2ZXJzaW9uIDogMyxcbiAqICAgICAgIGZpbGU6IFwib3V0LmpzXCIsXG4gKiAgICAgICBzb3VyY2VSb290IDogXCJcIixcbiAqICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAqICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgbWFwcGluZ3M6IFwiQUEsQUI7O0FCQ0RFO1wiXG4gKiAgICAgfVxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyLCBpZiBnaXZlbiwgaXMgYSBzdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVSTFxuICogYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgd2FzIGZvdW5kLiAgVGhpcyBVUkwgaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICogc291cmNlcyBhcnJheS5cbiAqXG4gKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdD9wbGk9MSNcbiAqL1xuZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzb3VyY2VzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlcycpO1xuICAvLyBTYXNzIDMuMyBsZWF2ZXMgb3V0IHRoZSAnbmFtZXMnIGFycmF5LCBzbyB3ZSBkZXZpYXRlIGZyb20gdGhlIHNwZWMgKHdoaWNoXG4gIC8vIHJlcXVpcmVzIHRoZSBhcnJheSkgdG8gcGxheSBuaWNlIGhlcmUuXG4gIHZhciBuYW1lcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ25hbWVzJywgW10pO1xuICB2YXIgc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgdmFyIHNvdXJjZXNDb250ZW50ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlc0NvbnRlbnQnLCBudWxsKTtcbiAgdmFyIG1hcHBpbmdzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbWFwcGluZ3MnKTtcbiAgdmFyIGZpbGUgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdmaWxlJywgbnVsbCk7XG5cbiAgLy8gT25jZSBhZ2FpbiwgU2FzcyBkZXZpYXRlcyBmcm9tIHRoZSBzcGVjIGFuZCBzdXBwbGllcyB0aGUgdmVyc2lvbiBhcyBhXG4gIC8vIHN0cmluZyByYXRoZXIgdGhhbiBhIG51bWJlciwgc28gd2UgdXNlIGxvb3NlIGVxdWFsaXR5IGNoZWNraW5nIGhlcmUuXG4gIGlmICh2ZXJzaW9uICE9IHRoaXMuX3ZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHZlcnNpb246ICcgKyB2ZXJzaW9uKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VSb290KSB7XG4gICAgc291cmNlUm9vdCA9IHV0aWwubm9ybWFsaXplKHNvdXJjZVJvb3QpO1xuICB9XG5cbiAgc291cmNlcyA9IHNvdXJjZXNcbiAgICAubWFwKFN0cmluZylcbiAgICAvLyBTb21lIHNvdXJjZSBtYXBzIHByb2R1Y2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIGxpa2UgXCIuL2Zvby5qc1wiIGluc3RlYWQgb2ZcbiAgICAvLyBcImZvby5qc1wiLiAgTm9ybWFsaXplIHRoZXNlIGZpcnN0IHNvIHRoYXQgZnV0dXJlIGNvbXBhcmlzb25zIHdpbGwgc3VjY2VlZC5cbiAgICAvLyBTZWUgYnVnemlsLmxhLzEwOTA3NjguXG4gICAgLm1hcCh1dGlsLm5vcm1hbGl6ZSlcbiAgICAvLyBBbHdheXMgZW5zdXJlIHRoYXQgYWJzb2x1dGUgc291cmNlcyBhcmUgaW50ZXJuYWxseSBzdG9yZWQgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgc291cmNlIHJvb3QsIGlmIHRoZSBzb3VyY2Ugcm9vdCBpcyBhYnNvbHV0ZS4gTm90IGRvaW5nIHRoaXMgd291bGRcbiAgICAvLyBiZSBwYXJ0aWN1bGFybHkgcHJvYmxlbWF0aWMgd2hlbiB0aGUgc291cmNlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlXG4gICAgLy8gc291cmNlICh2YWxpZCwgYnV0IHdoeT8/KS4gU2VlIGdpdGh1YiBpc3N1ZSAjMTk5IGFuZCBidWd6aWwubGEvMTE4ODk4Mi5cbiAgICAubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2VSb290ICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2VSb290KSAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlKVxuICAgICAgICA/IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlKVxuICAgICAgICA6IHNvdXJjZTtcbiAgICB9KTtcblxuICAvLyBQYXNzIGB0cnVlYCBiZWxvdyB0byBhbGxvdyBkdXBsaWNhdGUgbmFtZXMgYW5kIHNvdXJjZXMuIFdoaWxlIHNvdXJjZSBtYXBzXG4gIC8vIGFyZSBpbnRlbmRlZCB0byBiZSBjb21wcmVzc2VkIGFuZCBkZWR1cGxpY2F0ZWQsIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGVyXG4gIC8vIHNvbWV0aW1lcyBnZW5lcmF0ZXMgc291cmNlIG1hcHMgd2l0aCBkdXBsaWNhdGVzIGluIHRoZW0uIFNlZSBHaXRodWIgaXNzdWVcbiAgLy8gIzcyIGFuZCBidWd6aWwubGEvODg5NDkyLlxuICB0aGlzLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShuYW1lcy5tYXAoU3RyaW5nKSwgdHJ1ZSk7XG4gIHRoaXMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoc291cmNlcywgdHJ1ZSk7XG5cbiAgdGhpcy5fYWJzb2x1dGVTb3VyY2VzID0gdGhpcy5fc291cmNlcy50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzLCBhU291cmNlTWFwVVJMKTtcbiAgfSk7XG5cbiAgdGhpcy5zb3VyY2VSb290ID0gc291cmNlUm9vdDtcbiAgdGhpcy5zb3VyY2VzQ29udGVudCA9IHNvdXJjZXNDb250ZW50O1xuICB0aGlzLl9tYXBwaW5ncyA9IG1hcHBpbmdzO1xuICB0aGlzLl9zb3VyY2VNYXBVUkwgPSBhU291cmNlTWFwVVJMO1xuICB0aGlzLmZpbGUgPSBmaWxlO1xufVxuXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbnN1bWVyID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBmaW5kIHRoZSBpbmRleCBvZiBhIHNvdXJjZS4gIFJldHVybnMgLTEgaWYgbm90XG4gKiBmb3VuZC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRTb3VyY2VJbmRleCA9IGZ1bmN0aW9uKGFTb3VyY2UpIHtcbiAgdmFyIHJlbGF0aXZlU291cmNlID0gYVNvdXJjZTtcbiAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgcmVsYXRpdmVTb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgcmVsYXRpdmVTb3VyY2UpO1xuICB9XG5cbiAgaWYgKHRoaXMuX3NvdXJjZXMuaGFzKHJlbGF0aXZlU291cmNlKSkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VzLmluZGV4T2YocmVsYXRpdmVTb3VyY2UpO1xuICB9XG5cbiAgLy8gTWF5YmUgYVNvdXJjZSBpcyBhbiBhYnNvbHV0ZSBVUkwgYXMgcmV0dXJuZWQgYnkgfHNvdXJjZXN8LiAgSW5cbiAgLy8gdGhpcyBjYXNlIHdlIGNhbid0IHNpbXBseSB1bmRvIHRoZSB0cmFuc2Zvcm0uXG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5fYWJzb2x1dGVTb3VyY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHRoaXMuX2Fic29sdXRlU291cmNlc1tpXSA9PSBhU291cmNlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgZnJvbSBhIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAqXG4gKiBAcGFyYW0gU291cmNlTWFwR2VuZXJhdG9yIGFTb3VyY2VNYXBcbiAqICAgICAgICBUaGUgc291cmNlIG1hcCB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG4gKiBAcGFyYW0gU3RyaW5nIGFTb3VyY2VNYXBVUkxcbiAqICAgICAgICBUaGUgVVJMIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIGNhbiBiZSBmb3VuZCAob3B0aW9uYWwpXG4gKiBAcmV0dXJucyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICAgIHZhciBzbWMgPSBPYmplY3QuY3JlYXRlKEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcblxuICAgIHZhciBuYW1lcyA9IHNtYy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoYVNvdXJjZU1hcC5fbmFtZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICB2YXIgc291cmNlcyA9IHNtYy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9zb3VyY2VzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgc21jLnNvdXJjZVJvb3QgPSBhU291cmNlTWFwLl9zb3VyY2VSb290O1xuICAgIHNtYy5zb3VyY2VzQ29udGVudCA9IGFTb3VyY2VNYXAuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoc21jLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYy5zb3VyY2VSb290KTtcbiAgICBzbWMuZmlsZSA9IGFTb3VyY2VNYXAuX2ZpbGU7XG4gICAgc21jLl9zb3VyY2VNYXBVUkwgPSBhU291cmNlTWFwVVJMO1xuICAgIHNtYy5fYWJzb2x1dGVTb3VyY2VzID0gc21jLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc21jLnNvdXJjZVJvb3QsIHMsIGFTb3VyY2VNYXBVUkwpO1xuICAgIH0pO1xuXG4gICAgLy8gQmVjYXVzZSB3ZSBhcmUgbW9kaWZ5aW5nIHRoZSBlbnRyaWVzIChieSBjb252ZXJ0aW5nIHN0cmluZyBzb3VyY2VzIGFuZFxuICAgIC8vIG5hbWVzIHRvIGluZGljZXMgaW50byB0aGUgc291cmNlcyBhbmQgbmFtZXMgQXJyYXlTZXRzKSwgd2UgaGF2ZSB0byBtYWtlXG4gICAgLy8gYSBjb3B5IG9mIHRoZSBlbnRyeSBvciBlbHNlIGJhZCB0aGluZ3MgaGFwcGVuLiBTaGFyZWQgbXV0YWJsZSBzdGF0ZVxuICAgIC8vIHN0cmlrZXMgYWdhaW4hIFNlZSBnaXRodWIgaXNzdWUgIzE5MS5cblxuICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IGFTb3VyY2VNYXAuX21hcHBpbmdzLnRvQXJyYXkoKS5zbGljZSgpO1xuICAgIHZhciBkZXN0R2VuZXJhdGVkTWFwcGluZ3MgPSBzbWMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBkZXN0T3JpZ2luYWxNYXBwaW5ncyA9IHNtYy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNyY01hcHBpbmcgPSBnZW5lcmF0ZWRNYXBwaW5nc1tpXTtcbiAgICAgIHZhciBkZXN0TWFwcGluZyA9IG5ldyBNYXBwaW5nO1xuICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IHNyY01hcHBpbmcuZ2VuZXJhdGVkTGluZTtcbiAgICAgIGRlc3RNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiA9IHNyY01hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICBpZiAoc3JjTWFwcGluZy5zb3VyY2UpIHtcbiAgICAgICAgZGVzdE1hcHBpbmcuc291cmNlID0gc291cmNlcy5pbmRleE9mKHNyY01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgZGVzdE1hcHBpbmcub3JpZ2luYWxMaW5lID0gc3JjTWFwcGluZy5vcmlnaW5hbExpbmU7XG4gICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gc3JjTWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICBpZiAoc3JjTWFwcGluZy5uYW1lKSB7XG4gICAgICAgICAgZGVzdE1hcHBpbmcubmFtZSA9IG5hbWVzLmluZGV4T2Yoc3JjTWFwcGluZy5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc3RPcmlnaW5hbE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgICAgfVxuXG4gICAgICBkZXN0R2VuZXJhdGVkTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KHNtYy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuXG4gICAgcmV0dXJuIHNtYztcbiAgfTtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLyoqXG4gKiBUaGUgbGlzdCBvZiBvcmlnaW5hbCBzb3VyY2VzLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWJzb2x1dGVTb3VyY2VzLnNsaWNlKCk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFByb3ZpZGUgdGhlIEpJVCB3aXRoIGEgbmljZSBzaGFwZSAvIGhpZGRlbiBjbGFzcy5cbiAqL1xuZnVuY3Rpb24gTWFwcGluZygpIHtcbiAgdGhpcy5nZW5lcmF0ZWRMaW5lID0gMDtcbiAgdGhpcy5nZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gIHRoaXMub3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgdGhpcy5vcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gIHRoaXMubmFtZSA9IG51bGw7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB2YXIgZ2VuZXJhdGVkTGluZSA9IDE7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNTb3VyY2UgPSAwO1xuICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgIHZhciBsZW5ndGggPSBhU3RyLmxlbmd0aDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjYWNoZWRTZWdtZW50cyA9IHt9O1xuICAgIHZhciB0ZW1wID0ge307XG4gICAgdmFyIG9yaWdpbmFsTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgbWFwcGluZywgc3RyLCBzZWdtZW50LCBlbmQsIHZhbHVlO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnOycpIHtcbiAgICAgICAgZ2VuZXJhdGVkTGluZSsrO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhU3RyLmNoYXJBdChpbmRleCkgPT09ICcsJykge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG1hcHBpbmcgPSBuZXcgTWFwcGluZygpO1xuICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBnZW5lcmF0ZWRMaW5lO1xuXG4gICAgICAgIC8vIEJlY2F1c2UgZWFjaCBvZmZzZXQgaXMgZW5jb2RlZCByZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgb25lLFxuICAgICAgICAvLyBtYW55IHNlZ21lbnRzIG9mdGVuIGhhdmUgdGhlIHNhbWUgZW5jb2RpbmcuIFdlIGNhbiBleHBsb2l0IHRoaXNcbiAgICAgICAgLy8gZmFjdCBieSBjYWNoaW5nIHRoZSBwYXJzZWQgdmFyaWFibGUgbGVuZ3RoIGZpZWxkcyBvZiBlYWNoIHNlZ21lbnQsXG4gICAgICAgIC8vIGFsbG93aW5nIHVzIHRvIGF2b2lkIGEgc2Vjb25kIHBhcnNlIGlmIHdlIGVuY291bnRlciB0aGUgc2FtZVxuICAgICAgICAvLyBzZWdtZW50IGFnYWluLlxuICAgICAgICBmb3IgKGVuZCA9IGluZGV4OyBlbmQgPCBsZW5ndGg7IGVuZCsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IoYVN0ciwgZW5kKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0ciA9IGFTdHIuc2xpY2UoaW5kZXgsIGVuZCk7XG5cbiAgICAgICAgc2VnbWVudCA9IGNhY2hlZFNlZ21lbnRzW3N0cl07XG4gICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgaW5kZXggKz0gc3RyLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWdtZW50ID0gW107XG4gICAgICAgICAgd2hpbGUgKGluZGV4IDwgZW5kKSB7XG4gICAgICAgICAgICBiYXNlNjRWTFEuZGVjb2RlKGFTdHIsIGluZGV4LCB0ZW1wKTtcbiAgICAgICAgICAgIHZhbHVlID0gdGVtcC52YWx1ZTtcbiAgICAgICAgICAgIGluZGV4ID0gdGVtcC5yZXN0O1xuICAgICAgICAgICAgc2VnbWVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgYSBzb3VyY2UsIGJ1dCBubyBsaW5lIGFuZCBjb2x1bW4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgYSBzb3VyY2UgYW5kIGxpbmUsIGJ1dCBubyBjb2x1bW4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYWNoZWRTZWdtZW50c1tzdHJdID0gc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdlbmVyYXRlZCBjb2x1bW4uXG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gKyBzZWdtZW50WzBdO1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAvLyBPcmlnaW5hbCBzb3VyY2UuXG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBwcmV2aW91c1NvdXJjZSArIHNlZ21lbnRbMV07XG4gICAgICAgICAgcHJldmlvdXNTb3VyY2UgKz0gc2VnbWVudFsxXTtcblxuICAgICAgICAgIC8vIE9yaWdpbmFsIGxpbmUuXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBwcmV2aW91c09yaWdpbmFsTGluZSArIHNlZ21lbnRbMl07XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgICAvLyBMaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWRcbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSArPSAxO1xuXG4gICAgICAgICAgLy8gT3JpZ2luYWwgY29sdW1uLlxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBwcmV2aW91c09yaWdpbmFsQ29sdW1uICsgc2VnbWVudFszXTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIC8vIE9yaWdpbmFsIG5hbWUuXG4gICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBwcmV2aW91c05hbWUgKyBzZWdtZW50WzRdO1xuICAgICAgICAgICAgcHJldmlvdXNOYW1lICs9IHNlZ21lbnRbNF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2VuZXJhdGVkTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBvcmlnaW5hbE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWlja1NvcnQoZ2VuZXJhdGVkTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IGdlbmVyYXRlZE1hcHBpbmdzO1xuXG4gICAgcXVpY2tTb3J0KG9yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gb3JpZ2luYWxNYXBwaW5ncztcbiAgfTtcblxuLyoqXG4gKiBGaW5kIHRoZSBtYXBwaW5nIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBoeXBvdGhldGljYWwgXCJuZWVkbGVcIiBtYXBwaW5nIHRoYXRcbiAqIHdlIGFyZSBzZWFyY2hpbmcgZm9yIGluIHRoZSBnaXZlbiBcImhheXN0YWNrXCIgb2YgbWFwcGluZ3MuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2ZpbmRNYXBwaW5nKGFOZWVkbGUsIGFNYXBwaW5ncywgYUxpbmVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29sdW1uTmFtZSwgYUNvbXBhcmF0b3IsIGFCaWFzKSB7XG4gICAgLy8gVG8gcmV0dXJuIHRoZSBwb3NpdGlvbiB3ZSBhcmUgc2VhcmNoaW5nIGZvciwgd2UgbXVzdCBmaXJzdCBmaW5kIHRoZVxuICAgIC8vIG1hcHBpbmcgZm9yIHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgdGhlbiByZXR1cm4gdGhlIG9wcG9zaXRlIHBvc2l0aW9uIGl0XG4gICAgLy8gcG9pbnRzIHRvLiBCZWNhdXNlIHRoZSBtYXBwaW5ncyBhcmUgc29ydGVkLCB3ZSBjYW4gdXNlIGJpbmFyeSBzZWFyY2ggdG9cbiAgICAvLyBmaW5kIHRoZSBiZXN0IG1hcHBpbmcuXG5cbiAgICBpZiAoYU5lZWRsZVthTGluZU5hbWVdIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0xpbmUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMSwgZ290ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhTmVlZGxlW2FMaW5lTmFtZV0pO1xuICAgIH1cbiAgICBpZiAoYU5lZWRsZVthQ29sdW1uTmFtZV0gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb2x1bW4gbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCwgZ290ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhTmVlZGxlW2FDb2x1bW5OYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpbmFyeVNlYXJjaC5zZWFyY2goYU5lZWRsZSwgYU1hcHBpbmdzLCBhQ29tcGFyYXRvciwgYUJpYXMpO1xuICB9O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIGxhc3QgY29sdW1uIGZvciBlYWNoIGdlbmVyYXRlZCBtYXBwaW5nLiBUaGUgbGFzdCBjb2x1bW4gaXNcbiAqIGluY2x1c2l2ZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29tcHV0ZUNvbHVtblNwYW5zID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfY29tcHV0ZUNvbHVtblNwYW5zKCkge1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICAvLyBNYXBwaW5ncyBkbyBub3QgY29udGFpbiBhIGZpZWxkIGZvciB0aGUgbGFzdCBnZW5lcmF0ZWQgY29sdW1udC4gV2VcbiAgICAgIC8vIGNhbiBjb21lIHVwIHdpdGggYW4gb3B0aW1pc3RpYyBlc3RpbWF0ZSwgaG93ZXZlciwgYnkgYXNzdW1pbmcgdGhhdFxuICAgICAgLy8gbWFwcGluZ3MgYXJlIGNvbnRpZ3VvdXMgKGkuZS4gZ2l2ZW4gdHdvIGNvbnNlY3V0aXZlIG1hcHBpbmdzLCB0aGVcbiAgICAgIC8vIGZpcnN0IG1hcHBpbmcgZW5kcyB3aGVyZSB0aGUgc2Vjb25kIG9uZSBzdGFydHMpLlxuICAgICAgaWYgKGluZGV4ICsgMSA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aCkge1xuICAgICAgICB2YXIgbmV4dE1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleCArIDFdO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5leHRNYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICBtYXBwaW5nLmxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLSAxO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBsYXN0IG1hcHBpbmcgZm9yIGVhY2ggbGluZSBzcGFucyB0aGUgZW50aXJlIGxpbmUuXG4gICAgICBtYXBwaW5nLmxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBJbmZpbml0eTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gYmlhczogRWl0aGVyICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICBuZWVkbGUsXG4gICAgICB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncyxcbiAgICAgIFwiZ2VuZXJhdGVkTGluZVwiLFxuICAgICAgXCJnZW5lcmF0ZWRDb2x1bW5cIixcbiAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQsXG4gICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ3NvdXJjZScsIG51bGwpO1xuICAgICAgICBpZiAoc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5hdChzb3VyY2UpO1xuICAgICAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTCh0aGlzLnNvdXJjZVJvb3QsIHNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICduYW1lJywgbnVsbCk7XG4gICAgICAgIGlmIChuYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmF0KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzb3VyY2U6IG51bGwsXG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgbmFtZTogbnVsbFxuICAgIH07XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMgPVxuICBmdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudC5sZW5ndGggPj0gdGhpcy5fc291cmNlcy5zaXplKCkgJiZcbiAgICAgICF0aGlzLnNvdXJjZXNDb250ZW50LnNvbWUoZnVuY3Rpb24gKHNjKSB7IHJldHVybiBzYyA9PSBudWxsOyB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAqIGF2YWlsYWJsZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZFNvdXJjZUluZGV4KGFTb3VyY2UpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFtpbmRleF07XG4gICAgfVxuXG4gICAgdmFyIHJlbGF0aXZlU291cmNlID0gYVNvdXJjZTtcbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHJlbGF0aXZlU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHJlbGF0aXZlU291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgdXJsO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbFxuICAgICAgICAmJiAodXJsID0gdXRpbC51cmxQYXJzZSh0aGlzLnNvdXJjZVJvb3QpKSkge1xuICAgICAgLy8gWFhYOiBmaWxlOi8vIFVSSXMgYW5kIGFic29sdXRlIHBhdGhzIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvciBmb3JcbiAgICAgIC8vIG1hbnkgdXNlcnMuIFdlIGNhbiBoZWxwIHRoZW0gb3V0IHdoZW4gdGhleSBleHBlY3QgZmlsZTovLyBVUklzIHRvXG4gICAgICAvLyBiZWhhdmUgbGlrZSBpdCB3b3VsZCBpZiB0aGV5IHdlcmUgcnVubmluZyBhIGxvY2FsIEhUVFAgc2VydmVyLiBTZWVcbiAgICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg4NTU5Ny5cbiAgICAgIHZhciBmaWxlVXJpQWJzUGF0aCA9IHJlbGF0aXZlU291cmNlLnJlcGxhY2UoL15maWxlOlxcL1xcLy8sIFwiXCIpO1xuICAgICAgaWYgKHVybC5zY2hlbWUgPT0gXCJmaWxlXCJcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhmaWxlVXJpQWJzUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKGZpbGVVcmlBYnNQYXRoKV1cbiAgICAgIH1cblxuICAgICAgaWYgKCghdXJsLnBhdGggfHwgdXJsLnBhdGggPT0gXCIvXCIpXG4gICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoXCIvXCIgKyByZWxhdGl2ZVNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKFwiL1wiICsgcmVsYXRpdmVTb3VyY2UpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgcmVjdXJzaXZlbHkgZnJvbVxuICAgIC8vIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvci4gSW4gdGhhdCBjYXNlLCB3ZVxuICAgIC8vIGRvbid0IHdhbnQgdG8gdGhyb3cgaWYgd2UgY2FuJ3QgZmluZCB0aGUgc291cmNlIC0gd2UganVzdCB3YW50IHRvXG4gICAgLy8gcmV0dXJuIG51bGwsIHNvIHdlIHByb3ZpZGUgYSBmbGFnIHRvIGV4aXQgZ3JhY2VmdWxseS5cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyByZWxhdGl2ZVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gYmlhczogRWl0aGVyICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKTtcbiAgICBzb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgoc291cmNlKTtcbiAgICBpZiAoc291cmNlIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIG9yaWdpbmFsTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXG4gICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBuZWVkbGUuc291cmNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuZXhwb3J0cy5CYXNpY1NvdXJjZU1hcENvbnN1bWVyID0gQmFzaWNTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoXG4gKiB3ZSBjYW4gcXVlcnkgZm9yIGluZm9ybWF0aW9uLiBJdCBkaWZmZXJzIGZyb20gQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpblxuICogdGhhdCBpdCB0YWtlcyBcImluZGV4ZWRcIiBzb3VyY2UgbWFwcyAoaS5lLiBvbmVzIHdpdGggYSBcInNlY3Rpb25zXCIgZmllbGQpIGFzXG4gKiBpbnB1dC5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvciBhbHJlYWR5XG4gKiBwYXJzZWQgdG8gYW4gb2JqZWN0KS4gQWNjb3JkaW5nIHRvIHRoZSBzcGVjIGZvciBpbmRleGVkIHNvdXJjZSBtYXBzLCB0aGV5XG4gKiBoYXZlIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKiAgIC0gc2VjdGlvbnM6IEEgbGlzdCBvZiBzZWN0aW9uIGRlZmluaXRpb25zLlxuICpcbiAqIEVhY2ggdmFsdWUgdW5kZXIgdGhlIFwic2VjdGlvbnNcIiBmaWVsZCBoYXMgdHdvIGZpZWxkczpcbiAqICAgLSBvZmZzZXQ6IFRoZSBvZmZzZXQgaW50byB0aGUgb3JpZ2luYWwgc3BlY2lmaWVkIGF0IHdoaWNoIHRoaXMgc2VjdGlvblxuICogICAgICAgYmVnaW5zIHRvIGFwcGx5LCBkZWZpbmVkIGFzIGFuIG9iamVjdCB3aXRoIGEgXCJsaW5lXCIgYW5kIFwiY29sdW1uXCJcbiAqICAgICAgIGZpZWxkLlxuICogICAtIG1hcDogQSBzb3VyY2UgbWFwIGRlZmluaXRpb24uIFRoaXMgc291cmNlIG1hcCBjb3VsZCBhbHNvIGJlIGluZGV4ZWQsXG4gKiAgICAgICBidXQgZG9lc24ndCBoYXZlIHRvIGJlLlxuICpcbiAqIEluc3RlYWQgb2YgdGhlIFwibWFwXCIgZmllbGQsIGl0J3MgYWxzbyBwb3NzaWJsZSB0byBoYXZlIGEgXCJ1cmxcIiBmaWVsZFxuICogc3BlY2lmeWluZyBhIFVSTCB0byByZXRyaWV2ZSBhIHNvdXJjZSBtYXAgZnJvbSwgYnV0IHRoYXQncyBjdXJyZW50bHlcbiAqIHVuc3VwcG9ydGVkLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXSwgYnV0XG4gKiBtb2RpZmllZCB0byBvbWl0IGEgc2VjdGlvbiB3aGljaCB1c2VzIHRoZSBcInVybFwiIGZpZWxkLlxuICpcbiAqICB7XG4gKiAgICB2ZXJzaW9uIDogMyxcbiAqICAgIGZpbGU6IFwiYXBwLmpzXCIsXG4gKiAgICBzZWN0aW9uczogW3tcbiAqICAgICAgb2Zmc2V0OiB7bGluZToxMDAsIGNvbHVtbjoxMH0sXG4gKiAgICAgIG1hcDoge1xuICogICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgIGZpbGU6IFwic2VjdGlvbi5qc1wiLFxuICogICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAqICAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAqICAgICAgICBtYXBwaW5nczogXCJBQUFBLEU7O0FCQ0RFO1wiXG4gKiAgICAgIH1cbiAqICAgIH1dLFxuICogIH1cbiAqXG4gKiBUaGUgc2Vjb25kIHBhcmFtZXRlciwgaWYgZ2l2ZW4sIGlzIGEgc3RyaW5nIHdob3NlIHZhbHVlIGlzIHRoZSBVUkxcbiAqIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIHdhcyBmb3VuZC4gIFRoaXMgVVJMIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAqIHNvdXJjZXMgYXJyYXkuXG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQjaGVhZGluZz1oLjUzNWVzM3hlcHJndFxuICovXG5mdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IHV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChhU291cmNlTWFwKTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAndmVyc2lvbicpO1xuICB2YXIgc2VjdGlvbnMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzZWN0aW9ucycpO1xuXG4gIGlmICh2ZXJzaW9uICE9IHRoaXMuX3ZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHZlcnNpb246ICcgKyB2ZXJzaW9uKTtcbiAgfVxuXG4gIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcblxuICB2YXIgbGFzdE9mZnNldCA9IHtcbiAgICBsaW5lOiAtMSxcbiAgICBjb2x1bW46IDBcbiAgfTtcbiAgdGhpcy5fc2VjdGlvbnMgPSBzZWN0aW9ucy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICBpZiAocy51cmwpIHtcbiAgICAgIC8vIFRoZSB1cmwgZmllbGQgd2lsbCByZXF1aXJlIHN1cHBvcnQgZm9yIGFzeW5jaHJvbmljaXR5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzE2XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBvcnQgZm9yIHVybCBmaWVsZCBpbiBzZWN0aW9ucyBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgfVxuICAgIHZhciBvZmZzZXQgPSB1dGlsLmdldEFyZyhzLCAnb2Zmc2V0Jyk7XG4gICAgdmFyIG9mZnNldExpbmUgPSB1dGlsLmdldEFyZyhvZmZzZXQsICdsaW5lJyk7XG4gICAgdmFyIG9mZnNldENvbHVtbiA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2NvbHVtbicpO1xuXG4gICAgaWYgKG9mZnNldExpbmUgPCBsYXN0T2Zmc2V0LmxpbmUgfHxcbiAgICAgICAgKG9mZnNldExpbmUgPT09IGxhc3RPZmZzZXQubGluZSAmJiBvZmZzZXRDb2x1bW4gPCBsYXN0T2Zmc2V0LmNvbHVtbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2VjdGlvbiBvZmZzZXRzIG11c3QgYmUgb3JkZXJlZCBhbmQgbm9uLW92ZXJsYXBwaW5nLicpO1xuICAgIH1cbiAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdlbmVyYXRlZE9mZnNldDoge1xuICAgICAgICAvLyBUaGUgb2Zmc2V0IGZpZWxkcyBhcmUgMC1iYXNlZCwgYnV0IHdlIHVzZSAxLWJhc2VkIGluZGljZXMgd2hlblxuICAgICAgICAvLyBlbmNvZGluZy9kZWNvZGluZyBmcm9tIFZMUS5cbiAgICAgICAgZ2VuZXJhdGVkTGluZTogb2Zmc2V0TGluZSArIDEsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogb2Zmc2V0Q29sdW1uICsgMVxuICAgICAgfSxcbiAgICAgIGNvbnN1bWVyOiBuZXcgU291cmNlTWFwQ29uc3VtZXIodXRpbC5nZXRBcmcocywgJ21hcCcpLCBhU291cmNlTWFwVVJMKVxuICAgIH1cbiAgfSk7XG59XG5cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLyoqXG4gKiBUaGUgbGlzdCBvZiBvcmlnaW5hbCBzb3VyY2VzLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLl9zZWN0aW9uc1tpXS5jb25zdW1lci5zb3VyY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHNvdXJjZXMucHVzaCh0aGlzLl9zZWN0aW9uc1tpXS5jb25zdW1lci5zb3VyY2VzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZXM7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIC8vIEZpbmQgdGhlIHNlY3Rpb24gY29udGFpbmluZyB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uIHdlJ3JlIHRyeWluZyB0byBtYXBcbiAgICAvLyB0byBhbiBvcmlnaW5hbCBwb3NpdGlvbi5cbiAgICB2YXIgc2VjdGlvbkluZGV4ID0gYmluYXJ5U2VhcmNoLnNlYXJjaChuZWVkbGUsIHRoaXMuX3NlY3Rpb25zLFxuICAgICAgZnVuY3Rpb24obmVlZGxlLCBzZWN0aW9uKSB7XG4gICAgICAgIHZhciBjbXAgPSBuZWVkbGUuZ2VuZXJhdGVkTGluZSAtIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmU7XG4gICAgICAgIGlmIChjbXApIHtcbiAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgfSk7XG4gICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tzZWN0aW9uSW5kZXhdO1xuXG4gICAgaWYgKCFzZWN0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbmFtZTogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VjdGlvbi5jb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgIGxpbmU6IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgIGNvbHVtbjogbmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICA6IDApLFxuICAgICAgYmlhczogYUFyZ3MuYmlhc1xuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gcy5jb25zdW1lci5oYXNDb250ZW50c09mQWxsU291cmNlcygpO1xuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICogYXZhaWxhYmxlLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgdmFyIGNvbnRlbnQgPSBzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgdHJ1ZSk7XG4gICAgICBpZiAoY29udGVudCkge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC4gXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgLy8gT25seSBjb25zaWRlciB0aGlzIHNlY3Rpb24gaWYgdGhlIHJlcXVlc3RlZCBzb3VyY2UgaXMgaW4gdGhlIGxpc3Qgb2ZcbiAgICAgIC8vIHNvdXJjZXMgb2YgdGhlIGNvbnN1bWVyLlxuICAgICAgaWYgKHNlY3Rpb24uY29uc3VtZXIuX2ZpbmRTb3VyY2VJbmRleCh1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpKSA9PT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZ2VuZXJhdGVkUG9zaXRpb24gPSBzZWN0aW9uLmNvbnN1bWVyLmdlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKTtcbiAgICAgIGlmIChnZW5lcmF0ZWRQb3NpdGlvbikge1xuICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmUgK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZFBvc2l0aW9uLmNvbHVtbiArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gZ2VuZXJhdGVkUG9zaXRpb24ubGluZVxuICAgICAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgICAgIDogMClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbFxuICAgIH07XG4gIH07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG4gICAgICB2YXIgc2VjdGlvbk1hcHBpbmdzID0gc2VjdGlvbi5jb25zdW1lci5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlY3Rpb25NYXBwaW5ncy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbWFwcGluZyA9IHNlY3Rpb25NYXBwaW5nc1tqXTtcblxuICAgICAgICB2YXIgc291cmNlID0gc2VjdGlvbi5jb25zdW1lci5fc291cmNlcy5hdChtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZVJvb3QsIHNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5pbmRleE9mKHNvdXJjZSk7XG5cbiAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xuICAgICAgICBpZiAobWFwcGluZy5uYW1lKSB7XG4gICAgICAgICAgbmFtZSA9IHNlY3Rpb24uY29uc3VtZXIuX25hbWVzLmF0KG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIG1hcHBpbmdzIGNvbWluZyBmcm9tIHRoZSBjb25zdW1lciBmb3IgdGhlIHNlY3Rpb24gaGF2ZVxuICAgICAgICAvLyBnZW5lcmF0ZWQgcG9zaXRpb25zIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgc2VjdGlvbiwgc28gd2VcbiAgICAgICAgLy8gbmVlZCB0byBvZmZzZXQgdGhlbSB0byBiZSByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIGNvbmNhdGVuYXRlZFxuICAgICAgICAvLyBnZW5lcmF0ZWQgZmlsZS5cbiAgICAgICAgdmFyIGFkanVzdGVkTWFwcGluZyA9IHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUgK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBtYXBwaW5nLmdlbmVyYXRlZExpbmVcbiAgICAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgICAgOiAwKSxcbiAgICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MucHVzaChhZGp1c3RlZE1hcHBpbmcpO1xuICAgICAgICBpZiAodHlwZW9mIGFkanVzdGVkTWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MucHVzaChhZGp1c3RlZE1hcHBpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgcXVpY2tTb3J0KHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcbiAgfTtcblxuZXhwb3J0cy5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIgPSBJbmRleGVkU291cmNlTWFwQ29uc3VtZXI7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBTb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAtZ2VuZXJhdG9yJykuU291cmNlTWFwR2VuZXJhdG9yO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLy8gTWF0Y2hlcyBhIFdpbmRvd3Mtc3R5bGUgYFxcclxcbmAgbmV3bGluZSBvciBhIGBcXG5gIG5ld2xpbmUgdXNlZCBieSBhbGwgb3RoZXJcbi8vIG9wZXJhdGluZyBzeXN0ZW1zIHRoZXNlIGRheXMgKGNhcHR1cmluZyB0aGUgcmVzdWx0KS5cbnZhciBSRUdFWF9ORVdMSU5FID0gLyhcXHI/XFxuKS87XG5cbi8vIE5ld2xpbmUgY2hhcmFjdGVyIGNvZGUgZm9yIGNoYXJDb2RlQXQoKSBjb21wYXJpc29uc1xudmFyIE5FV0xJTkVfQ09ERSA9IDEwO1xuXG4vLyBQcml2YXRlIHN5bWJvbCBmb3IgaWRlbnRpZnlpbmcgYFNvdXJjZU5vZGVgcyB3aGVuIG11bHRpcGxlIHZlcnNpb25zIG9mXG4vLyB0aGUgc291cmNlLW1hcCBsaWJyYXJ5IGFyZSBsb2FkZWQuIFRoaXMgTVVTVCBOT1QgQ0hBTkdFIGFjcm9zc1xuLy8gdmVyc2lvbnMhXG52YXIgaXNTb3VyY2VOb2RlID0gXCIkJCRpc1NvdXJjZU5vZGUkJCRcIjtcblxuLyoqXG4gKiBTb3VyY2VOb2RlcyBwcm92aWRlIGEgd2F5IHRvIGFic3RyYWN0IG92ZXIgaW50ZXJwb2xhdGluZy9jb25jYXRlbmF0aW5nXG4gKiBzbmlwcGV0cyBvZiBnZW5lcmF0ZWQgSmF2YVNjcmlwdCBzb3VyY2UgY29kZSB3aGlsZSBtYWludGFpbmluZyB0aGUgbGluZSBhbmRcbiAqIGNvbHVtbiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwYXJhbSBhTGluZSBUaGUgb3JpZ2luYWwgbGluZSBudW1iZXIuXG4gKiBAcGFyYW0gYUNvbHVtbiBUaGUgb3JpZ2luYWwgY29sdW1uIG51bWJlci5cbiAqIEBwYXJhbSBhU291cmNlIFRoZSBvcmlnaW5hbCBzb3VyY2UncyBmaWxlbmFtZS5cbiAqIEBwYXJhbSBhQ2h1bmtzIE9wdGlvbmFsLiBBbiBhcnJheSBvZiBzdHJpbmdzIHdoaWNoIGFyZSBzbmlwcGV0cyBvZlxuICogICAgICAgIGdlbmVyYXRlZCBKUywgb3Igb3RoZXIgU291cmNlTm9kZXMuXG4gKiBAcGFyYW0gYU5hbWUgVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU5vZGUoYUxpbmUsIGFDb2x1bW4sIGFTb3VyY2UsIGFDaHVua3MsIGFOYW1lKSB7XG4gIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgdGhpcy5zb3VyY2VDb250ZW50cyA9IHt9O1xuICB0aGlzLmxpbmUgPSBhTGluZSA9PSBudWxsID8gbnVsbCA6IGFMaW5lO1xuICB0aGlzLmNvbHVtbiA9IGFDb2x1bW4gPT0gbnVsbCA/IG51bGwgOiBhQ29sdW1uO1xuICB0aGlzLnNvdXJjZSA9IGFTb3VyY2UgPT0gbnVsbCA/IG51bGwgOiBhU291cmNlO1xuICB0aGlzLm5hbWUgPSBhTmFtZSA9PSBudWxsID8gbnVsbCA6IGFOYW1lO1xuICB0aGlzW2lzU291cmNlTm9kZV0gPSB0cnVlO1xuICBpZiAoYUNodW5rcyAhPSBudWxsKSB0aGlzLmFkZChhQ2h1bmtzKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgU291cmNlTm9kZSBmcm9tIGdlbmVyYXRlZCBjb2RlIGFuZCBhIFNvdXJjZU1hcENvbnN1bWVyLlxuICpcbiAqIEBwYXJhbSBhR2VuZXJhdGVkQ29kZSBUaGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcCBmb3IgdGhlIGdlbmVyYXRlZCBjb2RlXG4gKiBAcGFyYW0gYVJlbGF0aXZlUGF0aCBPcHRpb25hbC4gVGhlIHBhdGggdGhhdCByZWxhdGl2ZSBzb3VyY2VzIGluIHRoZVxuICogICAgICAgIFNvdXJjZU1hcENvbnN1bWVyIHNob3VsZCBiZSByZWxhdGl2ZSB0by5cbiAqL1xuU291cmNlTm9kZS5mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAoYUdlbmVyYXRlZENvZGUsIGFTb3VyY2VNYXBDb25zdW1lciwgYVJlbGF0aXZlUGF0aCkge1xuICAgIC8vIFRoZSBTb3VyY2VOb2RlIHdlIHdhbnQgdG8gZmlsbCB3aXRoIHRoZSBnZW5lcmF0ZWQgY29kZVxuICAgIC8vIGFuZCB0aGUgU291cmNlTWFwXG4gICAgdmFyIG5vZGUgPSBuZXcgU291cmNlTm9kZSgpO1xuXG4gICAgLy8gQWxsIGV2ZW4gaW5kaWNlcyBvZiB0aGlzIGFycmF5IGFyZSBvbmUgbGluZSBvZiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gICAgLy8gd2hpbGUgYWxsIG9kZCBpbmRpY2VzIGFyZSB0aGUgbmV3bGluZXMgYmV0d2VlbiB0d28gYWRqYWNlbnQgbGluZXNcbiAgICAvLyAoc2luY2UgYFJFR0VYX05FV0xJTkVgIGNhcHR1cmVzIGl0cyBtYXRjaCkuXG4gICAgLy8gUHJvY2Vzc2VkIGZyYWdtZW50cyBhcmUgYWNjZXNzZWQgYnkgY2FsbGluZyBgc2hpZnROZXh0TGluZWAuXG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzID0gYUdlbmVyYXRlZENvZGUuc3BsaXQoUkVHRVhfTkVXTElORSk7XG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzSW5kZXggPSAwO1xuICAgIHZhciBzaGlmdE5leHRMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGluZUNvbnRlbnRzID0gZ2V0TmV4dExpbmUoKTtcbiAgICAgIC8vIFRoZSBsYXN0IGxpbmUgb2YgYSBmaWxlIG1pZ2h0IG5vdCBoYXZlIGEgbmV3bGluZS5cbiAgICAgIHZhciBuZXdMaW5lID0gZ2V0TmV4dExpbmUoKSB8fCBcIlwiO1xuICAgICAgcmV0dXJuIGxpbmVDb250ZW50cyArIG5ld0xpbmU7XG5cbiAgICAgIGZ1bmN0aW9uIGdldE5leHRMaW5lKCkge1xuICAgICAgICByZXR1cm4gcmVtYWluaW5nTGluZXNJbmRleCA8IHJlbWFpbmluZ0xpbmVzLmxlbmd0aCA/XG4gICAgICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4KytdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBXZSBuZWVkIHRvIHJlbWVtYmVyIHRoZSBwb3NpdGlvbiBvZiBcInJlbWFpbmluZ0xpbmVzXCJcbiAgICB2YXIgbGFzdEdlbmVyYXRlZExpbmUgPSAxLCBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcblxuICAgIC8vIFRoZSBnZW5lcmF0ZSBTb3VyY2VOb2RlcyB3ZSBuZWVkIGEgY29kZSByYW5nZS5cbiAgICAvLyBUbyBleHRyYWN0IGl0IGN1cnJlbnQgYW5kIGxhc3QgbWFwcGluZyBpcyB1c2VkLlxuICAgIC8vIEhlcmUgd2Ugc3RvcmUgdGhlIGxhc3QgbWFwcGluZy5cbiAgICB2YXIgbGFzdE1hcHBpbmcgPSBudWxsO1xuXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UgYWRkIHRoZSBjb2RlIGZyb20gXCJsYXN0TWFwcGluZ1wiIHRvIFwibWFwcGluZ1wiOlxuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGVyZSBpcyBhIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgIGlmIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIC8vIEFzc29jaWF0ZSBmaXJzdCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgICAgLy8gVGhlIHJlbWFpbmluZyBjb2RlIGlzIGFkZGVkIHdpdGhvdXQgbWFwcGluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSBjb2RlIGJldHdlZW4gXCJsYXN0R2VuZXJhdGVkQ29sdW1uXCIgYW5kXG4gICAgICAgICAgLy8gXCJtYXBwaW5nLmdlbmVyYXRlZENvbHVtblwiIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgJyc7XG4gICAgICAgICAgdmFyIGNvZGUgPSBuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBjb2RlKTtcbiAgICAgICAgICAvLyBObyBtb3JlIHJlbWFpbmluZyBjb2RlLCBjb250aW51ZVxuICAgICAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFdlIGFkZCB0aGUgZ2VuZXJhdGVkIGNvZGUgdW50aWwgdGhlIGZpcnN0IG1hcHBpbmdcbiAgICAgIC8vIHRvIHRoZSBTb3VyY2VOb2RlIHdpdGhvdXQgYW55IG1hcHBpbmcuXG4gICAgICAvLyBFYWNoIGxpbmUgaXMgYWRkZWQgYXMgc2VwYXJhdGUgc3RyaW5nLlxuICAgICAgd2hpbGUgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIG5vZGUuYWRkKHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICB9XG4gICAgICBpZiAobGFzdEdlbmVyYXRlZENvbHVtbiA8IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKSB7XG4gICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdIHx8ICcnO1xuICAgICAgICBub2RlLmFkZChuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pKTtcbiAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICB9XG4gICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgfSwgdGhpcyk7XG4gICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG1hcHBpbmdzLlxuICAgIGlmIChyZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcpIHtcbiAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSByZW1haW5pbmcgY29kZSBpbiB0aGUgY3VycmVudCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgIH1cbiAgICAgIC8vIGFuZCBhZGQgdGhlIHJlbWFpbmluZyBsaW5lcyB3aXRob3V0IGFueSBtYXBwaW5nXG4gICAgICBub2RlLmFkZChyZW1haW5pbmdMaW5lcy5zcGxpY2UocmVtYWluaW5nTGluZXNJbmRleCkuam9pbihcIlwiKSk7XG4gICAgfVxuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudCBpbnRvIFNvdXJjZU5vZGVcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm9kZTtcblxuICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmdXaXRoQ29kZShtYXBwaW5nLCBjb2RlKSB7XG4gICAgICBpZiAobWFwcGluZyA9PT0gbnVsbCB8fCBtYXBwaW5nLnNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFSZWxhdGl2ZVBhdGhcbiAgICAgICAgICA/IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICA6IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBub2RlLmFkZChuZXcgU291cmNlTm9kZShtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoaXMgc291cmNlIG5vZGUuXG4gKlxuICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gU291cmNlTm9kZV9hZGQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBhQ2h1bmsuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGFDaHVuaykge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGFDaHVuayk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gU291cmNlTm9kZV9wcmVwZW5kKGFDaHVuaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgZm9yICh2YXIgaSA9IGFDaHVuay5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMucHJlcGVuZChhQ2h1bmtbaV0pO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgdGhpcy5jaGlsZHJlbi51bnNoaWZ0KGFDaHVuayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgSlMgc25pcHBldHMgaW4gdGhpcyBub2RlIGFuZCBpdHMgY2hpbGRyZW4uIFRoZVxuICogd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBzbmlwcGV0IG9mIEpTIGFuZCBpcyBwYXNzZWQgdGhhdFxuICogc25pcHBldCBhbmQgdGhlIGl0cyBvcmlnaW5hbCBhc3NvY2lhdGVkIHNvdXJjZSdzIGxpbmUvY29sdW1uIGxvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2FsayhhRm4pIHtcbiAgdmFyIGNodW5rO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNodW5rID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICBpZiAoY2h1bmtbaXNTb3VyY2VOb2RlXSkge1xuICAgICAgY2h1bmsud2FsayhhRm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjaHVuayAhPT0gJycpIHtcbiAgICAgICAgYUZuKGNodW5rLCB7IHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMaWtlIGBTdHJpbmcucHJvdG90eXBlLmpvaW5gIGV4Y2VwdCBmb3IgU291cmNlTm9kZXMuIEluc2VydHMgYGFTdHJgIGJldHdlZW5cbiAqIGVhY2ggb2YgYHRoaXMuY2hpbGRyZW5gLlxuICpcbiAqIEBwYXJhbSBhU2VwIFRoZSBzZXBhcmF0b3IuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2pvaW4oYVNlcCkge1xuICB2YXIgbmV3Q2hpbGRyZW47XG4gIHZhciBpO1xuICB2YXIgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuLTE7IGkrKykge1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgIG5ld0NoaWxkcmVuLnB1c2goYVNlcCk7XG4gICAgfVxuICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSBvbiB0aGUgdmVyeSByaWdodC1tb3N0IHNvdXJjZSBzbmlwcGV0LiBVc2VmdWxcbiAqIGZvciB0cmltbWluZyB3aGl0ZXNwYWNlIGZyb20gdGhlIGVuZCBvZiBhIHNvdXJjZSBub2RlLCBldGMuXG4gKlxuICogQHBhcmFtIGFQYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gKiBAcGFyYW0gYVJlcGxhY2VtZW50IFRoZSB0aGluZyB0byByZXBsYWNlIHRoZSBwYXR0ZXJuIHdpdGguXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgdmFyIGxhc3RDaGlsZCA9IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RDaGlsZFtpc1NvdXJjZU5vZGVdKSB7XG4gICAgbGFzdENoaWxkLnJlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgbGFzdENoaWxkID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXSA9IGxhc3RDaGlsZC5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaCgnJy5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS4gVGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAqIGluIHRoZSBzb3VyY2VzQ29udGVudCBmaWVsZC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZVxuICogQHBhcmFtIGFTb3VyY2VDb250ZW50IFRoZSBjb250ZW50IG9mIHRoZSBzb3VyY2UgZmlsZVxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHRoaXMuc291cmNlQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhhU291cmNlRmlsZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gIH07XG5cbi8qKlxuICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIFNvdXJjZU5vZGVzLiBUaGUgd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2hcbiAqIHNvdXJjZSBmaWxlIGNvbnRlbnQgYW5kIGlzIHBhc3NlZCB0aGUgZmlsZW5hbWUgYW5kIHNvdXJjZSBjb250ZW50LlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2Fsa1NvdXJjZUNvbnRlbnRzID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV93YWxrU291cmNlQ29udGVudHMoYUZuKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldW2lzU291cmNlTm9kZV0pIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpXS53YWxrU291cmNlQ29udGVudHMoYUZuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhRm4odXRpbC5mcm9tU2V0U3RyaW5nKHNvdXJjZXNbaV0pLCB0aGlzLnNvdXJjZUNvbnRlbnRzW3NvdXJjZXNbaV1dKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICogYW5kIGNvbmNhdGVuYXRlcyBhbGwgdGhlIHZhcmlvdXMgc25pcHBldHMgdG9nZXRoZXIgdG8gb25lIHN0cmluZy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nKCkge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaykge1xuICAgIHN0ciArPSBjaHVuaztcbiAgfSk7XG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlIGFsb25nIHdpdGggYSBzb3VyY2VcbiAqIG1hcC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmdXaXRoU291cmNlTWFwID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZ1dpdGhTb3VyY2VNYXAoYUFyZ3MpIHtcbiAgdmFyIGdlbmVyYXRlZCA9IHtcbiAgICBjb2RlOiBcIlwiLFxuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHZhciBtYXAgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKTtcbiAgdmFyIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxOYW1lID0gbnVsbDtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaywgb3JpZ2luYWwpIHtcbiAgICBnZW5lcmF0ZWQuY29kZSArPSBjaHVuaztcbiAgICBpZiAob3JpZ2luYWwuc291cmNlICE9PSBudWxsXG4gICAgICAgICYmIG9yaWdpbmFsLmxpbmUgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwuY29sdW1uICE9PSBudWxsKSB7XG4gICAgICBpZihsYXN0T3JpZ2luYWxTb3VyY2UgIT09IG9yaWdpbmFsLnNvdXJjZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTGluZSAhPT0gb3JpZ2luYWwubGluZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbE5hbWUgIT09IG9yaWdpbmFsLm5hbWUpIHtcbiAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICBsYXN0T3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgIGxhc3RPcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgIGxhc3RPcmlnaW5hbE5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbmd0aCA9IGNodW5rLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgaWYgKGNodW5rLmNoYXJDb2RlQXQoaWR4KSA9PT0gTkVXTElORV9DT0RFKSB7XG4gICAgICAgIGdlbmVyYXRlZC5saW5lKys7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSAwO1xuICAgICAgICAvLyBNYXBwaW5ncyBlbmQgYXQgZW9sXG4gICAgICAgIGlmIChpZHggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZW5lcmF0ZWQuY29sdW1uKys7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGhpcy53YWxrU291cmNlQ29udGVudHMoZnVuY3Rpb24gKHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpIHtcbiAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgY29kZTogZ2VuZXJhdGVkLmNvZGUsIG1hcDogbWFwIH07XG59O1xuXG5leHBvcnRzLlNvdXJjZU5vZGUgPSBTb3VyY2VOb2RlO1xuIiwiLypcbiAqIENvcHlyaWdodCAyMDA5LTIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLnR4dCBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuZXhwb3J0cy5Tb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL2xpYi9zb3VyY2UtbWFwLWdlbmVyYXRvcicpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSByZXF1aXJlKCcuL2xpYi9zb3VyY2UtbWFwLWNvbnN1bWVyJykuU291cmNlTWFwQ29uc3VtZXI7XG5leHBvcnRzLlNvdXJjZU5vZGUgPSByZXF1aXJlKCcuL2xpYi9zb3VyY2Utbm9kZScpLlNvdXJjZU5vZGU7XG4iLCJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbnZhciBpc01vZGVybiA9IChcbiAgdHlwZW9mIEJ1ZmZlci5hbGxvYyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgQnVmZmVyLmFsbG9jVW5zYWZlID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gJ2Z1bmN0aW9uJ1xuKVxuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyIChpbnB1dCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpbnB1dCkuc2xpY2UoOCwgLTEpID09PSAnQXJyYXlCdWZmZXInXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAob2JqLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYnl0ZU9mZnNldCA+Pj49IDBcblxuICB2YXIgbWF4TGVuZ3RoID0gb2JqLmJ5dGVMZW5ndGggLSBieXRlT2Zmc2V0XG5cbiAgaWYgKG1heExlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidvZmZzZXQnIGlzIG91dCBvZiBib3VuZHNcIilcbiAgfVxuXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IG1heExlbmd0aFxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA+Pj49IDBcblxuICAgIGlmIChsZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiJ2xlbmd0aCcgaXMgb3V0IG9mIGJvdW5kc1wiKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpc01vZGVyblxuICAgID8gQnVmZmVyLmZyb20ob2JqLnNsaWNlKGJ5dGVPZmZzZXQsIGJ5dGVPZmZzZXQgKyBsZW5ndGgpKVxuICAgIDogbmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShvYmouc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGxlbmd0aCkpKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHJldHVybiBpc01vZGVyblxuICAgID8gQnVmZmVyLmZyb20oc3RyaW5nLCBlbmNvZGluZylcbiAgICA6IG5ldyBCdWZmZXIoc3RyaW5nLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYnVmZmVyRnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXNBcnJheUJ1ZmZlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbSh2YWx1ZSlcbiAgICA6IG5ldyBCdWZmZXIodmFsdWUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnVmZmVyRnJvbVxuIiwidmFyIFNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnc291cmNlLW1hcCcpLlNvdXJjZU1hcENvbnN1bWVyO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBmcztcbnRyeSB7XG4gIGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgaWYgKCFmcy5leGlzdHNTeW5jIHx8ICFmcy5yZWFkRmlsZVN5bmMpIHtcbiAgICAvLyBmcyBkb2Vzbid0IGhhdmUgYWxsIG1ldGhvZHMgd2UgbmVlZFxuICAgIGZzID0gbnVsbDtcbiAgfVxufSBjYXRjaCAoZXJyKSB7XG4gIC8qIG5vcCAqL1xufVxuXG52YXIgYnVmZmVyRnJvbSA9IHJlcXVpcmUoJ2J1ZmZlci1mcm9tJyk7XG5cbi8vIE9ubHkgaW5zdGFsbCBvbmNlIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lc1xudmFyIGVycm9yRm9ybWF0dGVySW5zdGFsbGVkID0gZmFsc2U7XG52YXIgdW5jYXVnaHRTaGltSW5zdGFsbGVkID0gZmFsc2U7XG5cbi8vIElmIHRydWUsIHRoZSBjYWNoZXMgYXJlIHJlc2V0IGJlZm9yZSBhIHN0YWNrIHRyYWNlIGZvcm1hdHRpbmcgb3BlcmF0aW9uXG52YXIgZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zID0gZmFsc2U7XG5cbi8vIFN1cHBvcnRzIHticm93c2VyLCBub2RlLCBhdXRvfVxudmFyIGVudmlyb25tZW50ID0gXCJhdXRvXCI7XG5cbi8vIE1hcHMgYSBmaWxlIHBhdGggdG8gYSBzdHJpbmcgY29udGFpbmluZyB0aGUgZmlsZSBjb250ZW50c1xudmFyIGZpbGVDb250ZW50c0NhY2hlID0ge307XG5cbi8vIE1hcHMgYSBmaWxlIHBhdGggdG8gYSBzb3VyY2UgbWFwIGZvciB0aGF0IGZpbGVcbnZhciBzb3VyY2VNYXBDYWNoZSA9IHt9O1xuXG4vLyBSZWdleCBmb3IgZGV0ZWN0aW5nIHNvdXJjZSBtYXBzXG52YXIgcmVTb3VyY2VNYXAgPSAvXmRhdGE6YXBwbGljYXRpb25cXC9qc29uW14sXStiYXNlNjQsLztcblxuLy8gUHJpb3JpdHkgbGlzdCBvZiByZXRyaWV2ZSBoYW5kbGVyc1xudmFyIHJldHJpZXZlRmlsZUhhbmRsZXJzID0gW107XG52YXIgcmV0cmlldmVNYXBIYW5kbGVycyA9IFtdO1xuXG5mdW5jdGlvbiBpc0luQnJvd3NlcigpIHtcbiAgaWYgKGVudmlyb25tZW50ID09PSBcImJyb3dzZXJcIilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKGVudmlyb25tZW50ID09PSBcIm5vZGVcIilcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSAmJiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSAmJiAhKHdpbmRvdy5yZXF1aXJlICYmIHdpbmRvdy5tb2R1bGUgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gXCJyZW5kZXJlclwiKSk7XG59XG5cbmZ1bmN0aW9uIGhhc0dsb2JhbFByb2Nlc3NFdmVudEVtaXR0ZXIoKSB7XG4gIHJldHVybiAoKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JykgJiYgKHByb2Nlc3MgIT09IG51bGwpICYmICh0eXBlb2YgcHJvY2Vzcy5vbiA9PT0gJ2Z1bmN0aW9uJykpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVyRXhlYyhsaXN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciByZXQgPSBsaXN0W2ldKGFyZyk7XG4gICAgICBpZiAocmV0KSB7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG52YXIgcmV0cmlldmVGaWxlID0gaGFuZGxlckV4ZWMocmV0cmlldmVGaWxlSGFuZGxlcnMpO1xuXG5yZXRyaWV2ZUZpbGVIYW5kbGVycy5wdXNoKGZ1bmN0aW9uKHBhdGgpIHtcbiAgLy8gVHJpbSB0aGUgcGF0aCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgbm8gZXh0cmEgd2hpdGVzcGFjZS5cbiAgcGF0aCA9IHBhdGgudHJpbSgpO1xuICBpZiAoL15maWxlOi8udGVzdChwYXRoKSkge1xuICAgIC8vIGV4aXN0c1N5bmMvcmVhZEZpbGVTeW5jIGNhbid0IGhhbmRsZSBmaWxlIHByb3RvY29sLCBidXQgb25jZSBzdHJpcHBlZCwgaXQgd29ya3NcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9maWxlOlxcL1xcL1xcLyhcXHc6KT8vLCBmdW5jdGlvbihwcm90b2NvbCwgZHJpdmUpIHtcbiAgICAgIHJldHVybiBkcml2ZSA/XG4gICAgICAgICcnIDogLy8gZmlsZTovLy9DOi9kaXIvZmlsZSAtPiBDOi9kaXIvZmlsZVxuICAgICAgICAnLyc7IC8vIGZpbGU6Ly8vcm9vdC1kaXIvZmlsZSAtPiAvcm9vdC1kaXIvZmlsZVxuICAgIH0pO1xuICB9XG4gIGlmIChwYXRoIGluIGZpbGVDb250ZW50c0NhY2hlKSB7XG4gICAgcmV0dXJuIGZpbGVDb250ZW50c0NhY2hlW3BhdGhdO1xuICB9XG5cbiAgdmFyIGNvbnRlbnRzID0gJyc7XG4gIHRyeSB7XG4gICAgaWYgKCFmcykge1xuICAgICAgLy8gVXNlIFNKQVggaWYgd2UgYXJlIGluIHRoZSBicm93c2VyXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4aHIub3BlbignR0VUJywgcGF0aCwgLyoqIGFzeW5jICovIGZhbHNlKTtcbiAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICBjb250ZW50cyA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmcy5leGlzdHNTeW5jKHBhdGgpKSB7XG4gICAgICAvLyBPdGhlcndpc2UsIHVzZSB0aGUgZmlsZXN5c3RlbVxuICAgICAgY29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0ZjgnKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgLyogaWdub3JlIGFueSBlcnJvcnMgKi9cbiAgfVxuXG4gIHJldHVybiBmaWxlQ29udGVudHNDYWNoZVtwYXRoXSA9IGNvbnRlbnRzO1xufSk7XG5cbi8vIFN1cHBvcnQgVVJMcyByZWxhdGl2ZSB0byBhIGRpcmVjdG9yeSwgYnV0IGJlIGNhcmVmdWwgYWJvdXQgYSBwcm90b2NvbCBwcmVmaXhcbi8vIGluIGNhc2Ugd2UgYXJlIGluIHRoZSBicm93c2VyIChpLmUuIGRpcmVjdG9yaWVzIG1heSBzdGFydCB3aXRoIFwiaHR0cDovL1wiIG9yIFwiZmlsZTovLy9cIilcbmZ1bmN0aW9uIHN1cHBvcnRSZWxhdGl2ZVVSTChmaWxlLCB1cmwpIHtcbiAgaWYgKCFmaWxlKSByZXR1cm4gdXJsO1xuICB2YXIgZGlyID0gcGF0aC5kaXJuYW1lKGZpbGUpO1xuICB2YXIgbWF0Y2ggPSAvXlxcdys6XFwvXFwvW15cXC9dKi8uZXhlYyhkaXIpO1xuICB2YXIgcHJvdG9jb2wgPSBtYXRjaCA/IG1hdGNoWzBdIDogJyc7XG4gIHZhciBzdGFydFBhdGggPSBkaXIuc2xpY2UocHJvdG9jb2wubGVuZ3RoKTtcbiAgaWYgKHByb3RvY29sICYmIC9eXFwvXFx3XFw6Ly50ZXN0KHN0YXJ0UGF0aCkpIHtcbiAgICAvLyBoYW5kbGUgZmlsZTovLy9DOi8gcGF0aHNcbiAgICBwcm90b2NvbCArPSAnLyc7XG4gICAgcmV0dXJuIHByb3RvY29sICsgcGF0aC5yZXNvbHZlKGRpci5zbGljZShwcm90b2NvbC5sZW5ndGgpLCB1cmwpLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgfVxuICByZXR1cm4gcHJvdG9jb2wgKyBwYXRoLnJlc29sdmUoZGlyLnNsaWNlKHByb3RvY29sLmxlbmd0aCksIHVybCk7XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlU291cmNlTWFwVVJMKHNvdXJjZSkge1xuICB2YXIgZmlsZURhdGE7XG5cbiAgaWYgKGlzSW5Ccm93c2VyKCkpIHtcbiAgICAgdHJ5IHtcbiAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgeGhyLm9wZW4oJ0dFVCcsIHNvdXJjZSwgZmFsc2UpO1xuICAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgICAgIGZpbGVEYXRhID0geGhyLnJlYWR5U3RhdGUgPT09IDQgPyB4aHIucmVzcG9uc2VUZXh0IDogbnVsbDtcblxuICAgICAgIC8vIFN1cHBvcnQgcHJvdmlkaW5nIGEgc291cmNlTWFwcGluZ1VSTCB2aWEgdGhlIFNvdXJjZU1hcCBoZWFkZXJcbiAgICAgICB2YXIgc291cmNlTWFwSGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiU291cmNlTWFwXCIpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5nZXRSZXNwb25zZUhlYWRlcihcIlgtU291cmNlTWFwXCIpO1xuICAgICAgIGlmIChzb3VyY2VNYXBIZWFkZXIpIHtcbiAgICAgICAgIHJldHVybiBzb3VyY2VNYXBIZWFkZXI7XG4gICAgICAgfVxuICAgICB9IGNhdGNoIChlKSB7XG4gICAgIH1cbiAgfVxuXG4gIC8vIEdldCB0aGUgVVJMIG9mIHRoZSBzb3VyY2UgbWFwXG4gIGZpbGVEYXRhID0gcmV0cmlldmVGaWxlKHNvdXJjZSk7XG4gIHZhciByZSA9IC8oPzpcXC9cXC9bQCNdW1xcc10qc291cmNlTWFwcGluZ1VSTD0oW15cXHMnXCJdKylbXFxzXSokKXwoPzpcXC9cXCpbQCNdW1xcc10qc291cmNlTWFwcGluZ1VSTD0oW15cXHMqJ1wiXSspW1xcc10qKD86XFwqXFwvKVtcXHNdKiQpL21nO1xuICAvLyBLZWVwIGV4ZWN1dGluZyB0aGUgc2VhcmNoIHRvIGZpbmQgdGhlICpsYXN0KiBzb3VyY2VNYXBwaW5nVVJMIHRvIGF2b2lkXG4gIC8vIHBpY2tpbmcgdXAgc291cmNlTWFwcGluZ1VSTHMgZnJvbSBjb21tZW50cywgc3RyaW5ncywgZXRjLlxuICB2YXIgbGFzdE1hdGNoLCBtYXRjaDtcbiAgd2hpbGUgKG1hdGNoID0gcmUuZXhlYyhmaWxlRGF0YSkpIGxhc3RNYXRjaCA9IG1hdGNoO1xuICBpZiAoIWxhc3RNYXRjaCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBsYXN0TWF0Y2hbMV07XG59O1xuXG4vLyBDYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgcmV0cmlldmVTb3VyY2VNYXAgb3B0aW9uIHRvIGluc3RhbGwuIFRha2VzIGFcbi8vIGdlbmVyYXRlZCBzb3VyY2UgZmlsZW5hbWU7IHJldHVybnMgYSB7bWFwLCBvcHRpb25hbCB1cmx9IG9iamVjdCwgb3IgbnVsbCBpZlxuLy8gdGhlcmUgaXMgbm8gc291cmNlIG1hcC4gIFRoZSBtYXAgZmllbGQgbWF5IGJlIGVpdGhlciBhIHN0cmluZyBvciB0aGUgcGFyc2VkXG4vLyBKU09OIG9iamVjdCAoaWUsIGl0IG11c3QgYmUgYSB2YWxpZCBhcmd1bWVudCB0byB0aGUgU291cmNlTWFwQ29uc3VtZXJcbi8vIGNvbnN0cnVjdG9yKS5cbnZhciByZXRyaWV2ZVNvdXJjZU1hcCA9IGhhbmRsZXJFeGVjKHJldHJpZXZlTWFwSGFuZGxlcnMpO1xucmV0cmlldmVNYXBIYW5kbGVycy5wdXNoKGZ1bmN0aW9uKHNvdXJjZSkge1xuICB2YXIgc291cmNlTWFwcGluZ1VSTCA9IHJldHJpZXZlU291cmNlTWFwVVJMKHNvdXJjZSk7XG4gIGlmICghc291cmNlTWFwcGluZ1VSTCkgcmV0dXJuIG51bGw7XG5cbiAgLy8gUmVhZCB0aGUgY29udGVudHMgb2YgdGhlIHNvdXJjZSBtYXBcbiAgdmFyIHNvdXJjZU1hcERhdGE7XG4gIGlmIChyZVNvdXJjZU1hcC50ZXN0KHNvdXJjZU1hcHBpbmdVUkwpKSB7XG4gICAgLy8gU3VwcG9ydCBzb3VyY2UgbWFwIFVSTCBhcyBhIGRhdGEgdXJsXG4gICAgdmFyIHJhd0RhdGEgPSBzb3VyY2VNYXBwaW5nVVJMLnNsaWNlKHNvdXJjZU1hcHBpbmdVUkwuaW5kZXhPZignLCcpICsgMSk7XG4gICAgc291cmNlTWFwRGF0YSA9IGJ1ZmZlckZyb20ocmF3RGF0YSwgXCJiYXNlNjRcIikudG9TdHJpbmcoKTtcbiAgICBzb3VyY2VNYXBwaW5nVVJMID0gc291cmNlO1xuICB9IGVsc2Uge1xuICAgIC8vIFN1cHBvcnQgc291cmNlIG1hcCBVUkxzIHJlbGF0aXZlIHRvIHRoZSBzb3VyY2UgVVJMXG4gICAgc291cmNlTWFwcGluZ1VSTCA9IHN1cHBvcnRSZWxhdGl2ZVVSTChzb3VyY2UsIHNvdXJjZU1hcHBpbmdVUkwpO1xuICAgIHNvdXJjZU1hcERhdGEgPSByZXRyaWV2ZUZpbGUoc291cmNlTWFwcGluZ1VSTCk7XG4gIH1cblxuICBpZiAoIXNvdXJjZU1hcERhdGEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdXJsOiBzb3VyY2VNYXBwaW5nVVJMLFxuICAgIG1hcDogc291cmNlTWFwRGF0YVxuICB9O1xufSk7XG5cbmZ1bmN0aW9uIG1hcFNvdXJjZVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBzb3VyY2VNYXBDYWNoZVtwb3NpdGlvbi5zb3VyY2VdO1xuICBpZiAoIXNvdXJjZU1hcCkge1xuICAgIC8vIENhbGwgdGhlIChvdmVycmlkZWFibGUpIHJldHJpZXZlU291cmNlTWFwIGZ1bmN0aW9uIHRvIGdldCB0aGUgc291cmNlIG1hcC5cbiAgICB2YXIgdXJsQW5kTWFwID0gcmV0cmlldmVTb3VyY2VNYXAocG9zaXRpb24uc291cmNlKTtcbiAgICBpZiAodXJsQW5kTWFwKSB7XG4gICAgICBzb3VyY2VNYXAgPSBzb3VyY2VNYXBDYWNoZVtwb3NpdGlvbi5zb3VyY2VdID0ge1xuICAgICAgICB1cmw6IHVybEFuZE1hcC51cmwsXG4gICAgICAgIG1hcDogbmV3IFNvdXJjZU1hcENvbnN1bWVyKHVybEFuZE1hcC5tYXApXG4gICAgICB9O1xuXG4gICAgICAvLyBMb2FkIGFsbCBzb3VyY2VzIHN0b3JlZCBpbmxpbmUgd2l0aCB0aGUgc291cmNlIG1hcCBpbnRvIHRoZSBmaWxlIGNhY2hlXG4gICAgICAvLyB0byBwcmV0ZW5kIGxpa2UgdGhleSBhcmUgYWxyZWFkeSBsb2FkZWQuIFRoZXkgbWF5IG5vdCBleGlzdCBvbiBkaXNrLlxuICAgICAgaWYgKHNvdXJjZU1hcC5tYXAuc291cmNlc0NvbnRlbnQpIHtcbiAgICAgICAgc291cmNlTWFwLm1hcC5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oc291cmNlLCBpKSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnRzID0gc291cmNlTWFwLm1hcC5zb3VyY2VzQ29udGVudFtpXTtcbiAgICAgICAgICBpZiAoY29udGVudHMpIHtcbiAgICAgICAgICAgIHZhciB1cmwgPSBzdXBwb3J0UmVsYXRpdmVVUkwoc291cmNlTWFwLnVybCwgc291cmNlKTtcbiAgICAgICAgICAgIGZpbGVDb250ZW50c0NhY2hlW3VybF0gPSBjb250ZW50cztcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzb3VyY2VNYXAgPSBzb3VyY2VNYXBDYWNoZVtwb3NpdGlvbi5zb3VyY2VdID0ge1xuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIG1hcDogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXNvbHZlIHRoZSBzb3VyY2UgVVJMIHJlbGF0aXZlIHRvIHRoZSBVUkwgb2YgdGhlIHNvdXJjZSBtYXBcbiAgaWYgKHNvdXJjZU1hcCAmJiBzb3VyY2VNYXAubWFwICYmIHR5cGVvZiBzb3VyY2VNYXAubWFwLm9yaWdpbmFsUG9zaXRpb25Gb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgb3JpZ2luYWxQb3NpdGlvbiA9IHNvdXJjZU1hcC5tYXAub3JpZ2luYWxQb3NpdGlvbkZvcihwb3NpdGlvbik7XG5cbiAgICAvLyBPbmx5IHJldHVybiB0aGUgb3JpZ2luYWwgcG9zaXRpb24gaWYgYSBtYXRjaGluZyBsaW5lIHdhcyBmb3VuZC4gSWYgbm9cbiAgICAvLyBtYXRjaGluZyBsaW5lIGlzIGZvdW5kIHRoZW4gd2UgcmV0dXJuIHBvc2l0aW9uIGluc3RlYWQsIHdoaWNoIHdpbGwgY2F1c2VcbiAgICAvLyB0aGUgc3RhY2sgdHJhY2UgdG8gcHJpbnQgdGhlIHBhdGggYW5kIGxpbmUgZm9yIHRoZSBjb21waWxlZCBmaWxlLiBJdCBpc1xuICAgIC8vIGJldHRlciB0byBnaXZlIGEgcHJlY2lzZSBsb2NhdGlvbiBpbiB0aGUgY29tcGlsZWQgZmlsZSB0aGFuIGEgdmFndWVcbiAgICAvLyBsb2NhdGlvbiBpbiB0aGUgb3JpZ2luYWwgZmlsZS5cbiAgICBpZiAob3JpZ2luYWxQb3NpdGlvbi5zb3VyY2UgIT09IG51bGwpIHtcbiAgICAgIG9yaWdpbmFsUG9zaXRpb24uc291cmNlID0gc3VwcG9ydFJlbGF0aXZlVVJMKFxuICAgICAgICBzb3VyY2VNYXAudXJsLCBvcmlnaW5hbFBvc2l0aW9uLnNvdXJjZSk7XG4gICAgICByZXR1cm4gb3JpZ2luYWxQb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9zaXRpb247XG59XG5cbi8vIFBhcnNlcyBjb2RlIGdlbmVyYXRlZCBieSBGb3JtYXRFdmFsT3JpZ2luKCksIGEgZnVuY3Rpb24gaW5zaWRlIFY4OlxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9tZXNzYWdlcy5qc1xuZnVuY3Rpb24gbWFwRXZhbE9yaWdpbihvcmlnaW4pIHtcbiAgLy8gTW9zdCBldmFsKCkgY2FsbHMgYXJlIGluIHRoaXMgZm9ybWF0XG4gIHZhciBtYXRjaCA9IC9eZXZhbCBhdCAoW14oXSspIFxcKCguKyk6KFxcZCspOihcXGQrKVxcKSQvLmV4ZWMob3JpZ2luKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gbWFwU291cmNlUG9zaXRpb24oe1xuICAgICAgc291cmNlOiBtYXRjaFsyXSxcbiAgICAgIGxpbmU6ICttYXRjaFszXSxcbiAgICAgIGNvbHVtbjogbWF0Y2hbNF0gLSAxXG4gICAgfSk7XG4gICAgcmV0dXJuICdldmFsIGF0ICcgKyBtYXRjaFsxXSArICcgKCcgKyBwb3NpdGlvbi5zb3VyY2UgKyAnOicgK1xuICAgICAgcG9zaXRpb24ubGluZSArICc6JyArIChwb3NpdGlvbi5jb2x1bW4gKyAxKSArICcpJztcbiAgfVxuXG4gIC8vIFBhcnNlIG5lc3RlZCBldmFsKCkgY2FsbHMgdXNpbmcgcmVjdXJzaW9uXG4gIG1hdGNoID0gL15ldmFsIGF0IChbXihdKykgXFwoKC4rKVxcKSQvLmV4ZWMob3JpZ2luKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgcmV0dXJuICdldmFsIGF0ICcgKyBtYXRjaFsxXSArICcgKCcgKyBtYXBFdmFsT3JpZ2luKG1hdGNoWzJdKSArICcpJztcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB3ZSBzdGlsbCByZXR1cm4gdXNlZnVsIGluZm9ybWF0aW9uIGlmIHdlIGRpZG4ndCBmaW5kIGFueXRoaW5nXG4gIHJldHVybiBvcmlnaW47XG59XG5cbi8vIFRoaXMgaXMgY29waWVkIGFsbW9zdCB2ZXJiYXRpbSBmcm9tIHRoZSBWOCBzb3VyY2UgY29kZSBhdFxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9tZXNzYWdlcy5qcy4gVGhlXG4vLyBpbXBsZW1lbnRhdGlvbiBvZiB3cmFwQ2FsbFNpdGUoKSB1c2VkIHRvIGp1c3QgZm9yd2FyZCB0byB0aGUgYWN0dWFsIHNvdXJjZVxuLy8gY29kZSBvZiBDYWxsU2l0ZS5wcm90b3R5cGUudG9TdHJpbmcgYnV0IHVuZm9ydHVuYXRlbHkgYSBuZXcgcmVsZWFzZSBvZiBWOFxuLy8gZGlkIHNvbWV0aGluZyB0byB0aGUgcHJvdG90eXBlIGNoYWluIGFuZCBicm9rZSB0aGUgc2hpbS4gVGhlIG9ubHkgZml4IElcbi8vIGNvdWxkIGZpbmQgd2FzIGNvcHkvcGFzdGUuXG5mdW5jdGlvbiBDYWxsU2l0ZVRvU3RyaW5nKCkge1xuICB2YXIgZmlsZU5hbWU7XG4gIHZhciBmaWxlTG9jYXRpb24gPSBcIlwiO1xuICBpZiAodGhpcy5pc05hdGl2ZSgpKSB7XG4gICAgZmlsZUxvY2F0aW9uID0gXCJuYXRpdmVcIjtcbiAgfSBlbHNlIHtcbiAgICBmaWxlTmFtZSA9IHRoaXMuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKCk7XG4gICAgaWYgKCFmaWxlTmFtZSAmJiB0aGlzLmlzRXZhbCgpKSB7XG4gICAgICBmaWxlTG9jYXRpb24gPSB0aGlzLmdldEV2YWxPcmlnaW4oKTtcbiAgICAgIGZpbGVMb2NhdGlvbiArPSBcIiwgXCI7ICAvLyBFeHBlY3Rpbmcgc291cmNlIHBvc2l0aW9uIHRvIGZvbGxvdy5cbiAgICB9XG5cbiAgICBpZiAoZmlsZU5hbWUpIHtcbiAgICAgIGZpbGVMb2NhdGlvbiArPSBmaWxlTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU291cmNlIGNvZGUgZG9lcyBub3Qgb3JpZ2luYXRlIGZyb20gYSBmaWxlIGFuZCBpcyBub3QgbmF0aXZlLCBidXQgd2VcbiAgICAgIC8vIGNhbiBzdGlsbCBnZXQgdGhlIHNvdXJjZSBwb3NpdGlvbiBpbnNpZGUgdGhlIHNvdXJjZSBzdHJpbmcsIGUuZy4gaW5cbiAgICAgIC8vIGFuIGV2YWwgc3RyaW5nLlxuICAgICAgZmlsZUxvY2F0aW9uICs9IFwiPGFub255bW91cz5cIjtcbiAgICB9XG4gICAgdmFyIGxpbmVOdW1iZXIgPSB0aGlzLmdldExpbmVOdW1iZXIoKTtcbiAgICBpZiAobGluZU51bWJlciAhPSBudWxsKSB7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gXCI6XCIgKyBsaW5lTnVtYmVyO1xuICAgICAgdmFyIGNvbHVtbk51bWJlciA9IHRoaXMuZ2V0Q29sdW1uTnVtYmVyKCk7XG4gICAgICBpZiAoY29sdW1uTnVtYmVyKSB7XG4gICAgICAgIGZpbGVMb2NhdGlvbiArPSBcIjpcIiArIGNvbHVtbk51bWJlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgbGluZSA9IFwiXCI7XG4gIHZhciBmdW5jdGlvbk5hbWUgPSB0aGlzLmdldEZ1bmN0aW9uTmFtZSgpO1xuICB2YXIgYWRkU3VmZml4ID0gdHJ1ZTtcbiAgdmFyIGlzQ29uc3RydWN0b3IgPSB0aGlzLmlzQ29uc3RydWN0b3IoKTtcbiAgdmFyIGlzTWV0aG9kQ2FsbCA9ICEodGhpcy5pc1RvcGxldmVsKCkgfHwgaXNDb25zdHJ1Y3Rvcik7XG4gIGlmIChpc01ldGhvZENhbGwpIHtcbiAgICB2YXIgdHlwZU5hbWUgPSB0aGlzLmdldFR5cGVOYW1lKCk7XG4gICAgLy8gRml4ZXMgc2hpbSB0byBiZSBiYWNrd2FyZCBjb21wYXRhYmxlIHdpdGggTm9kZSB2MCB0byB2NFxuICAgIGlmICh0eXBlTmFtZSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgdHlwZU5hbWUgPSBcIm51bGxcIjtcbiAgICB9XG4gICAgdmFyIG1ldGhvZE5hbWUgPSB0aGlzLmdldE1ldGhvZE5hbWUoKTtcbiAgICBpZiAoZnVuY3Rpb25OYW1lKSB7XG4gICAgICBpZiAodHlwZU5hbWUgJiYgZnVuY3Rpb25OYW1lLmluZGV4T2YodHlwZU5hbWUpICE9IDApIHtcbiAgICAgICAgbGluZSArPSB0eXBlTmFtZSArIFwiLlwiO1xuICAgICAgfVxuICAgICAgbGluZSArPSBmdW5jdGlvbk5hbWU7XG4gICAgICBpZiAobWV0aG9kTmFtZSAmJiBmdW5jdGlvbk5hbWUuaW5kZXhPZihcIi5cIiArIG1ldGhvZE5hbWUpICE9IGZ1bmN0aW9uTmFtZS5sZW5ndGggLSBtZXRob2ROYW1lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgbGluZSArPSBcIiBbYXMgXCIgKyBtZXRob2ROYW1lICsgXCJdXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmUgKz0gdHlwZU5hbWUgKyBcIi5cIiArIChtZXRob2ROYW1lIHx8IFwiPGFub255bW91cz5cIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQ29uc3RydWN0b3IpIHtcbiAgICBsaW5lICs9IFwibmV3IFwiICsgKGZ1bmN0aW9uTmFtZSB8fCBcIjxhbm9ueW1vdXM+XCIpO1xuICB9IGVsc2UgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgIGxpbmUgKz0gZnVuY3Rpb25OYW1lO1xuICB9IGVsc2Uge1xuICAgIGxpbmUgKz0gZmlsZUxvY2F0aW9uO1xuICAgIGFkZFN1ZmZpeCA9IGZhbHNlO1xuICB9XG4gIGlmIChhZGRTdWZmaXgpIHtcbiAgICBsaW5lICs9IFwiIChcIiArIGZpbGVMb2NhdGlvbiArIFwiKVwiO1xuICB9XG4gIHJldHVybiBsaW5lO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNhbGxTaXRlKGZyYW1lKSB7XG4gIHZhciBvYmplY3QgPSB7fTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKGZyYW1lKSkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgb2JqZWN0W25hbWVdID0gL14oPzppc3xnZXQpLy50ZXN0KG5hbWUpID8gZnVuY3Rpb24oKSB7IHJldHVybiBmcmFtZVtuYW1lXS5jYWxsKGZyYW1lKTsgfSA6IGZyYW1lW25hbWVdO1xuICB9KTtcbiAgb2JqZWN0LnRvU3RyaW5nID0gQ2FsbFNpdGVUb1N0cmluZztcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gd3JhcENhbGxTaXRlKGZyYW1lLCBzdGF0ZSkge1xuICAvLyBwcm92aWRlcyBpbnRlcmZhY2UgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXRlID0geyBuZXh0UG9zaXRpb246IG51bGwsIGN1clBvc2l0aW9uOiBudWxsIH1cbiAgfVxuICBpZihmcmFtZS5pc05hdGl2ZSgpKSB7XG4gICAgc3RhdGUuY3VyUG9zaXRpb24gPSBudWxsO1xuICAgIHJldHVybiBmcmFtZTtcbiAgfVxuXG4gIC8vIE1vc3QgY2FsbCBzaXRlcyB3aWxsIHJldHVybiB0aGUgc291cmNlIGZpbGUgZnJvbSBnZXRGaWxlTmFtZSgpLCBidXQgY29kZVxuICAvLyBwYXNzZWQgdG8gZXZhbCgpIGVuZGluZyBpbiBcIi8vIyBzb3VyY2VVUkw9Li4uXCIgd2lsbCByZXR1cm4gdGhlIHNvdXJjZSBmaWxlXG4gIC8vIGZyb20gZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKCkgaW5zdGVhZFxuICB2YXIgc291cmNlID0gZnJhbWUuZ2V0RmlsZU5hbWUoKSB8fCBmcmFtZS5nZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwoKTtcbiAgaWYgKHNvdXJjZSkge1xuICAgIHZhciBsaW5lID0gZnJhbWUuZ2V0TGluZU51bWJlcigpO1xuICAgIHZhciBjb2x1bW4gPSBmcmFtZS5nZXRDb2x1bW5OdW1iZXIoKSAtIDE7XG5cbiAgICAvLyBGaXggcG9zaXRpb24gaW4gTm9kZSB3aGVyZSBzb21lIChpbnRlcm5hbCkgY29kZSBpcyBwcmVwZW5kZWQuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldmFudy9ub2RlLXNvdXJjZS1tYXAtc3VwcG9ydC9pc3N1ZXMvMzZcbiAgICAvLyBIZWFkZXIgcmVtb3ZlZCBpbiBub2RlIGF0IF4xMC4xNiB8fCA+PTExLjExLjBcbiAgICAvLyB2MTEgaXMgbm90IGFuIExUUyBjYW5kaWRhdGUsIHdlIGNhbiBqdXN0IHRlc3QgdGhlIG9uZSB2ZXJzaW9uIHdpdGggaXQuXG4gICAgLy8gVGVzdCBub2RlIHZlcnNpb25zIGZvcjogMTAuMTYtMTksIDEwLjIwKywgMTItMTksIDIwLTk5LCAxMDArLCBvciAxMS4xMVxuICAgIHZhciBub0hlYWRlciA9IC9edigxMFxcLjFbNi05XXwxMFxcLlsyLTldWzAtOV18MTBcXC5bMC05XXszLH18MVsyLTldXFxkKnxbMi05XVxcZHxcXGR7Myx9fDExXFwuMTEpLztcbiAgICB2YXIgaGVhZGVyTGVuZ3RoID0gbm9IZWFkZXIudGVzdChwcm9jZXNzLnZlcnNpb24pID8gMCA6IDYyO1xuICAgIGlmIChsaW5lID09PSAxICYmIGNvbHVtbiA+IGhlYWRlckxlbmd0aCAmJiAhaXNJbkJyb3dzZXIoKSAmJiAhZnJhbWUuaXNFdmFsKCkpIHtcbiAgICAgIGNvbHVtbiAtPSBoZWFkZXJMZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHBvc2l0aW9uID0gbWFwU291cmNlUG9zaXRpb24oe1xuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgY29sdW1uOiBjb2x1bW5cbiAgICB9KTtcbiAgICBzdGF0ZS5jdXJQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIGZyYW1lID0gY2xvbmVDYWxsU2l0ZShmcmFtZSk7XG4gICAgdmFyIG9yaWdpbmFsRnVuY3Rpb25OYW1lID0gZnJhbWUuZ2V0RnVuY3Rpb25OYW1lO1xuICAgIGZyYW1lLmdldEZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHN0YXRlLm5leHRQb3NpdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uTmFtZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlLm5leHRQb3NpdGlvbi5uYW1lIHx8IG9yaWdpbmFsRnVuY3Rpb25OYW1lKCk7XG4gICAgfTtcbiAgICBmcmFtZS5nZXRGaWxlTmFtZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9zaXRpb24uc291cmNlOyB9O1xuICAgIGZyYW1lLmdldExpbmVOdW1iZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHBvc2l0aW9uLmxpbmU7IH07XG4gICAgZnJhbWUuZ2V0Q29sdW1uTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiBwb3NpdGlvbi5jb2x1bW4gKyAxOyB9O1xuICAgIGZyYW1lLmdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9zaXRpb24uc291cmNlOyB9O1xuICAgIHJldHVybiBmcmFtZTtcbiAgfVxuXG4gIC8vIENvZGUgY2FsbGVkIHVzaW5nIGV2YWwoKSBuZWVkcyBzcGVjaWFsIGhhbmRsaW5nXG4gIHZhciBvcmlnaW4gPSBmcmFtZS5pc0V2YWwoKSAmJiBmcmFtZS5nZXRFdmFsT3JpZ2luKCk7XG4gIGlmIChvcmlnaW4pIHtcbiAgICBvcmlnaW4gPSBtYXBFdmFsT3JpZ2luKG9yaWdpbik7XG4gICAgZnJhbWUgPSBjbG9uZUNhbGxTaXRlKGZyYW1lKTtcbiAgICBmcmFtZS5nZXRFdmFsT3JpZ2luID0gZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW47IH07XG4gICAgcmV0dXJuIGZyYW1lO1xuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiB3ZSB3ZXJlIHVuYWJsZSB0byBjaGFuZ2UgdGhlIHNvdXJjZSBwb3NpdGlvblxuICByZXR1cm4gZnJhbWU7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgcGFydCBvZiB0aGUgVjggc3RhY2sgdHJhY2UgQVBJLCBmb3IgbW9yZSBpbmZvIHNlZTpcbi8vIGh0dHBzOi8vdjguZGV2L2RvY3Mvc3RhY2stdHJhY2UtYXBpXG5mdW5jdGlvbiBwcmVwYXJlU3RhY2tUcmFjZShlcnJvciwgc3RhY2spIHtcbiAgaWYgKGVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucykge1xuICAgIGZpbGVDb250ZW50c0NhY2hlID0ge307XG4gICAgc291cmNlTWFwQ2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBuYW1lID0gZXJyb3IubmFtZSB8fCAnRXJyb3InO1xuICB2YXIgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgfHwgJyc7XG4gIHZhciBlcnJvclN0cmluZyA9IG5hbWUgKyBcIjogXCIgKyBtZXNzYWdlO1xuXG4gIHZhciBzdGF0ZSA9IHsgbmV4dFBvc2l0aW9uOiBudWxsLCBjdXJQb3NpdGlvbjogbnVsbCB9O1xuICB2YXIgcHJvY2Vzc2VkU3RhY2sgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgcHJvY2Vzc2VkU3RhY2sucHVzaCgnXFxuICAgIGF0ICcgKyB3cmFwQ2FsbFNpdGUoc3RhY2tbaV0sIHN0YXRlKSk7XG4gICAgc3RhdGUubmV4dFBvc2l0aW9uID0gc3RhdGUuY3VyUG9zaXRpb247XG4gIH1cbiAgc3RhdGUuY3VyUG9zaXRpb24gPSBzdGF0ZS5uZXh0UG9zaXRpb24gPSBudWxsO1xuICByZXR1cm4gZXJyb3JTdHJpbmcgKyBwcm9jZXNzZWRTdGFjay5yZXZlcnNlKCkuam9pbignJyk7XG59XG5cbi8vIEdlbmVyYXRlIHBvc2l0aW9uIGFuZCBzbmlwcGV0IG9mIG9yaWdpbmFsIHNvdXJjZSB3aXRoIHBvaW50ZXJcbmZ1bmN0aW9uIGdldEVycm9yU291cmNlKGVycm9yKSB7XG4gIHZhciBtYXRjaCA9IC9cXG4gICAgYXQgW14oXSsgXFwoKC4qKTooXFxkKyk6KFxcZCspXFwpLy5leGVjKGVycm9yLnN0YWNrKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHNvdXJjZSA9IG1hdGNoWzFdO1xuICAgIHZhciBsaW5lID0gK21hdGNoWzJdO1xuICAgIHZhciBjb2x1bW4gPSArbWF0Y2hbM107XG5cbiAgICAvLyBTdXBwb3J0IHRoZSBpbmxpbmUgc291cmNlQ29udGVudHMgaW5zaWRlIHRoZSBzb3VyY2UgbWFwXG4gICAgdmFyIGNvbnRlbnRzID0gZmlsZUNvbnRlbnRzQ2FjaGVbc291cmNlXTtcblxuICAgIC8vIFN1cHBvcnQgZmlsZXMgb24gZGlza1xuICAgIGlmICghY29udGVudHMgJiYgZnMgJiYgZnMuZXhpc3RzU3luYyhzb3VyY2UpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhzb3VyY2UsICd1dGY4Jyk7XG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICBjb250ZW50cyA9ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvcm1hdCB0aGUgbGluZSBmcm9tIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29kZSBsaWtlIG5vZGUgZG9lc1xuICAgIGlmIChjb250ZW50cykge1xuICAgICAgdmFyIGNvZGUgPSBjb250ZW50cy5zcGxpdCgvKD86XFxyXFxufFxccnxcXG4pLylbbGluZSAtIDFdO1xuICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZSArICc6JyArIGxpbmUgKyAnXFxuJyArIGNvZGUgKyAnXFxuJyArXG4gICAgICAgICAgbmV3IEFycmF5KGNvbHVtbikuam9pbignICcpICsgJ14nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcHJpbnRFcnJvckFuZEV4aXQgKGVycm9yKSB7XG4gIHZhciBzb3VyY2UgPSBnZXRFcnJvclNvdXJjZShlcnJvcik7XG5cbiAgLy8gRW5zdXJlIGVycm9yIGlzIHByaW50ZWQgc3luY2hyb25vdXNseSBhbmQgbm90IHRydW5jYXRlZFxuICBpZiAocHJvY2Vzcy5zdGRlcnIuX2hhbmRsZSAmJiBwcm9jZXNzLnN0ZGVyci5faGFuZGxlLnNldEJsb2NraW5nKSB7XG4gICAgcHJvY2Vzcy5zdGRlcnIuX2hhbmRsZS5zZXRCbG9ja2luZyh0cnVlKTtcbiAgfVxuXG4gIGlmIChzb3VyY2UpIHtcbiAgICBjb25zb2xlLmVycm9yKCk7XG4gICAgY29uc29sZS5lcnJvcihzb3VyY2UpO1xuICB9XG5cbiAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuZnVuY3Rpb24gc2hpbUVtaXRVbmNhdWdodEV4Y2VwdGlvbiAoKSB7XG4gIHZhciBvcmlnRW1pdCA9IHByb2Nlc3MuZW1pdDtcblxuICBwcm9jZXNzLmVtaXQgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICh0eXBlID09PSAndW5jYXVnaHRFeGNlcHRpb24nKSB7XG4gICAgICB2YXIgaGFzU3RhY2sgPSAoYXJndW1lbnRzWzFdICYmIGFyZ3VtZW50c1sxXS5zdGFjayk7XG4gICAgICB2YXIgaGFzTGlzdGVuZXJzID0gKHRoaXMubGlzdGVuZXJzKHR5cGUpLmxlbmd0aCA+IDApO1xuXG4gICAgICBpZiAoaGFzU3RhY2sgJiYgIWhhc0xpc3RlbmVycykge1xuICAgICAgICByZXR1cm4gcHJpbnRFcnJvckFuZEV4aXQoYXJndW1lbnRzWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3JpZ0VtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxudmFyIG9yaWdpbmFsUmV0cmlldmVGaWxlSGFuZGxlcnMgPSByZXRyaWV2ZUZpbGVIYW5kbGVycy5zbGljZSgwKTtcbnZhciBvcmlnaW5hbFJldHJpZXZlTWFwSGFuZGxlcnMgPSByZXRyaWV2ZU1hcEhhbmRsZXJzLnNsaWNlKDApO1xuXG5leHBvcnRzLndyYXBDYWxsU2l0ZSA9IHdyYXBDYWxsU2l0ZTtcbmV4cG9ydHMuZ2V0RXJyb3JTb3VyY2UgPSBnZXRFcnJvclNvdXJjZTtcbmV4cG9ydHMubWFwU291cmNlUG9zaXRpb24gPSBtYXBTb3VyY2VQb3NpdGlvbjtcbmV4cG9ydHMucmV0cmlldmVTb3VyY2VNYXAgPSByZXRyaWV2ZVNvdXJjZU1hcDtcblxuZXhwb3J0cy5pbnN0YWxsID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAob3B0aW9ucy5lbnZpcm9ubWVudCkge1xuICAgIGVudmlyb25tZW50ID0gb3B0aW9ucy5lbnZpcm9ubWVudDtcbiAgICBpZiAoW1wibm9kZVwiLCBcImJyb3dzZXJcIiwgXCJhdXRvXCJdLmluZGV4T2YoZW52aXJvbm1lbnQpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW52aXJvbm1lbnQgXCIgKyBlbnZpcm9ubWVudCArIFwiIHdhcyB1bmtub3duLiBBdmFpbGFibGUgb3B0aW9ucyBhcmUge2F1dG8sIGJyb3dzZXIsIG5vZGV9XCIpXG4gICAgfVxuICB9XG5cbiAgLy8gQWxsb3cgc291cmNlcyB0byBiZSBmb3VuZCBieSBtZXRob2RzIG90aGVyIHRoYW4gcmVhZGluZyB0aGUgZmlsZXNcbiAgLy8gZGlyZWN0bHkgZnJvbSBkaXNrLlxuICBpZiAob3B0aW9ucy5yZXRyaWV2ZUZpbGUpIHtcbiAgICBpZiAob3B0aW9ucy5vdmVycmlkZVJldHJpZXZlRmlsZSkge1xuICAgICAgcmV0cmlldmVGaWxlSGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXRyaWV2ZUZpbGVIYW5kbGVycy51bnNoaWZ0KG9wdGlvbnMucmV0cmlldmVGaWxlKTtcbiAgfVxuXG4gIC8vIEFsbG93IHNvdXJjZSBtYXBzIHRvIGJlIGZvdW5kIGJ5IG1ldGhvZHMgb3RoZXIgdGhhbiByZWFkaW5nIHRoZSBmaWxlc1xuICAvLyBkaXJlY3RseSBmcm9tIGRpc2suXG4gIGlmIChvcHRpb25zLnJldHJpZXZlU291cmNlTWFwKSB7XG4gICAgaWYgKG9wdGlvbnMub3ZlcnJpZGVSZXRyaWV2ZVNvdXJjZU1hcCkge1xuICAgICAgcmV0cmlldmVNYXBIYW5kbGVycy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIHJldHJpZXZlTWFwSGFuZGxlcnMudW5zaGlmdChvcHRpb25zLnJldHJpZXZlU291cmNlTWFwKTtcbiAgfVxuXG4gIC8vIFN1cHBvcnQgcnVudGltZSB0cmFuc3BpbGVycyB0aGF0IGluY2x1ZGUgaW5saW5lIHNvdXJjZSBtYXBzXG4gIGlmIChvcHRpb25zLmhvb2tSZXF1aXJlICYmICFpc0luQnJvd3NlcigpKSB7XG4gICAgdmFyIE1vZHVsZTtcbiAgICB0cnkge1xuICAgICAgTW9kdWxlID0gcmVxdWlyZSgnbW9kdWxlJyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBOT1A6IExvYWRpbmcgaW4gY2F0Y2ggYmxvY2sgdG8gY29udmVydCB3ZWJwYWNrIGVycm9yIHRvIHdhcm5pbmcuXG4gICAgfVxuICAgIHZhciAkY29tcGlsZSA9IE1vZHVsZS5wcm90b3R5cGUuX2NvbXBpbGU7XG5cbiAgICBpZiAoISRjb21waWxlLl9fc291cmNlTWFwU3VwcG9ydCkge1xuICAgICAgTW9kdWxlLnByb3RvdHlwZS5fY29tcGlsZSA9IGZ1bmN0aW9uKGNvbnRlbnQsIGZpbGVuYW1lKSB7XG4gICAgICAgIGZpbGVDb250ZW50c0NhY2hlW2ZpbGVuYW1lXSA9IGNvbnRlbnQ7XG4gICAgICAgIHNvdXJjZU1hcENhY2hlW2ZpbGVuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuICRjb21waWxlLmNhbGwodGhpcywgY29udGVudCwgZmlsZW5hbWUpO1xuICAgICAgfTtcblxuICAgICAgTW9kdWxlLnByb3RvdHlwZS5fY29tcGlsZS5fX3NvdXJjZU1hcFN1cHBvcnQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbmZpZ3VyZSBvcHRpb25zXG4gIGlmICghZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zKSB7XG4gICAgZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zID0gJ2VtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucycgaW4gb3B0aW9ucyA/XG4gICAgICBvcHRpb25zLmVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucyA6IGZhbHNlO1xuICB9XG5cbiAgLy8gSW5zdGFsbCB0aGUgZXJyb3IgcmVmb3JtYXR0ZXJcbiAgaWYgKCFlcnJvckZvcm1hdHRlckluc3RhbGxlZCkge1xuICAgIGVycm9yRm9ybWF0dGVySW5zdGFsbGVkID0gdHJ1ZTtcbiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXBhcmVTdGFja1RyYWNlO1xuICB9XG5cbiAgaWYgKCF1bmNhdWdodFNoaW1JbnN0YWxsZWQpIHtcbiAgICB2YXIgaW5zdGFsbEhhbmRsZXIgPSAnaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zJyBpbiBvcHRpb25zID9cbiAgICAgIG9wdGlvbnMuaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zIDogdHJ1ZTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIG9wdGlvbiB0byBub3QgaW5zdGFsbCB0aGUgdW5jYXVnaHQgZXhjZXB0aW9uIGhhbmRsZXIuIFRoaXMgaXNcbiAgICAvLyB0byBzdXBwb3J0IG90aGVyIHVuY2F1Z2h0IGV4Y2VwdGlvbiBoYW5kbGVycyAoaW4gdGVzdCBmcmFtZXdvcmtzLCBmb3JcbiAgICAvLyBleGFtcGxlKS4gSWYgdGhpcyBoYW5kbGVyIGlzIG5vdCBpbnN0YWxsZWQgYW5kIHRoZXJlIGFyZSBubyBvdGhlciB1bmNhdWdodFxuICAgIC8vIGV4Y2VwdGlvbiBoYW5kbGVycywgdW5jYXVnaHQgZXhjZXB0aW9ucyB3aWxsIGJlIGNhdWdodCBieSBub2RlJ3MgYnVpbHQtaW5cbiAgICAvLyBleGNlcHRpb24gaGFuZGxlciBhbmQgdGhlIHByb2Nlc3Mgd2lsbCBzdGlsbCBiZSB0ZXJtaW5hdGVkLiBIb3dldmVyLCB0aGVcbiAgICAvLyBnZW5lcmF0ZWQgSmF2YVNjcmlwdCBjb2RlIHdpbGwgYmUgc2hvd24gYWJvdmUgdGhlIHN0YWNrIHRyYWNlIGluc3RlYWQgb2ZcbiAgICAvLyB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gICAgaWYgKGluc3RhbGxIYW5kbGVyICYmIGhhc0dsb2JhbFByb2Nlc3NFdmVudEVtaXR0ZXIoKSkge1xuICAgICAgdW5jYXVnaHRTaGltSW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgIHNoaW1FbWl0VW5jYXVnaHRFeGNlcHRpb24oKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMucmVzZXRSZXRyaWV2ZUhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XG4gIHJldHJpZXZlRmlsZUhhbmRsZXJzLmxlbmd0aCA9IDA7XG4gIHJldHJpZXZlTWFwSGFuZGxlcnMubGVuZ3RoID0gMDtcblxuICByZXRyaWV2ZUZpbGVIYW5kbGVycyA9IG9yaWdpbmFsUmV0cmlldmVGaWxlSGFuZGxlcnMuc2xpY2UoMCk7XG4gIHJldHJpZXZlTWFwSGFuZGxlcnMgPSBvcmlnaW5hbFJldHJpZXZlTWFwSGFuZGxlcnMuc2xpY2UoMCk7XG5cbiAgcmV0cmlldmVTb3VyY2VNYXAgPSBoYW5kbGVyRXhlYyhyZXRyaWV2ZU1hcEhhbmRsZXJzKTtcbiAgcmV0cmlldmVGaWxlID0gaGFuZGxlckV4ZWMocmV0cmlldmVGaWxlSGFuZGxlcnMpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc0h5cGVyID0gcHJvY2Vzcy5lbnYuVEVSTV9QUk9HUkFNID09PSAnSHlwZXInO1xuY29uc3QgaXNXaW5kb3dzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJztcbmNvbnN0IGlzTGludXggPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnO1xuXG5jb25zdCBjb21tb24gPSB7XG4gIGJhbGxvdERpc2FibGVkOiAn4piSJyxcbiAgYmFsbG90T2ZmOiAn4piQJyxcbiAgYmFsbG90T246ICfimJEnLFxuICBidWxsZXQ6ICfigKInLFxuICBidWxsZXRXaGl0ZTogJ+KXpicsXG4gIGZ1bGxCbG9jazogJ+KWiCcsXG4gIGhlYXJ0OiAn4p2kJyxcbiAgaWRlbnRpY2FsVG86ICfiiaEnLFxuICBsaW5lOiAn4pSAJyxcbiAgbWFyazogJ+KAuycsXG4gIG1pZGRvdDogJ8K3JyxcbiAgbWludXM6ICfvvI0nLFxuICBtdWx0aXBsaWNhdGlvbjogJ8OXJyxcbiAgb2JlbHVzOiAnw7cnLFxuICBwZW5jaWxEb3duUmlnaHQ6ICfinI4nLFxuICBwZW5jaWxSaWdodDogJ+KcjycsXG4gIHBlbmNpbFVwUmlnaHQ6ICfinJAnLFxuICBwZXJjZW50OiAnJScsXG4gIHBpbGNyb3cyOiAn4p2hJyxcbiAgcGlsY3JvdzogJ8K2JyxcbiAgcGx1c01pbnVzOiAnwrEnLFxuICBzZWN0aW9uOiAnwqcnLFxuICBzdGFyc09mZjogJ+KYhicsXG4gIHN0YXJzT246ICfimIUnLFxuICB1cERvd25BcnJvdzogJ+KGlSdcbn07XG5cbmNvbnN0IHdpbmRvd3MgPSBPYmplY3QuYXNzaWduKHt9LCBjb21tb24sIHtcbiAgY2hlY2s6ICfiiJonLFxuICBjcm9zczogJ8OXJyxcbiAgZWxsaXBzaXNMYXJnZTogJy4uLicsXG4gIGVsbGlwc2lzOiAnLi4uJyxcbiAgaW5mbzogJ2knLFxuICBxdWVzdGlvbjogJz8nLFxuICBxdWVzdGlvblNtYWxsOiAnPycsXG4gIHBvaW50ZXI6ICc+JyxcbiAgcG9pbnRlclNtYWxsOiAnwrsnLFxuICByYWRpb09mZjogJyggKScsXG4gIHJhZGlvT246ICcoKiknLFxuICB3YXJuaW5nOiAn4oC8J1xufSk7XG5cbmNvbnN0IG90aGVyID0gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uLCB7XG4gIGJhbGxvdENyb3NzOiAn4pyYJyxcbiAgY2hlY2s6ICfinJQnLFxuICBjcm9zczogJ+KclicsXG4gIGVsbGlwc2lzTGFyZ2U6ICfii68nLFxuICBlbGxpcHNpczogJ+KApicsXG4gIGluZm86ICfihLknLFxuICBxdWVzdGlvbjogJz8nLFxuICBxdWVzdGlvbkZ1bGw6ICfvvJ8nLFxuICBxdWVzdGlvblNtYWxsOiAn77mWJyxcbiAgcG9pbnRlcjogaXNMaW51eCA/ICfilrgnIDogJ+KdrycsXG4gIHBvaW50ZXJTbWFsbDogaXNMaW51eCA/ICfigKMnIDogJ+KAuicsXG4gIHJhZGlvT2ZmOiAn4pevJyxcbiAgcmFkaW9PbjogJ+KXiScsXG4gIHdhcm5pbmc6ICfimqAnXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSAoaXNXaW5kb3dzICYmICFpc0h5cGVyKSA/IHdpbmRvd3MgOiBvdGhlcjtcblJlZmxlY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdjb21tb24nLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogY29tbW9uIH0pO1xuUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ3dpbmRvd3MnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogd2luZG93cyB9KTtcblJlZmxlY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdvdGhlcicsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBvdGhlciB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNPYmplY3QgPSB2YWwgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCk7XG5jb25zdCBpZGVudGl0eSA9IHZhbCA9PiB2YWw7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cbi8vIHRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFsay9hbnNpLXJlZ2V4IChNSVQgTGljZW5zZSlcbmNvbnN0IEFOU0lfUkVHRVggPSAvW1xcdTAwMWJcXHUwMDliXVtbXFxdIzs/KCldKig/Oig/Oig/OlteXFxXX10qOz9bXlxcV19dKilcXHUwMDA3KXwoPzooPzpbMC05XXsxLDR9KDtbMC05XXswLDR9KSopP1t+MC05PTw+Y2YtbnFydHlBLVBSWl0pKS9nO1xuXG5jb25zdCBjcmVhdGUgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbG9ycyA9IHsgZW5hYmxlZDogdHJ1ZSwgdmlzaWJsZTogdHJ1ZSwgc3R5bGVzOiB7fSwga2V5czoge30gfTtcblxuICBpZiAoJ0ZPUkNFX0NPTE9SJyBpbiBwcm9jZXNzLmVudikge1xuICAgIGNvbG9ycy5lbmFibGVkID0gcHJvY2Vzcy5lbnYuRk9SQ0VfQ09MT1IgIT09ICcwJztcbiAgfVxuXG4gIGNvbnN0IGFuc2kgPSBzdHlsZSA9PiB7XG4gICAgbGV0IG9wZW4gPSBzdHlsZS5vcGVuID0gYFxcdTAwMWJbJHtzdHlsZS5jb2Rlc1swXX1tYDtcbiAgICBsZXQgY2xvc2UgPSBzdHlsZS5jbG9zZSA9IGBcXHUwMDFiWyR7c3R5bGUuY29kZXNbMV19bWA7XG4gICAgbGV0IHJlZ2V4ID0gc3R5bGUucmVnZXggPSBuZXcgUmVnRXhwKGBcXFxcdTAwMWJcXFxcWyR7c3R5bGUuY29kZXNbMV19bWAsICdnJyk7XG4gICAgc3R5bGUud3JhcCA9IChpbnB1dCwgbmV3bGluZSkgPT4ge1xuICAgICAgaWYgKGlucHV0LmluY2x1ZGVzKGNsb3NlKSkgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKHJlZ2V4LCBjbG9zZSArIG9wZW4pO1xuICAgICAgbGV0IG91dHB1dCA9IG9wZW4gKyBpbnB1dCArIGNsb3NlO1xuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFsay9jaGFsay9wdWxsLzkyLCB0aGFua3MgdG8gdGhlXG4gICAgICAvLyBjaGFsayBjb250cmlidXRvcnMgZm9yIHRoaXMgZml4LiBIb3dldmVyLCB3ZSd2ZSBjb25maXJtZWQgdGhhdFxuICAgICAgLy8gdGhpcyBpc3N1ZSBpcyBhbHNvIHByZXNlbnQgaW4gV2luZG93cyB0ZXJtaW5hbHNcbiAgICAgIHJldHVybiBuZXdsaW5lID8gb3V0cHV0LnJlcGxhY2UoL1xccipcXG4vZywgYCR7Y2xvc2V9JCYke29wZW59YCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH07XG5cbiAgY29uc3Qgd3JhcCA9IChzdHlsZSwgaW5wdXQsIG5ld2xpbmUpID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIHN0eWxlID09PSAnZnVuY3Rpb24nID8gc3R5bGUoaW5wdXQpIDogc3R5bGUud3JhcChpbnB1dCwgbmV3bGluZSk7XG4gIH07XG5cbiAgY29uc3Qgc3R5bGUgPSAoaW5wdXQsIHN0YWNrKSA9PiB7XG4gICAgaWYgKGlucHV0ID09PSAnJyB8fCBpbnB1dCA9PSBudWxsKSByZXR1cm4gJyc7XG4gICAgaWYgKGNvbG9ycy5lbmFibGVkID09PSBmYWxzZSkgcmV0dXJuIGlucHV0O1xuICAgIGlmIChjb2xvcnMudmlzaWJsZSA9PT0gZmFsc2UpIHJldHVybiAnJztcbiAgICBsZXQgc3RyID0gJycgKyBpbnB1dDtcbiAgICBsZXQgbmwgPSBzdHIuaW5jbHVkZXMoJ1xcbicpO1xuICAgIGxldCBuID0gc3RhY2subGVuZ3RoO1xuICAgIGlmIChuID4gMCAmJiBzdGFjay5pbmNsdWRlcygndW5zdHlsZScpKSB7XG4gICAgICBzdGFjayA9IFsuLi5uZXcgU2V0KFsndW5zdHlsZScsIC4uLnN0YWNrXSldLnJldmVyc2UoKTtcbiAgICB9XG4gICAgd2hpbGUgKG4tLSA+IDApIHN0ciA9IHdyYXAoY29sb3JzLnN0eWxlc1tzdGFja1tuXV0sIHN0ciwgbmwpO1xuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgY29uc3QgZGVmaW5lID0gKG5hbWUsIGNvZGVzLCB0eXBlKSA9PiB7XG4gICAgY29sb3JzLnN0eWxlc1tuYW1lXSA9IGFuc2koeyBuYW1lLCBjb2RlcyB9KTtcbiAgICBsZXQga2V5cyA9IGNvbG9ycy5rZXlzW3R5cGVdIHx8IChjb2xvcnMua2V5c1t0eXBlXSA9IFtdKTtcbiAgICBrZXlzLnB1c2gobmFtZSk7XG5cbiAgICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGNvbG9ycywgbmFtZSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICBjb2xvcnMuYWxpYXMobmFtZSwgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgbGV0IGNvbG9yID0gaW5wdXQgPT4gc3R5bGUoaW5wdXQsIGNvbG9yLnN0YWNrKTtcbiAgICAgICAgUmVmbGVjdC5zZXRQcm90b3R5cGVPZihjb2xvciwgY29sb3JzKTtcbiAgICAgICAgY29sb3Iuc3RhY2sgPSB0aGlzLnN0YWNrID8gdGhpcy5zdGFjay5jb25jYXQobmFtZSkgOiBbbmFtZV07XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBkZWZpbmUoJ3Jlc2V0JywgWzAsIDBdLCAnbW9kaWZpZXInKTtcbiAgZGVmaW5lKCdib2xkJywgWzEsIDIyXSwgJ21vZGlmaWVyJyk7XG4gIGRlZmluZSgnZGltJywgWzIsIDIyXSwgJ21vZGlmaWVyJyk7XG4gIGRlZmluZSgnaXRhbGljJywgWzMsIDIzXSwgJ21vZGlmaWVyJyk7XG4gIGRlZmluZSgndW5kZXJsaW5lJywgWzQsIDI0XSwgJ21vZGlmaWVyJyk7XG4gIGRlZmluZSgnaW52ZXJzZScsIFs3LCAyN10sICdtb2RpZmllcicpO1xuICBkZWZpbmUoJ2hpZGRlbicsIFs4LCAyOF0sICdtb2RpZmllcicpO1xuICBkZWZpbmUoJ3N0cmlrZXRocm91Z2gnLCBbOSwgMjldLCAnbW9kaWZpZXInKTtcblxuICBkZWZpbmUoJ2JsYWNrJywgWzMwLCAzOV0sICdjb2xvcicpO1xuICBkZWZpbmUoJ3JlZCcsIFszMSwgMzldLCAnY29sb3InKTtcbiAgZGVmaW5lKCdncmVlbicsIFszMiwgMzldLCAnY29sb3InKTtcbiAgZGVmaW5lKCd5ZWxsb3cnLCBbMzMsIDM5XSwgJ2NvbG9yJyk7XG4gIGRlZmluZSgnYmx1ZScsIFszNCwgMzldLCAnY29sb3InKTtcbiAgZGVmaW5lKCdtYWdlbnRhJywgWzM1LCAzOV0sICdjb2xvcicpO1xuICBkZWZpbmUoJ2N5YW4nLCBbMzYsIDM5XSwgJ2NvbG9yJyk7XG4gIGRlZmluZSgnd2hpdGUnLCBbMzcsIDM5XSwgJ2NvbG9yJyk7XG4gIGRlZmluZSgnZ3JheScsIFs5MCwgMzldLCAnY29sb3InKTtcbiAgZGVmaW5lKCdncmV5JywgWzkwLCAzOV0sICdjb2xvcicpO1xuXG4gIGRlZmluZSgnYmdCbGFjaycsIFs0MCwgNDldLCAnYmcnKTtcbiAgZGVmaW5lKCdiZ1JlZCcsIFs0MSwgNDldLCAnYmcnKTtcbiAgZGVmaW5lKCdiZ0dyZWVuJywgWzQyLCA0OV0sICdiZycpO1xuICBkZWZpbmUoJ2JnWWVsbG93JywgWzQzLCA0OV0sICdiZycpO1xuICBkZWZpbmUoJ2JnQmx1ZScsIFs0NCwgNDldLCAnYmcnKTtcbiAgZGVmaW5lKCdiZ01hZ2VudGEnLCBbNDUsIDQ5XSwgJ2JnJyk7XG4gIGRlZmluZSgnYmdDeWFuJywgWzQ2LCA0OV0sICdiZycpO1xuICBkZWZpbmUoJ2JnV2hpdGUnLCBbNDcsIDQ5XSwgJ2JnJyk7XG5cbiAgZGVmaW5lKCdibGFja0JyaWdodCcsIFs5MCwgMzldLCAnYnJpZ2h0Jyk7XG4gIGRlZmluZSgncmVkQnJpZ2h0JywgWzkxLCAzOV0sICdicmlnaHQnKTtcbiAgZGVmaW5lKCdncmVlbkJyaWdodCcsIFs5MiwgMzldLCAnYnJpZ2h0Jyk7XG4gIGRlZmluZSgneWVsbG93QnJpZ2h0JywgWzkzLCAzOV0sICdicmlnaHQnKTtcbiAgZGVmaW5lKCdibHVlQnJpZ2h0JywgWzk0LCAzOV0sICdicmlnaHQnKTtcbiAgZGVmaW5lKCdtYWdlbnRhQnJpZ2h0JywgWzk1LCAzOV0sICdicmlnaHQnKTtcbiAgZGVmaW5lKCdjeWFuQnJpZ2h0JywgWzk2LCAzOV0sICdicmlnaHQnKTtcbiAgZGVmaW5lKCd3aGl0ZUJyaWdodCcsIFs5NywgMzldLCAnYnJpZ2h0Jyk7XG5cbiAgZGVmaW5lKCdiZ0JsYWNrQnJpZ2h0JywgWzEwMCwgNDldLCAnYmdCcmlnaHQnKTtcbiAgZGVmaW5lKCdiZ1JlZEJyaWdodCcsIFsxMDEsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG4gIGRlZmluZSgnYmdHcmVlbkJyaWdodCcsIFsxMDIsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG4gIGRlZmluZSgnYmdZZWxsb3dCcmlnaHQnLCBbMTAzLCA0OV0sICdiZ0JyaWdodCcpO1xuICBkZWZpbmUoJ2JnQmx1ZUJyaWdodCcsIFsxMDQsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG4gIGRlZmluZSgnYmdNYWdlbnRhQnJpZ2h0JywgWzEwNSwgNDldLCAnYmdCcmlnaHQnKTtcbiAgZGVmaW5lKCdiZ0N5YW5CcmlnaHQnLCBbMTA2LCA0OV0sICdiZ0JyaWdodCcpO1xuICBkZWZpbmUoJ2JnV2hpdGVCcmlnaHQnLCBbMTA3LCA0OV0sICdiZ0JyaWdodCcpO1xuXG4gIGNvbG9ycy5hbnNpUmVnZXggPSBBTlNJX1JFR0VYO1xuICBjb2xvcnMuaGFzQ29sb3IgPSBjb2xvcnMuaGFzQW5zaSA9IHN0ciA9PiB7XG4gICAgY29sb3JzLmFuc2lSZWdleC5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyAmJiBzdHIgIT09ICcnICYmIGNvbG9ycy5hbnNpUmVnZXgudGVzdChzdHIpO1xuICB9O1xuXG4gIGNvbG9ycy5hbGlhcyA9IChuYW1lLCBjb2xvcikgPT4ge1xuICAgIGxldCBmbiA9IHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgPyBjb2xvcnNbY29sb3JdIDogY29sb3I7XG5cbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGlhcyB0byBiZSB0aGUgbmFtZSBvZiBhbiBleGlzdGluZyBjb2xvciAoc3RyaW5nKSBvciBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKCFmbi5zdGFjaykge1xuICAgICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7IHZhbHVlOiBuYW1lIH0pO1xuICAgICAgY29sb3JzLnN0eWxlc1tuYW1lXSA9IGZuO1xuICAgICAgZm4uc3RhY2sgPSBbbmFtZV07XG4gICAgfVxuXG4gICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShjb2xvcnMsIG5hbWUsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgY29sb3JzLmFsaWFzKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBnZXQoKSB7XG4gICAgICAgIGxldCBjb2xvciA9IGlucHV0ID0+IHN0eWxlKGlucHV0LCBjb2xvci5zdGFjayk7XG4gICAgICAgIFJlZmxlY3Quc2V0UHJvdG90eXBlT2YoY29sb3IsIGNvbG9ycyk7XG4gICAgICAgIGNvbG9yLnN0YWNrID0gdGhpcy5zdGFjayA/IHRoaXMuc3RhY2suY29uY2F0KGZuLnN0YWNrKSA6IGZuLnN0YWNrO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29sb3JzLnRoZW1lID0gY3VzdG9tID0+IHtcbiAgICBpZiAoIWlzT2JqZWN0KGN1c3RvbSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZW1lIHRvIGJlIGFuIG9iamVjdCcpO1xuICAgIGZvciAobGV0IG5hbWUgb2YgT2JqZWN0LmtleXMoY3VzdG9tKSkge1xuICAgICAgY29sb3JzLmFsaWFzKG5hbWUsIGN1c3RvbVtuYW1lXSk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcnM7XG4gIH07XG5cbiAgY29sb3JzLmFsaWFzKCd1bnN0eWxlJywgc3RyID0+IHtcbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgJiYgc3RyICE9PSAnJykge1xuICAgICAgY29sb3JzLmFuc2lSZWdleC5sYXN0SW5kZXggPSAwO1xuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNvbG9ycy5hbnNpUmVnZXgsICcnKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9KTtcblxuICBjb2xvcnMuYWxpYXMoJ25vb3AnLCBzdHIgPT4gc3RyKTtcbiAgY29sb3JzLm5vbmUgPSBjb2xvcnMuY2xlYXIgPSBjb2xvcnMubm9vcDtcblxuICBjb2xvcnMuc3RyaXBDb2xvciA9IGNvbG9ycy51bnN0eWxlO1xuICBjb2xvcnMuc3ltYm9scyA9IHJlcXVpcmUoJy4vc3ltYm9scycpO1xuICBjb2xvcnMuZGVmaW5lID0gZGVmaW5lO1xuICByZXR1cm4gY29sb3JzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGUoKTtcbm1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZGVlcEVxdWFsID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCFleGlzdHMoYSkgfHwgIWV4aXN0cyhiKSB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIHJldHVybiBhID09PSBiO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGRlZXBFcXVhbE9iamVjdChhLCBiKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZXBFcXVhbCA9IGRlZXBFcXVhbDtcclxuZnVuY3Rpb24gZGVlcEVxdWFsT2JqZWN0KGEsIGIpIHtcclxuICAgIGxldCBpO1xyXG4gICAgbGV0IGtleTtcclxuICAgIGlmICghZXhpc3RzKGEpIHx8ICFleGlzdHMoYikpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoYS5wcm90b3R5cGUgIT09IGIucHJvdG90eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IGFLZXlzO1xyXG4gICAgbGV0IGJLZXlzO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgICAgIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGFLZXlzLnNvcnQoKTtcclxuICAgIGJLZXlzLnNvcnQoKTtcclxuICAgIGZvciAoaSA9IGFLZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgaWYgKGFLZXlzW2ldICE9PSBiS2V5c1tpXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChpID0gYUtleXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBrZXkgPSBhS2V5c1tpXTtcclxuICAgICAgICBpZiAoIWRlZXBFcXVhbChhW2tleV0sIGJba2V5XSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGI7XHJcbn1cclxuZnVuY3Rpb24gZXhpc3RzKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWVwRXF1YWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy53aXRob3V0ID0gZXhwb3J0cy51bmlvbiA9IHZvaWQgMDtcclxuZnVuY3Rpb24gdW5pb24oYXJyYXlBLCBhcnJheUIpIHtcclxuICAgIGlmICghYXJyYXlBKSB7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5QiA/IGFycmF5QiA6IFtdO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhcnJheUIpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXlBO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycmF5Qikge1xyXG4gICAgICAgIGlmIChhcnJheUEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgYXJyYXlBLnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5QTtcclxufVxyXG5leHBvcnRzLnVuaW9uID0gdW5pb247XHJcbmZ1bmN0aW9uIHdpdGhvdXQoYXJyYXksIGl0ZW0pIHtcclxuICAgIGlmICghYXJyYXkpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleE9mSXRlbSA9IGFycmF5LmluZGV4T2YoaXRlbSk7XHJcbiAgICBpZiAoaW5kZXhPZkl0ZW0gIT09IC0xKSB7XHJcbiAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4T2ZJdGVtLCAxKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5leHBvcnRzLndpdGhvdXQgPSB3aXRob3V0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcnJheVV0aWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU2ltcGxlRXZlbnRFbWl0dGVyID0gdm9pZCAwO1xyXG5jb25zdCBBcnJheVV0aWxzXzEgPSByZXF1aXJlKFwiLi9BcnJheVV0aWxzXCIpO1xyXG5jbGFzcyBTaW1wbGVFdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5vbkxpc3RlbmVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMub25jZUxpc3RlbmVycyA9IHt9O1xyXG4gICAgfVxyXG4gICAgb24oZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgKHRoaXMub25MaXN0ZW5lcnNbZXZlbnRdKSA9IEFycmF5VXRpbHNfMS51bmlvbih0aGlzLm9uTGlzdGVuZXJzW2V2ZW50XSwgW2NhbGxiYWNrXSk7XHJcbiAgICB9XHJcbiAgICBvbmNlKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0gPSBBcnJheVV0aWxzXzEudW5pb24odGhpcy5vbmNlTGlzdGVuZXJzW2V2ZW50XSwgW2NhbGxiYWNrXSk7XHJcbiAgICB9XHJcbiAgICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5vbkxpc3RlbmVyc1tldmVudF0gPSBBcnJheVV0aWxzXzEud2l0aG91dCh0aGlzLm9uTGlzdGVuZXJzW2V2ZW50XSwgY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0gPSBBcnJheVV0aWxzXzEud2l0aG91dCh0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub25MaXN0ZW5lcnNbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy5vbkxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwobnVsbCwgLi4uYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0gJiYgdGhpcy5vbmNlTGlzdGVuZXJzW2V2ZW50XS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy5vbmNlTGlzdGVuZXJzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChudWxsLCAuLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW1pdEFuZFdhaXRGb3JDb21wbGV0aW9uKGV2ZW50LCAuLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5vbkxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLm9uTGlzdGVuZXJzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UucmVzb2x2ZShjYWxsYmFjay5jYWxsKG51bGwsIC4uLmFyZ3MpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goUHJvbWlzZS5yZWplY3QoZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdICYmIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChQcm9taXNlLnJlc29sdmUoY2FsbGJhY2suY2FsbChudWxsLCAuLi5hcmdzKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UucmVqZWN0KGUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TaW1wbGVFdmVudEVtaXR0ZXIgPSBTaW1wbGVFdmVudEVtaXR0ZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNpbXBsZUV2ZW50RW1pdHRlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlNvcnRlZEFycmF5ID0gdm9pZCAwO1xyXG5jbGFzcyBTb3J0ZWRBcnJheSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb21wYXJlID0gY29tcGFyZURlZmF1bHQsIGluaXRpYWxWYWx1ZXMgPSBbXSkge1xyXG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbXBhcmVGdW5jdGlvbiA9IGNvbXBhcmUgfHwgY29tcGFyZURlZmF1bHQ7XHJcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gaW5pdGlhbFZhbHVlcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmluc2VydChpbml0aWFsVmFsdWVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5O1xyXG4gICAgfVxyXG4gICAgaW5zZXJ0KGVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgZm91bmRJbmRleCA9IHRoaXMuc2VhcmNoSW50ZXJuYWwoZWxlbWVudCkgKyAxO1xyXG4gICAgICAgIGNvbnN0IGhpZ2hlc3RJbmRleCA9IHRoaXMuYXJyYXkubGVuZ3RoIC0gMTtcclxuICAgICAgICB3aGlsZSAoKGZvdW5kSW5kZXggPCBoaWdoZXN0SW5kZXgpICYmICh0aGlzLmNvbXBhcmVGdW5jdGlvbihlbGVtZW50LCB0aGlzLmFycmF5W2ZvdW5kSW5kZXhdKSA9PT0gMCkpIHtcclxuICAgICAgICAgICAgZm91bmRJbmRleCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmFycmF5Lmxlbmd0aDtcclxuICAgICAgICB0aGlzLmFycmF5LnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgd2hpbGUgKGluZGV4ID4gZm91bmRJbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLmFycmF5W2luZGV4XSA9IHRoaXMuYXJyYXlbLS1pbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXJyYXlbZm91bmRJbmRleF0gPSBlbGVtZW50O1xyXG4gICAgfVxyXG4gICAgc2VhcmNoKGVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBmb3VuZEluZGV4ID0gdGhpcy5zZWFyY2hJbnRlcm5hbChlbGVtZW50KTtcclxuICAgICAgICBpZiAodGhpcy5jb21wYXJlRnVuY3Rpb24odGhpcy5hcnJheVtmb3VuZEluZGV4XSwgZWxlbWVudCkgIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm91bmRJbmRleDtcclxuICAgIH1cclxuICAgIHJlbW92ZShlbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnNlYXJjaChlbGVtZW50KTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2VhcmNoSW50ZXJuYWwoZWxlbWVudCkge1xyXG4gICAgICAgIGxldCBoaWdoID0gdGhpcy5hcnJheS5sZW5ndGggLSAxO1xyXG4gICAgICAgIGxldCBsb3cgPSAwO1xyXG4gICAgICAgIGxldCBpbmRleDtcclxuICAgICAgICBsZXQgb3JkZXJpbmc7XHJcbiAgICAgICAgd2hpbGUgKGhpZ2ggPj0gbG93KSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoaGlnaCArIGxvdykgLyAyKTtcclxuICAgICAgICAgICAgb3JkZXJpbmcgPSB0aGlzLmNvbXBhcmVGdW5jdGlvbih0aGlzLmFycmF5W2luZGV4XSwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGlmIChvcmRlcmluZyA8IDApIHtcclxuICAgICAgICAgICAgICAgIGxvdyA9IGluZGV4ICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvcmRlcmluZyA+IDApIHtcclxuICAgICAgICAgICAgICAgIGhpZ2ggPSBpbmRleCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhpZ2g7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Tb3J0ZWRBcnJheSA9IFNvcnRlZEFycmF5O1xyXG5mdW5jdGlvbiBjb21wYXJlRGVmYXVsdChhLCBiKSB7XHJcbiAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhID4gYikge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U29ydGVkQXJyYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5JTlRFUk5BTF9NT0NLRVJfTkFNRSA9IGV4cG9ydHMucHJpbnRPYmplY3QgPSB2b2lkIDA7XHJcbmNvbnN0IElOVEVSTkFMX01PQ0tFUl9OQU1FID0gXCJfX2ludGVybmFsTW9ja2VyXCI7XHJcbmV4cG9ydHMuSU5URVJOQUxfTU9DS0VSX05BTUUgPSBJTlRFUk5BTF9NT0NLRVJfTkFNRTtcclxuZnVuY3Rpb24gR2V0TW9ja2VyRGF0YVNhZmUobW9jaykge1xyXG4gICAgY29uc3QgaW50ZXJuYWxNb2NrZXIgPSBtb2NrW0lOVEVSTkFMX01PQ0tFUl9OQU1FXTtcclxuICAgIHJldHVybiBpbnRlcm5hbE1vY2tlciAhPT0gbnVsbCAmJiBpbnRlcm5hbE1vY2tlciAhPT0gdm9pZCAwID8gaW50ZXJuYWxNb2NrZXIgOiBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIHByaW50T2JqZWN0KG9iamVjdCkge1xyXG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBcIm51bGxcIjtcclxuICAgIH1cclxuICAgIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBcInVuZGVmaW5lZFwiO1xyXG4gICAgfVxyXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgIHJldHVybiBvYmplY3QudG9TdHJpbmcoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1vY2tlckRhdGEgPSBHZXRNb2NrZXJEYXRhU2FmZShvYmplY3QpO1xyXG4gICAgaWYgKG1vY2tlckRhdGEgIT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbW9ja2VyRGF0YS5tb2NrTmFtZTtcclxuICAgIH1cclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QpO1xyXG59XHJcbmV4cG9ydHMucHJpbnRPYmplY3QgPSBwcmludE9iamVjdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RyaW5naWZ5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMubWF0Y2hlciA9IGV4cG9ydHMucmVnZXhNYXRjaGVzID0gZXhwb3J0cy5zdGFydHNXaXRoID0gZXhwb3J0cy5sdGUgPSBleHBvcnRzLmx0ID0gZXhwb3J0cy5ndGUgPSBleHBvcnRzLmd0ID0gZXhwb3J0cy5lcSA9IGV4cG9ydHMuYW55ID0gdm9pZCAwO1xyXG5jb25zdCBEZWVwRXF1YWxfMSA9IHJlcXVpcmUoXCIuL0RlZXBFcXVhbFwiKTtcclxuY29uc3QgU3RyaW5naWZ5XzEgPSByZXF1aXJlKFwiLi9TdHJpbmdpZnlcIik7XHJcbmZ1bmN0aW9uIGFueSgpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IHtcclxuICAgICAgICBwcmVjZWRlbmNlOiAtMSxcclxuICAgICAgICBtYXRjaGVzOiAoKSA9PiB0cnVlLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAoKSA9PiBcImFueSgpXCIsXHJcbiAgICAgICAgZXF1YWxzOiAob3RoZXIpID0+IG90aGVyLmRlc2NyaXB0aW9uKCkgPT09IHZhbGlkYXRvci5kZXNjcmlwdGlvbigpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHZhbGlkYXRvcjtcclxufVxyXG5leHBvcnRzLmFueSA9IGFueTtcclxuZnVuY3Rpb24gZ3QodmFsdWUpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IHtcclxuICAgICAgICBtYXRjaGVzOiAoKHJlYWxWYWx1ZSkgPT4gcmVhbFZhbHVlID4gdmFsdWUpLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAoKSA9PiBgZ3QoJHtTdHJpbmdpZnlfMS5wcmludE9iamVjdCh2YWx1ZSl9KWAsXHJcbiAgICAgICAgZXF1YWxzOiAob3RoZXIpID0+IG90aGVyLmRlc2NyaXB0aW9uKCkgPT09IHZhbGlkYXRvci5kZXNjcmlwdGlvbigpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHZhbGlkYXRvcjtcclxufVxyXG5leHBvcnRzLmd0ID0gZ3Q7XHJcbmZ1bmN0aW9uIGx0KHZhbHVlKSB7XHJcbiAgICBjb25zdCB2YWxpZGF0b3IgPSB7XHJcbiAgICAgICAgbWF0Y2hlczogKChyZWFsVmFsdWUpID0+IHJlYWxWYWx1ZSA8IHZhbHVlKSxcclxuICAgICAgICBkZXNjcmlwdGlvbjogKCkgPT4gYGx0KCR7U3RyaW5naWZ5XzEucHJpbnRPYmplY3QodmFsdWUpfSlgLFxyXG4gICAgICAgIGVxdWFsczogKG90aGVyKSA9PiBvdGhlci5kZXNjcmlwdGlvbigpID09PSB2YWxpZGF0b3IuZGVzY3JpcHRpb24oKVxyXG4gICAgfTtcclxuICAgIHJldHVybiB2YWxpZGF0b3I7XHJcbn1cclxuZXhwb3J0cy5sdCA9IGx0O1xyXG5mdW5jdGlvbiBndGUodmFsdWUpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IHtcclxuICAgICAgICBtYXRjaGVzOiAoKHJlYWxWYWx1ZSkgPT4gcmVhbFZhbHVlID49IHZhbHVlKSxcclxuICAgICAgICBkZXNjcmlwdGlvbjogKCkgPT4gYGd0ZSgke1N0cmluZ2lmeV8xLnByaW50T2JqZWN0KHZhbHVlKX0pYCxcclxuICAgICAgICBlcXVhbHM6IChvdGhlcikgPT4gb3RoZXIuZGVzY3JpcHRpb24oKSA9PT0gdmFsaWRhdG9yLmRlc2NyaXB0aW9uKClcclxuICAgIH07XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yO1xyXG59XHJcbmV4cG9ydHMuZ3RlID0gZ3RlO1xyXG5mdW5jdGlvbiBsdGUodmFsdWUpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IHtcclxuICAgICAgICBtYXRjaGVzOiAoKHJlYWxWYWx1ZSkgPT4gcmVhbFZhbHVlIDw9IHZhbHVlKSxcclxuICAgICAgICBkZXNjcmlwdGlvbjogKCkgPT4gYGx0ZSgke1N0cmluZ2lmeV8xLnByaW50T2JqZWN0KHZhbHVlKX0pYCxcclxuICAgICAgICBlcXVhbHM6IChvdGhlcikgPT4gb3RoZXIuZGVzY3JpcHRpb24oKSA9PT0gdmFsaWRhdG9yLmRlc2NyaXB0aW9uKClcclxuICAgIH07XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yO1xyXG59XHJcbmV4cG9ydHMubHRlID0gbHRlO1xyXG5mdW5jdGlvbiBlcSh2YWx1ZSkge1xyXG4gICAgY29uc3QgdmFsaWRhdG9yID0ge1xyXG4gICAgICAgIHByZWNlZGVuY2U6IDEsXHJcbiAgICAgICAgbWF0Y2hlczogKChyZWFsVmFsdWUpID0+IERlZXBFcXVhbF8xLmRlZXBFcXVhbCh2YWx1ZSwgcmVhbFZhbHVlKSksXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICgpID0+IFN0cmluZ2lmeV8xLnByaW50T2JqZWN0KHZhbHVlKSxcclxuICAgICAgICBlcXVhbHM6IChvdGhlcikgPT4gb3RoZXIuZGVzY3JpcHRpb24oKSA9PT0gdmFsaWRhdG9yLmRlc2NyaXB0aW9uKClcclxuICAgIH07XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yO1xyXG59XHJcbmV4cG9ydHMuZXEgPSBlcTtcclxuZnVuY3Rpb24gc3RhcnRzV2l0aCh2YWx1ZSkge1xyXG4gICAgY29uc3QgdmFsaWRhdG9yID0ge1xyXG4gICAgICAgIG1hdGNoZXM6ICgocmVhbFZhbHVlKSA9PiByZWFsVmFsdWUuc3RhcnRzV2l0aCh2YWx1ZSkpLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAoKSA9PiBcInN0YXJ0c1dpdGggXCIgKyB2YWx1ZSxcclxuICAgICAgICBlcXVhbHM6IChvdGhlcikgPT4gb3RoZXIuZGVzY3JpcHRpb24oKSA9PT0gdmFsaWRhdG9yLmRlc2NyaXB0aW9uKClcclxuICAgIH07XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yO1xyXG59XHJcbmV4cG9ydHMuc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XHJcbmZ1bmN0aW9uIHJlZ2V4TWF0Y2hlcyh2YWx1ZSkge1xyXG4gICAgY29uc3QgdmFsaWRhdG9yID0ge1xyXG4gICAgICAgIG1hdGNoZXM6ICgocmVhbFZhbHVlKSA9PiB2YWx1ZS50ZXN0KHJlYWxWYWx1ZSkpLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAoKSA9PiB2YWx1ZS50b1N0cmluZygpLFxyXG4gICAgICAgIGVxdWFsczogKG90aGVyKSA9PiBvdGhlci5kZXNjcmlwdGlvbigpID09PSB2YWxpZGF0b3IuZGVzY3JpcHRpb24oKVxyXG4gICAgfTtcclxuICAgIHJldHVybiB2YWxpZGF0b3I7XHJcbn1cclxuZXhwb3J0cy5yZWdleE1hdGNoZXMgPSByZWdleE1hdGNoZXM7XHJcbmZ1bmN0aW9uIG1hdGNoZXIoZnVuYykge1xyXG4gICAgY29uc3QgdmFsaWRhdG9yID0ge1xyXG4gICAgICAgIG1hdGNoZXM6IChyZWFsVmFsdWUpID0+IGZ1bmMocmVhbFZhbHVlKSxcclxuICAgICAgICBkZXNjcmlwdGlvbjogKCkgPT4gZnVuYy50b1N0cmluZygpLFxyXG4gICAgICAgIGVxdWFsczogKG90aGVyKSA9PiBvdGhlci5kZXNjcmlwdGlvbigpID09PSB2YWxpZGF0b3IuZGVzY3JpcHRpb24oKVxyXG4gICAgfTtcclxuICAgIHJldHVybiB2YWxpZGF0b3I7XHJcbn1cclxuZXhwb3J0cy5tYXRjaGVyID0gbWF0Y2hlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXJndW1lbnRWYWxpZGF0b3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5wcmludE9iamVjdCA9IGV4cG9ydHMuSU5URVJOQUxfTU9DS0VSX05BTUUgPSBleHBvcnRzLnN0YXJ0c1dpdGggPSBleHBvcnRzLnJlZ2V4TWF0Y2hlcyA9IGV4cG9ydHMubWF0Y2hlciA9IGV4cG9ydHMubHRlID0gZXhwb3J0cy5sdCA9IGV4cG9ydHMuZ3RlID0gZXhwb3J0cy5ndCA9IGV4cG9ydHMuZXEgPSBleHBvcnRzLmFueSA9IGV4cG9ydHMuU2ltcGxlRXZlbnRFbWl0dGVyID0gZXhwb3J0cy5Tb3J0ZWRBcnJheSA9IGV4cG9ydHMuZGVlcEVxdWFsID0gdm9pZCAwO1xyXG5jb25zdCBEZWVwRXF1YWxfMSA9IHJlcXVpcmUoXCIuL0RlZXBFcXVhbFwiKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVlcEVxdWFsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBEZWVwRXF1YWxfMS5kZWVwRXF1YWw7IH0gfSk7XHJcbmNvbnN0IFNpbXBsZUV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4vU2ltcGxlRXZlbnRFbWl0dGVyXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaW1wbGVFdmVudEVtaXR0ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNpbXBsZUV2ZW50RW1pdHRlcl8xLlNpbXBsZUV2ZW50RW1pdHRlcjsgfSB9KTtcclxuY29uc3QgU29ydGVkQXJyYXlfMSA9IHJlcXVpcmUoXCIuL1NvcnRlZEFycmF5XCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTb3J0ZWRBcnJheVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU29ydGVkQXJyYXlfMS5Tb3J0ZWRBcnJheTsgfSB9KTtcclxuY29uc3QgQXJndW1lbnRWYWxpZGF0b3JfMSA9IHJlcXVpcmUoXCIuL0FyZ3VtZW50VmFsaWRhdG9yXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhbnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFyZ3VtZW50VmFsaWRhdG9yXzEuYW55OyB9IH0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlcVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJndW1lbnRWYWxpZGF0b3JfMS5lcTsgfSB9KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFyZ3VtZW50VmFsaWRhdG9yXzEuZ3Q7IH0gfSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImd0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJndW1lbnRWYWxpZGF0b3JfMS5ndGU7IH0gfSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcmd1bWVudFZhbGlkYXRvcl8xLmx0OyB9IH0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFyZ3VtZW50VmFsaWRhdG9yXzEubHRlOyB9IH0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYXRjaGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcmd1bWVudFZhbGlkYXRvcl8xLm1hdGNoZXI7IH0gfSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlZ2V4TWF0Y2hlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJndW1lbnRWYWxpZGF0b3JfMS5yZWdleE1hdGNoZXM7IH0gfSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXJ0c1dpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFyZ3VtZW50VmFsaWRhdG9yXzEuc3RhcnRzV2l0aDsgfSB9KTtcclxuY29uc3QgU3RyaW5naWZ5XzEgPSByZXF1aXJlKFwiLi9TdHJpbmdpZnlcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklOVEVSTkFMX01PQ0tFUl9OQU1FXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTdHJpbmdpZnlfMS5JTlRFUk5BTF9NT0NLRVJfTkFNRTsgfSB9KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJpbnRPYmplY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFN0cmluZ2lmeV8xLnByaW50T2JqZWN0OyB9IH0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgY29sb3JzIGZyb20gXCJhbnNpLWNvbG9yc1wiO1xyXG5pbXBvcnQgeyBkZWVwRXF1YWwgfSBmcm9tIFwiQHVtYnJhLXRlc3QvdW1icmEtdXRpbFwiO1xyXG4vKipcclxuICogQSBiYXNpYyByZXBvcnRlci4gTm90aGluZyBmYW5jeS5cclxuICovXHJcbmNsYXNzIEJhc2ljUmVwb3J0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RGVzY3JpYmVUaXRsZUNoYWluID0gW107XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiXFxuXCIgKyBjb2xvcnMud2hpdGVCcmlnaHQoXCLimL4gVW1icmEgVGVzdFwiKSk7XHJcbiAgICAgICAgdGhpcy5kcmF3SG9yaXpvbnRhbExpbmUoKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICBvblRlc3RTdGFydCh0ZXN0SW5mbykge1xyXG4gICAgICAgIC8vIEludGVudGlvbmFsbHkgYmxhbmsuXHJcbiAgICB9XHJcbiAgICBvblRlc3RFbmQodGVzdFJlc3VsdCkge1xyXG4gICAgICAgIGNvbnN0IGRlc2NyaWJlVGl0bGVDaGFpbiA9IHRlc3RSZXN1bHQudGVzdEluZm8uZGVzY3JpYmVUaXRsZUNoYWluO1xyXG4gICAgICAgIGNvbnN0IGluZGVudExldmVsID0gZGVzY3JpYmVUaXRsZUNoYWluLmxlbmd0aCArIDE7XHJcbiAgICAgICAgaWYgKGRlc2NyaWJlVGl0bGVDaGFpbi5sZW5ndGggPiAwICYmICFkZWVwRXF1YWwodGhpcy5jdXJyZW50RGVzY3JpYmVUaXRsZUNoYWluLCBkZXNjcmliZVRpdGxlQ2hhaW4pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERlc2NyaWJlVGl0bGVDaGFpbiA9IGRlc2NyaWJlVGl0bGVDaGFpbjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coY29sb3JzLmN5YW4oXCLipLcgXCIpICsgZGVzY3JpYmVUaXRsZUNoYWluWzBdKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkZXNjcmliZVRpdGxlQ2hhaW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2V0SW5kZW50ZWRUZXh0KGNvbG9ycy5jeWFuKFwi4qS3IFwiKSArIGRlc2NyaWJlVGl0bGVDaGFpbltpXSwgaSArIDEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGVzdFJlc3VsdC5yZXN1bHQgPT09IFwiZmFpbFwiKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2V0SW5kZW50ZWRUZXh0KGNvbG9ycy5yZWRCcmlnaHQoYOKcliBgKSArIHRlc3RSZXN1bHQudGVzdEluZm8udGl0bGUsIGluZGVudExldmVsKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2V0SW5kZW50ZWRUZXh0KGNvbG9ycy5yZWQoXCLipLcgRXJyb3I6IFwiKSArIHRlc3RSZXN1bHQuZXJyb3IubWVzc2FnZSwgaW5kZW50TGV2ZWwgKyAxKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRlc3RSZXN1bHQucmVzdWx0ID09PSBcInRpbWVvdXRcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdldEluZGVudGVkVGV4dChjb2xvcnMucmVkQnJpZ2h0KGDij7IgYCkgKyB0ZXN0UmVzdWx0LnRlc3RJbmZvLnRpdGxlLCBpbmRlbnRMZXZlbCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0ZXN0UmVzdWx0LnJlc3VsdCA9PT0gXCJza2lwcGVkXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5nZXRJbmRlbnRlZFRleHQoY29sb3JzLnllbGxvdyhgU0tJUFBFRCBgKSArIHRlc3RSZXN1bHQudGVzdEluZm8udGl0bGUsIGluZGVudExldmVsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRlc3RSZXN1bHQucmVzdWx0ID09PSBcInN1Y2Nlc3NcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdldEluZGVudGVkVGV4dChjb2xvcnMuZ3JlZW4oYOKckyBgKSArIHRlc3RSZXN1bHQudGVzdEluZm8udGl0bGUsIGluZGVudExldmVsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25SdW5FbmQocmVzdWx0cykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBUZXN0czogJHtjb2xvcnMucmVkKHJlc3VsdHMudG90YWxGYWlsdXJlcy50b1N0cmluZygpKX0gZmFpbHVyZXMsICR7Y29sb3JzLnllbGxvdyhyZXN1bHRzLnRvdGFsVGltZW91dHMudG9TdHJpbmcoKSl9IHRpbWVvdXRzLCAke2NvbG9ycy5ncmVlbihyZXN1bHRzLnRvdGFsU3VjY2Vzc2VzLnRvU3RyaW5nKCkpfSBwYXNzZWQsICR7cmVzdWx0cy50b3RhbFRlc3RzfSB0b3RhbGApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBUaW1lOiAgJHtyZXN1bHRzLmVsYXBzZWRUaW1lTXN9bXNgKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGBGaWxlczogJHt0aGlzLmZpbGVzRXZhbHVhdGVkfWApO1xyXG4gICAgfVxyXG4gICAgZ2V0SW5kZW50ZWRUZXh0KHRleHQsIGluZGVudExldmVsKSB7XHJcbiAgICAgICAgbGV0IHN0ciA9IFwiXCI7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRlbnRMZXZlbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN0ciArPSBcIiBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0ciArIHRleHQ7XHJcbiAgICB9XHJcbiAgICBkcmF3SG9yaXpvbnRhbExpbmUoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9jZXNzLnN0ZG91dC5jb2x1bW5zIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKFwiXFx1MjUwMFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoXCJcXG5cIik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IHsgQmFzaWNSZXBvcnRlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lRbUZ6YVdOU1pYQnZjblJsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5U1pYQnZjblJsY2k5VGRHOWpheTlDWVhOcFkxSmxjRzl5ZEdWeUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEU5QlFVOHNUVUZCVFN4TlFVRk5MR0ZCUVdFc1EwRkJRenRCUVVOcVF5eFBRVUZQTEVWQlFVTXNVMEZCVXl4RlFVRkRMRTFCUVUwc2QwSkJRWGRDTEVOQlFVTTdRVUZKYWtRN08wZEJSVWM3UVVGRFNDeE5RVUZOTEdGQlFXRTdTVUZCYmtJN1VVRkRXU3c0UWtGQmVVSXNSMEZCWVN4RlFVRkZMRU5CUVVNN1NVRjNSSEpFTEVOQlFVTTdTVUYwUkVjc1ZVRkJWVHRSUVVOT0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjJSQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJRenRSUVVVeFFpeFBRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRKUVVNM1FpeERRVUZETzBsQlJVUXNWMEZCVnl4RFFVRkRMRkZCUVd0Q08xRkJRekZDTEhWQ1FVRjFRanRKUVVNelFpeERRVUZETzBsQlJVUXNVMEZCVXl4RFFVRkRMRlZCUVhOQ08xRkJRelZDTEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWNzVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4clFrRkJhMElzUTBGQlF6dFJRVU5zUlN4TlFVRk5MRmRCUVZjc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRMnhFTEVsQlFVa3NhMEpCUVd0Q0xFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNSVUZCUlR0WlFVTnFSeXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTTdXVUZEY0VRc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGRrUXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0blFrRkRhRVFzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdZVUZEZGtZN1UwRkRTanRSUVVWRUxFbEJRVWtzVlVGQlZTeERRVUZETEUxQlFVMHNTMEZCU3l4TlFVRk5MRVZCUVVVN1dVRkRPVUlzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1ZVRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOdVJ5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zUzBGQlRTeERRVUZETEU5QlFVOHNSVUZCUlN4WFFVRlhMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU16Unp0aFFVRk5MRWxCUVVrc1ZVRkJWU3hEUVVGRExFMUJRVTBzUzBGQlN5eFRRVUZUTEVWQlFVVTdXVUZEZUVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTjBSenRoUVVGTkxFbEJRVWtzVlVGQlZTeERRVUZETEUxQlFVMHNTMEZCU3l4VFFVRlRMRVZCUVVVN1dVRkRlRU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1ZVRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVONlJ6dGhRVUZOTEVsQlFVa3NWVUZCVlN4RFFVRkRMRTFCUVUwc1MwRkJTeXhUUVVGVExFVkJRVVU3V1VGRGVFTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU5zUnp0SlFVTk1MRU5CUVVNN1NVRkZSQ3hSUVVGUkxFTkJRVU1zVDBGQmJVSTdVVUZEZUVJc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4alFVRmpMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhqUVVGakxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eFpRVUZaTEU5QlFVOHNRMEZCUXl4VlFVRlZMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRM0JQTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hQUVVGUExFTkJRVU1zWVVGQllTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnFSQ3dyUTBGQkswTTdTVUZEYmtRc1EwRkJRenRKUVVWUExHVkJRV1VzUTBGQlF5eEpRVUZaTEVWQlFVVXNWMEZCYlVJN1VVRkRja1FzU1VGQlNTeEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTJJc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRmRCUVZjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdFpRVU5zUXl4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRE8xTkJRMlE3VVVGRFJDeFBRVUZQTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRkRkRUlzUTBGQlF6dEpRVVZQTEd0Q1FVRnJRanRSUVVOMFFpeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzFsQlEycEVMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMU5CUTJ4RE8xRkJRMFFzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGREwwSXNRMEZCUXp0RFFVTktPMEZCUlVRc1QwRkJUeXhGUVVGRExHRkJRV0VzUlVGQlF5eERRVUZESW4wPSIsImltcG9ydCB7IEJhc2ljUmVwb3J0ZXIgfSBmcm9tIFwiLi9CYXNpY1JlcG9ydGVyXCI7XHJcbmNvbnN0IFN0b2NrUmVwb3J0ZXJNYXAgPSB7XHJcbiAgICBcImJhc2ljXCI6IEJhc2ljUmVwb3J0ZXIsXHJcbn07XHJcbmV4cG9ydCB7IFN0b2NrUmVwb3J0ZXJNYXAgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVTNSdlkydFNaWEJ2Y25SbGNrMWhjQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTlTWlhCdmNuUmxjaTlUZEc5amF5OVRkRzlqYTFKbGNHOXlkR1Z5VFdGd0xuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEU5QlFVOHNSVUZCUXl4aFFVRmhMRVZCUVVNc1RVRkJUU3hwUWtGQmFVSXNRMEZCUXp0QlFVYzVReXhOUVVGTkxHZENRVUZuUWl4SFFVRXlRenRKUVVNM1JDeFBRVUZQTEVWQlFVVXNZVUZCWVR0RFFVTjZRaXhEUVVGRE8wRkJSVVlzVDBGQlR5eEZRVUZETEdkQ1FVRm5RaXhGUVVGRExFTkJRVU1pZlE9PSIsImNvbnN0IGdsb2JhbEFueSA9IGdsb2JhbDtcclxuY29uc3QgRXhwb3J0R2xvYmFscyA9IChjb250ZXh0KSA9PiB7XHJcbiAgICBjb25zdCBydW5uZXIgPSBjb250ZXh0LnJ1bm5lcjtcclxuICAgIC8vIE5vdGU6IHVzaW5nIGJpbmQgcmVzdWx0cyBpbiBwcm9wZXJ0eSBsb3NzLCBzbyBgaXRgIGhhcyB0byBiZSByZS1hc3NpZ25lZC5cclxuICAgIGNvbnN0IGl0T25seSA9IHJ1bm5lci5pdC5vbmx5LmJpbmQocnVubmVyKTtcclxuICAgIGNvbnN0IGRlc2NyaWJlT25seSA9IHJ1bm5lci5kZXNjcmliZS5vbmx5LmJpbmQocnVubmVyKTtcclxuICAgIGNvbnN0IGdsb2JhbEZ1bmN0aW9ucyA9IFtcIml0XCIsIFwiZGVzY3JpYmVcIiwgXCJhZnRlclwiLCBcImFmdGVyRWFjaFwiLCBcImJlZm9yZVwiLCBcImJlZm9yZUVhY2hcIl07XHJcbiAgICBmb3IgKGNvbnN0IGZuTmFtZSBvZiBnbG9iYWxGdW5jdGlvbnMpIHtcclxuICAgICAgICBnbG9iYWxBbnlbZm5OYW1lXSA9IHJ1bm5lcltmbk5hbWVdLmJpbmQocnVubmVyKTtcclxuICAgIH1cclxuICAgIGdsb2JhbEFueVtcIml0XCJdW1wib25seVwiXSA9IGl0T25seTtcclxuICAgIGdsb2JhbEFueVtcImRlc2NyaWJlXCJdW1wib25seVwiXSA9IGRlc2NyaWJlT25seTtcclxuICAgIGdsb2JhbEFueVtcIl9fdGVzdFJ1bm5lclwiXSA9IHJ1bm5lcjtcclxuICAgIHJldHVybiBjb250ZXh0O1xyXG59O1xyXG5leHBvcnQgeyBFeHBvcnRHbG9iYWxzIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVJYaHdiM0owUjJ4dlltRnNjeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OVRkR0Z5ZEhWd1UzUmhaMlZ6TDBWNGNHOXlkRWRzYjJKaGJITXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCWlVFc1RVRkJUU3hUUVVGVExFZEJRVkVzVFVGQlRTeERRVUZETzBGQlJUbENMRTFCUVUwc1lVRkJZU3hIUVVGSExFTkJRVU1zVDBGQmRVSXNSVUZCYTBJc1JVRkJSVHRKUVVNNVJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJSVGxDTERSRlFVRTBSVHRKUVVNMVJTeE5RVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1NVRkRNME1zVFVGQlRTeFpRVUZaTEVkQlFVY3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUlhaRUxFMUJRVTBzWlVGQlpTeEhRVUY1UWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hWUVVGVkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZkQlFWY3NSVUZCUlN4UlFVRlJMRVZCUVVVc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGREwwY3NTMEZCU3l4TlFVRk5MRTFCUVUwc1NVRkJTU3hsUVVGbExFVkJRVVU3VVVGRGJFTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UzBGRGJrUTdTVUZEUkN4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRPMGxCUTJwRExGTkJRVk1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhaUVVGWkxFTkJRVU03U1VGRE4wTXNVMEZCVXl4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF6dEpRVVZ1UXl4UFFVRlBMRTlCUVU4c1EwRkJRenRCUVVOdVFpeERRVUZETEVOQlFVTTdRVUZGUml4UFFVRlBMRVZCUVVNc1lVRkJZU3hGUVVGRExFTkJRVU1pZlE9PSIsImNsYXNzIFNpbXBsZUFyZ1BhcnNlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLndhdGNoZWRBcmdzID0gW107XHJcbiAgICAgICAgdGhpcy5iYW5uZXIgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgd2l0aEJhbm5lcihiYW5uZXIpIHtcclxuICAgICAgICB0aGlzLmJhbm5lciA9IGJhbm5lcjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGFkZEFyZ3VtZW50KG5hbWUsIGFsaWFzZXMsIGhlbHAsIHJlcXVpcmVkLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFwidHJhaWxpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy53YXRjaGVkQXJncy5zb21lKChhcmcpID0+IGFyZy50eXBlID09PSBcInRyYWlsaW5nXCIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGFkZCBhcmcgd2l0aCBuYW1lOiAke25hbWV9LCBzaW5jZSBhbm90aGVyIHRyYWlsaW5nIGFyZyBhbHJlYWR5IGV4aXN0c2ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFsbEFsaWFzZXMgPSBbYC0tJHtuYW1lfWAsIGAtJHtuYW1lfWAsIC4uLmFsaWFzZXNdO1xyXG4gICAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFsbEFsaWFzZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgYXJnRXhpc3RzID0gdGhpcy53YXRjaGVkQXJncy5zb21lKChhcmdJbmZvKSA9PiBhcmdJbmZvLmFsbEFsaWFzZXMuaW5kZXhPZihhcmcpICE9PSAtMSk7XHJcbiAgICAgICAgICAgIGlmIChhcmdFeGlzdHMpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgYWRkIGFyZyB3aXRoIG5hbWUgJHthcmd9LCBzaW5jZSBpdCBhbHJlYWR5IHdhcyBhZGRlZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLndhdGNoZWRBcmdzLnB1c2goe1xyXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICBhbGxBbGlhc2VzOiBhbGxBbGlhc2VzLFxyXG4gICAgICAgICAgICBoZWxwOiBoZWxwLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQsXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHBhcnNlKGFyZ3YpIHtcclxuICAgICAgICBjb25zdCB0cmltbWVkQXJndiA9IGFyZ3Yuc2xpY2UoMik7IC8vIFJlbW92ZSB0aGUgbmFtZSArIHBhdGguXHJcbiAgICAgICAgLy8gVE9ETzogU3VwcG9ydCBhIGZhbmN5IGhlbHAgZmlsZS5cclxuICAgICAgICBjb25zdCByZXF1aXJlZEFyZ3MgPSB0aGlzLndhdGNoZWRBcmdzLmZpbHRlcigoYXJnSW5mbykgPT4gYXJnSW5mby5yZXF1aXJlZCk7XHJcbiAgICAgICAgZm9yIChjb25zdCByZXF1aXJlZEFyZ0luZm8gb2YgcmVxdWlyZWRBcmdzKSB7XHJcbiAgICAgICAgICAgIGlmICghcmVxdWlyZWRBcmdJbmZvLmFsbEFsaWFzZXMuc29tZSgoYXJnTmFtZSkgPT4gdHJpbW1lZEFyZ3YuaW5kZXhPZihhcmdOYW1lKSAhPT0gLTEpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgYXJnIHdpdGggbmFtZSAke3JlcXVpcmVkQXJnSW5mby5uYW1lfSwgb3IgYWxpYXNlczogJHtyZXF1aXJlZEFyZ0luZm8uYWxsQWxpYXNlcy5zcGxpY2UoMSl9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXJnUmVzdWx0cyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgYXJnSW5mbyBvZiB0aGlzLndhdGNoZWRBcmdzKSB7XHJcbiAgICAgICAgICAgIGlmIChhcmdJbmZvLnR5cGUgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdSZXN1bHRzW2FyZ0luZm8ubmFtZV0gPSB0aGlzLmV4dHJhY3RCb29sZWFuKGFyZ0luZm8uYWxsQWxpYXNlcywgdHJpbW1lZEFyZ3YpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ0luZm8udHlwZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5leHRyYWN0U3RyaW5nKGFyZ0luZm8uYWxsQWxpYXNlcywgdHJpbW1lZEFyZ3YpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ1Jlc3VsdHNbYXJnSW5mby5uYW1lXSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhcmdJbmZvLnR5cGUgPT09IFwidHJhaWxpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5leHRyYWN0VHJhaWxpbmcodHJpbW1lZEFyZ3YpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ1Jlc3VsdHNbYXJnSW5mby5uYW1lXSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJnUmVzdWx0cztcclxuICAgIH1cclxuICAgIGV4dHJhY3RCb29sZWFuKG5hbWVzLCBhcmd2KSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd2Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lcy5pbmRleE9mKGFyZ3ZbaV0pICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gYXJndltpICsgMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0V4cGxpY2l0bHlGYWxzZSA9IHR5cGVvZiBuZXh0VmFsdWUgPT09IFwic3RyaW5nXCIgJiYgbmV4dFZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwiZmFsc2VcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhaXNFeHBsaWNpdGx5RmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZXh0cmFjdFN0cmluZyhuYW1lcywgYXJndikge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobmFtZXMuaW5kZXhPZihhcmd2W2ldKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRWYWx1ZSA9IGFyZ3ZbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGFyZ3YubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyByZXF1aXJlZCBhcmcgdmFsdWUgZm9yIHN0cmluZyBhcmcgd2l0aCBuYW1lICR7bmFtZXNbMF19YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgZXh0cmFjdFRyYWlsaW5nKGFyZ3YpIHtcclxuICAgICAgICBjb25zdCBzdGFydE9mVGFpbCA9IHRoaXMuZ2V0U3RhcnRPZlRhaWwoYXJndik7XHJcbiAgICAgICAgaWYgKHN0YXJ0T2ZUYWlsICE9PSBudWxsICYmIHN0YXJ0T2ZUYWlsIDwgYXJndi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFyZ3Yuc2xpY2Uoc3RhcnRPZlRhaWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGdldFN0YXJ0T2ZUYWlsKGFyZ3YpIHtcclxuICAgICAgICBjb25zdCB0eXBlTWFwID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBhcmdJbmZvIG9mIHRoaXMud2F0Y2hlZEFyZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBhbGlhcyBvZiBhcmdJbmZvLmFsbEFsaWFzZXMpIHtcclxuICAgICAgICAgICAgICAgIHR5cGVNYXBbYWxpYXNdID0gYXJnSW5mby50eXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSBhcmd2Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBcmcgPSBhcmd2W2ldLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzQXJnID0gaSA+IDAgPyBhcmd2W2kgLSAxXS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKHR5cGVNYXBbY3VycmVudEFyZ10pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0FyZyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVNYXBbcHJldmlvdXNBcmddKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZU1hcFtwcmV2aW91c0FyZ10gPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRBcmcgIT09IFwiZmFsc2VcIiAmJiBjdXJyZW50QXJnICE9PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IHsgU2ltcGxlQXJnUGFyc2VyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVUybHRjR3hsUVhKblVHRnljMlZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMME52Ym1acFp5OVRhVzF3YkdWQmNtZFFZWEp6WlhJdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJWVUVzVFVGQlRTeGxRVUZsTzBsQlFYSkNPMUZCUlhGQ0xHZENRVUZYTEVkQlFXTXNSVUZCUlN4RFFVRkRPMUZCUTNKRExGZEJRVTBzUjBGQmEwSXNTVUZCU1N4RFFVRkRPMGxCZDBsNlF5eERRVUZETzBsQmRFbEhMRlZCUVZVc1EwRkJReXhOUVVGak8xRkJRM0pDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRM0pDTEU5QlFVOHNTVUZCU1N4RFFVRkRPMGxCUTJoQ0xFTkJRVU03U1VGRlJDeFhRVUZYTEVOQlFTdENMRWxCUVZNc1JVRkJSU3hQUVVGcFFpeEZRVUZGTEVsQlFWa3NSVUZCUlN4UlFVRnBRaXhGUVVGRkxFbEJRV0U3VVVGRGJFZ3NTVUZCU1N4SlFVRkpMRXRCUVVzc1ZVRkJWU3hGUVVGRk8xbEJRM0pDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFdEJRVXNzVlVGQlZTeERRVUZETEVWQlFVVTdaMEpCUTNwRUxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNORUpCUVRSQ0xFbEJRVWtzTmtOQlFUWkRMRU5CUVVNc1EwRkJRenRoUVVOc1J6dFRRVU5LTzFGQlJVUXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhMUVVGTExFbEJRVWtzUlVGQlJTeEZRVUZGTEVsQlFVa3NTVUZCU1N4RlFVRkZMRVZCUVVVc1IwRkJSeXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU42UkN4TFFVRkxMRTFCUVUwc1IwRkJSeXhKUVVGSkxGVkJRVlVzUlVGQlJUdFpRVU14UWl4TlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjJSeXhKUVVGSkxGTkJRVk1zUlVGQlJUdG5Ra0ZEV0N4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExESkNRVUV5UWl4SFFVRkhMQ3RDUVVFclFpeERRVUZETEVOQlFVTTdZVUZEYkVZN1UwRkRTanRSUVVWRUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRPMWxCUTJ4Q0xFbEJRVWtzUlVGQlJTeEpRVUZqTzFsQlEzQkNMRlZCUVZVc1JVRkJSU3hWUVVGelFqdFpRVU5zUXl4SlFVRkpMRVZCUVVVc1NVRkJTVHRaUVVOV0xGRkJRVkVzUlVGQlJTeFJRVUZSTzFsQlEyeENMRWxCUVVrc1JVRkJSU3hKUVVGSk8xTkJRMklzUTBGQlF5eERRVUZETzFGQlJVZ3NUMEZCVHl4SlFVRkpMRU5CUVVNN1NVRkRhRUlzUTBGQlF6dEpRVVZFTEV0QlFVc3NRMEZCWVN4SlFVRmpPMUZCUXpWQ0xFMUJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5d3dRa0ZCTUVJN1VVRkROMFFzYlVOQlFXMURPMUZCUlc1RExFMUJRVTBzV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VVVGRE5VVXNTMEZCU3l4TlFVRk5MR1ZCUVdVc1NVRkJTU3haUVVGWkxFVkJRVVU3V1VGRGVFTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRVZCUVVVc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3WjBKQlEzQkdMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zYTBOQlFXdERMR1ZCUVdVc1EwRkJReXhKUVVGSkxHbENRVUZwUWl4bFFVRmxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1lVRkRiRWs3VTBGRFNqdFJRVVZFTEUxQlFVMHNWVUZCVlN4SFFVRTBRaXhGUVVGRkxFTkJRVU03VVVGREwwTXNTMEZCU3l4TlFVRk5MRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTzFsQlEzQkRMRWxCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzUzBGQlN5eFRRVUZUTEVWQlFVVTdaMEpCUXpWQ0xGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8yRkJRMjVHTzJsQ1FVRk5MRWxCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzUzBGQlN5eFJRVUZSTEVWQlFVVTdaMEpCUTJ4RExFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUlVGQlJTeFhRVUZYTEVOQlFVTXNRMEZCUXp0blFrRkRia1VzU1VGQlNTeE5RVUZOTEV0QlFVc3NTVUZCU1N4RlFVRkZPMjlDUVVOcVFpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF6dHBRa0ZEY2tNN1lVRkRTanRwUWtGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRXRCUVVzc1ZVRkJWU3hGUVVGRk8yZENRVU53UXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMmRDUVVOcVJDeEpRVUZKTEUxQlFVMHNTMEZCU3l4SlFVRkpMRVZCUVVVN2IwSkJRMnBDTEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETzJsQ1FVTnlRenRoUVVOS08xTkJRMG83VVVGRlJDeFBRVUZQTEZWQlFYZENMRU5CUVVNN1NVRkRjRU1zUTBGQlF6dEpRVVZQTEdOQlFXTXNRMEZCUXl4TFFVRmxMRVZCUVVVc1NVRkJZenRSUVVOc1JDeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVOc1F5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN1owSkJReTlDTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUXpsQ0xFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1QwRkJUeXhUUVVGVExFdEJRVXNzVVVGQlVTeEpRVUZKTEZOQlFWTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1MwRkJTeXhQUVVGUExFTkJRVU03WjBKQlJTOUdMRTlCUVU4c1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0aFFVTTNRanRUUVVOS08xRkJSVVFzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWUExHRkJRV0VzUTBGQlF5eExRVUZsTEVWQlFVVXNTVUZCWXp0UlFVTnFSQ3hMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTnNReXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVTdaMEpCUXk5Q0xFMUJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlF6bENMRWxCUVVrc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMjlDUVVOMlFpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMSFZFUVVGMVJDeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8ybENRVU4wUmp0blFrRkZSQ3hQUVVGUExGTkJRVk1zUTBGQlF6dGhRVU53UWp0VFFVTktPMUZCUlVRc1QwRkJUeXhKUVVGSkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0SlFVVlBMR1ZCUVdVc1EwRkJReXhKUVVGak8xRkJRMnhETEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZET1VNc1NVRkJTU3hYUVVGWExFdEJRVXNzU1VGQlNTeEpRVUZKTEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8xbEJRMjVFTEU5QlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFRRVU5zUXp0UlFVVkVMRTlCUVU4c1NVRkJTU3hEUVVGRE8wbEJRMmhDTEVOQlFVTTdTVUZGVHl4alFVRmpMRU5CUVVNc1NVRkJZenRSUVVOcVF5eE5RVUZOTEU5QlFVOHNSMEZCYVVNc1JVRkJSU3hEUVVGRE8xRkJRMnBFTEV0QlFVc3NUVUZCVFN4UFFVRlBMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJUdFpRVU53UXl4TFFVRkxMRTFCUVUwc1MwRkJTeXhKUVVGSkxFOUJRVThzUTBGQlF5eFZRVUZWTEVWQlFVVTdaMEpCUTNCRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRE8yRkJRMnBETzFOQlEwbzdVVUZGUkN4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdXVUZEZGtNc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE8xbEJRM3BETEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVVM1JDeEpRVUZKTEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSVHRuUWtGRGNrSXNVMEZCVXp0aFFVTmFPMWxCUlVRc1NVRkJTU3hYUVVGWExFdEJRVXNzU1VGQlNTeEZRVUZGTzJkQ1FVTjBRaXhQUVVGUExFTkJRVU1zUTBGQlF6dGhRVU5hTzFsQlJVUXNTVUZCU1N4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVVU3WjBKQlEzUkNMRWxCUVVrc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEZOQlFWTXNSVUZCUlR0dlFrRkRjRU1zU1VGQlNTeFZRVUZWTEV0QlFVc3NUMEZCVHl4SlFVRkpMRlZCUVZVc1MwRkJTeXhOUVVGTkxFVkJRVVU3ZDBKQlEycEVMRTlCUVU4c1EwRkJReXhEUVVGRE8zRkNRVU5hTzNsQ1FVRk5PM2RDUVVOSUxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0eFFrRkRhRUk3YVVKQlEwbzdjVUpCUVUwN2IwSkJRMGdzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmxDUVVOb1FqdGhRVU5LTzFOQlEwbzdVVUZGUkN4UFFVRlBMRWxCUVVrc1EwRkJRenRKUVVOb1FpeERRVUZETzBOQlEwbzdRVUZGUkN4UFFVRlBMRVZCUVVVc1pVRkJaU3hGUVVGRkxFTkJRVU1pZlE9PSIsImltcG9ydCB7IFNpbXBsZUFyZ1BhcnNlciB9IGZyb20gXCIuL1NpbXBsZUFyZ1BhcnNlclwiO1xyXG5jbGFzcyBDbGlDb25maWdSZXNvbHZlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihhcmdQYXJzZXIgPSBuZXcgU2ltcGxlQXJnUGFyc2VyKCkpIHtcclxuICAgICAgICB0aGlzLmFyZ1BhcnNlciA9IGFyZ1BhcnNlcjtcclxuICAgIH1cclxuICAgIHBhcnNlKGFyZ3YpIHtcclxuICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5hcmdQYXJzZXJcclxuICAgICAgICAgICAgLmFkZEFyZ3VtZW50KFwiaW5wdXRcIiwgW10sIFwiRmlsZXMsIG9yIGdsb2JzLCB0byBydW4gd2l0aCB0aGUgVW1icmEgVGVzdCBSdW5uZXJcIiwgZmFsc2UsIFwidHJhaWxpbmdcIilcclxuICAgICAgICAgICAgLmFkZEFyZ3VtZW50KFwiZGVidWdcIiwgW1wiLWRcIiwgXCItLWluc3BlY3RcIl0sIFwiRW5hYmxlcyB0aGUgTm9kZSBkZWJ1Z2dlclwiLCBmYWxzZSwgXCJib29sZWFuXCIpXHJcbiAgICAgICAgICAgIC5hZGRBcmd1bWVudChcImRlYnVnQnJlYWtcIiwgW1wiLWRiXCIsIFwiLS1kZWJ1Zy1icmtcIiwgXCItLWRlYnVnLWJyZWFrXCIsIFwiLS1pbnNwZWN0LWJyZWFrXCJdLCBcIkVuYWJsZXMgdGhlIE5vZGUgZGVidWdnZXIsIGJyZWFraW5nIG9uY2UgdGhlIGZpcnN0IHRlc3QgaXMgZXZhbHVhdGVkXCIsIGZhbHNlLCBcImJvb2xlYW5cIilcclxuICAgICAgICAgICAgLmFkZEFyZ3VtZW50KFwid2F0Y2hcIiwgW1wiLXdcIl0sIFwiRW5hYmxlcyB3YXRjaCBtb2RlLCB3aGljaCB3aWxsIGV2YWx1YXRlIGFsbCB0ZXN0cyBmaXJzdCBhbmQgdGhlbiBhZ2FpbiBvbmNlIGNoYW5nZXMgb2NjdXJcIiwgZmFsc2UsIFwiYm9vbGVhblwiKVxyXG4gICAgICAgICAgICAuYWRkQXJndW1lbnQoXCJjb25maWdQYXRoXCIsIFtcIi0tY29uZmlnXCIsIFwiLWNcIl0sIFwiU2V0cyB0aGUgY29uZmlnIGZpbGUgcGF0aFwiLCBmYWxzZSwgXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgLnBhcnNlKGFyZ3YpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB7IENsaUNvbmZpZ1Jlc29sdmVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVEyeHBRMjl1Wm1sblVtVnpiMngyWlhJdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12UTI5dVptbG5MME5zYVVOdmJtWnBaMUpsYzI5c2RtVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVThzUlVGQlF5eGxRVUZsTEVWQlFVTXNUVUZCVFN4dFFrRkJiVUlzUTBGQlF6dEJRVGhDYkVRc1RVRkJUU3hwUWtGQmFVSTdTVUZIYmtJc1dVRkJXU3hUUVVGVExFZEJRVWNzU1VGQlNTeGxRVUZsTEVWQlFVVTdVVUZEZWtNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTTdTVUZETDBJc1EwRkJRenRKUVVWRUxFdEJRVXNzUTBGQlF5eEpRVUZqTzFGQlEyaENMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTzJGQlEzcENMRmRCUVZjc1EwRkJReXhQUVVGUExFVkJRVVVzUlVGQlJTeEZRVUZGTEc5RVFVRnZSQ3hGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVOQlFVTTdZVUZEYWtjc1YwRkJWeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVsQlFVa3NSVUZCUlN4WFFVRlhMRU5CUVVNc1JVRkJSU3d5UWtGQk1rSXNSVUZCUlN4TFFVRkxMRVZCUVVVc1UwRkJVeXhEUVVGRE8yRkJRM2hHTEZkQlFWY3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJReXhMUVVGTExFVkJRVVVzWVVGQllTeEZRVUZGTEdWQlFXVXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eEZRVUZGTEhORlFVRnpSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVOQlFVTTdZVUZETDBzc1YwRkJWeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMREpHUVVFeVJpeEZRVUZGTEV0QlFVc3NSVUZCUlN4VFFVRlRMRU5CUVVNN1lVRkRNMGtzVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJTd3lRa0ZCTWtJc1JVRkJSU3hMUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETzJGQlF6TkdMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVVZxUWl4UFFVRlBMRTlCUVc5Q0xFTkJRVU03U1VGRGFFTXNRMEZCUXp0RFFVTktPMEZCUlVRc1QwRkJUeXhGUVVGRExHbENRVUZwUWl4RlFVRlpMRU5CUVVNaWZRPT0iLCJpbXBvcnQgeyBzcGF3biB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XHJcbmNsYXNzIFNpbXBsZVRTQ1dyYXBwZXIge1xyXG4gICAgY29uc3RydWN0b3Ioc3Bhd25SZWYgPSBzcGF3bikge1xyXG4gICAgICAgIHRoaXMuc3Bhd25SZWYgPSBzcGF3bjtcclxuICAgIH1cclxuICAgIHNwYXduKGluRmlsZSwgb3V0RmlsZSkge1xyXG4gICAgICAgIC8vIFRPRE86IEFkZCBiZXR0ZXIgdmVyYm9zZSBsb2dnaW5nIGZsYWdzLCB0c2MgY29uZmlnIG9wdGlvbnMsIGVycm9yIG1lc3NhZ2luZy5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0c2NQcm9jZXNzID0gdGhpcy5zcGF3blJlZihcInRzY1wiLCBbXCItLW91dEZpbGVcIiwgb3V0RmlsZSwgaW5GaWxlXSwgeyBzdGRpbzogXCJpbmhlcml0XCIsIHNoZWxsOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB0c2NQcm9jZXNzLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcclxuICAgICAgICAgICAgdHNjUHJvY2Vzcy5vbihcImNsb3NlXCIsIHJlc29sdmUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB7IFNpbXBsZVRTQ1dyYXBwZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVTJsdGNHeGxWRk5EVjNKaGNIQmxjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OURiMjVtYVdjdlUybHRjR3hsVkZORFYzSmhjSEJsY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hQUVVGUExFVkJRVU1zUzBGQlN5eEZRVUZETEUxQlFVMHNaVUZCWlN4RFFVRkRPMEZCUlhCRExFMUJRVTBzWjBKQlFXZENPMGxCUjJ4Q0xGbEJRVmtzVVVGQlVTeEhRVUZITEV0QlFVczdVVUZEZUVJc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTTdTVUZETVVJc1EwRkJRenRKUVVWRUxFdEJRVXNzUTBGQlF5eE5RVUZqTEVWQlFVVXNUMEZCWlR0UlFVTnFReXdyUlVGQkswVTdVVUZETDBVc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4TlFVRk5MRVZCUVVVc1JVRkJSVHRaUVVOdVF5eE5RVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEZkQlFWY3NSVUZCUlN4UFFVRlBMRVZCUVVVc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlF5eExRVUZMTEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVU1zUTBGQlF5eERRVUZETzFsQlEzcEhMRlZCUVZVc1EwRkJReXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMWxCUXk5Q0xGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM0JETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJRenREUVVOS08wRkJSVVFzVDBGQlR5eEZRVUZETEdkQ1FVRm5RaXhGUVVGRExFTkJRVU1pZlE9PSIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnNQcm9taXNlcyB9IGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IFNpbXBsZVRTQ1dyYXBwZXIgfSBmcm9tIFwiLi9TaW1wbGVUU0NXcmFwcGVyXCI7XHJcbmNsYXNzIENvbmZpZ0ZpbGVMb2FkZXIge1xyXG4gICAgY29uc3RydWN0b3IobWtkaXJQcm9taXNlID0gZnNQcm9taXNlcy5ta2Rpciwgc3RhdFByb21pc2UgPSBmc1Byb21pc2VzLnN0YXQsIHJlcXVpcmVQcm94eSA9IHJlcXVpcmUsIHRzRXhlY3V0b3IgPSBuZXcgU2ltcGxlVFNDV3JhcHBlcigpKSB7XHJcbiAgICAgICAgdGhpcy5tYWtlQ2FjaGVEaXIgPSAoY2FjaGVEaXIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuc3RhdFByb21pc2UoY2FjaGVEaXIpLmNhdGNoKCgpID0+IHRoaXMubWtkaXJQcm9taXNlKGNhY2hlRGlyKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldEpzQ29uZmlnUGF0aCA9ICh0c0NvbmZpZ1BhdGgsIGNhY2hlRGlyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZSh0c0NvbmZpZ1BhdGgsIFwiLnRzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gcGF0aC5yZXNvbHZlKGNhY2hlRGlyLCBmaWxlTmFtZSArIFwiLmpzXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb21waWxlVHNDb25maWcgPSAoY29uZmlnUGF0aCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKGZpbmFsUGF0aCkgPT4gdGhpcy50c0V4ZWN1dG9yLnNwYXduKGNvbmZpZ1BhdGgsIGZpbmFsUGF0aCkudGhlbigoKSA9PiBmaW5hbFBhdGgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5ta2RpclByb21pc2UgPSBta2RpclByb21pc2U7XHJcbiAgICAgICAgdGhpcy5zdGF0UHJvbWlzZSA9IHN0YXRQcm9taXNlO1xyXG4gICAgICAgIHRoaXMucmVxdWlyZVJlZiA9IHJlcXVpcmVQcm94eTtcclxuICAgICAgICB0aGlzLnRzRXhlY3V0b3IgPSB0c0V4ZWN1dG9yO1xyXG4gICAgfVxyXG4gICAgbG9hZENvbmZpZyhjb25maWdQYXRoLCBjYWNoZURpcikge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghY29uZmlnUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWNhY2hlRGlyKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNhY2hlIGRpcmVjdG9yeVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZFBhdGggPSBwYXRoLnJlc29sdmUoY29uZmlnUGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZFBhdGguZW5kc1dpdGgoXCIuanNcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRKc0NvbmZpZyhyZXNvbHZlZFBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc29sdmVkUGF0aC5lbmRzV2l0aChcIi50c1wiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZFRzQ29uZmlnKHJlc29sdmVkUGF0aCwgY2FjaGVEaXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVtYnJhIGNvbmZpZyB0eXBlISBNdXN0IGJlIGVpdGhlciBqcyBvciB0cywgYnV0IHdhcyAke3BhdGguZXh0bmFtZShyZXNvbHZlZFBhdGgpfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBsb2FkSnNDb25maWcoY29uZmlnUGF0aCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghY29uZmlnUGF0aC5lbmRzV2l0aChcIi5qc1wiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0UHJvbWlzZShjb25maWdQYXRoKS50aGVuKCgpID0+IHRoaXMucmVxdWlyZVJlZihjb25maWdQYXRoKSkuY2F0Y2goKCkgPT4gbnVsbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBsb2FkVHNDb25maWcoY29uZmlnUGF0aCwgY2FjaGVEaXIpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBpZiAoIWNvbmZpZ1BhdGguZW5kc1dpdGgoXCIudHNcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdFByb21pc2UoY29uZmlnUGF0aClcclxuICAgICAgICAgICAgICAgIC50aGVuKHRoaXMubWFrZUNhY2hlRGlyKGNhY2hlRGlyKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuZ2V0SnNDb25maWdQYXRoKGNvbmZpZ1BhdGgsIGNhY2hlRGlyKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuY29tcGlsZVRzQ29uZmlnKGNvbmZpZ1BhdGgpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGZpbmFsUGF0aCkgPT4gdGhpcy5yZXF1aXJlUmVmKGZpbmFsUGF0aCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB7IENvbmZpZ0ZpbGVMb2FkZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUTI5dVptbG5SbWxzWlV4dllXUmxjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OURiMjVtYVdjdlEyOXVabWxuUm1sc1pVeHZZV1JsY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN1FVRkJRU3hQUVVGUExFVkJRVU1zVVVGQlVTeEpRVUZKTEZWQlFWVXNSVUZCUXl4TlFVRk5MRWxCUVVrc1EwRkJRenRCUVVNeFF5eFBRVUZQTEV0QlFVc3NTVUZCU1N4TlFVRk5MRTFCUVUwc1EwRkJRenRCUVVNM1FpeFBRVUZQTEVWQlFVTXNaMEpCUVdkQ0xFVkJRVU1zVFVGQlRTeHZRa0ZCYjBJc1EwRkJRenRCUVVkd1JDeE5RVUZOTEdkQ1FVRm5RanRKUVU5c1FpeFpRVUZaTEZsQlFWa3NSMEZCUnl4VlFVRlZMRU5CUVVNc1MwRkJTeXhGUVVGRkxGZEJRVmNzUjBGQlJ5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RlFVRkZMRmxCUVZrc1IwRkJSeXhQUVVGUExFVkJRVVVzVlVGQlZTeEhRVUZITEVsQlFVa3NaMEpCUVdkQ0xFVkJRVVU3VVVFNFF5OUlMR2xDUVVGWkxFZEJRVWNzUTBGQlF5eFJRVUZuUWl4RlFVRkZMRVZCUVVVN1dVRkRlRU1zVDBGQlR5eEhRVUZITEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRja1lzUTBGQlF5eERRVUZETzFGQlJVMHNiMEpCUVdVc1IwRkJSeXhEUVVGRExGbEJRVzlDTEVWQlFVVXNVVUZCWjBJc1JVRkJSU3hGUVVGRk8xbEJRMnBGTEUxQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTNCRUxFOUJRVThzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUXpGRUxFTkJRVU1zUTBGQlF6dFJRVVZOTEc5Q1FVRmxMRWRCUVVjc1EwRkJReXhWUVVGclFpeEZRVUZGTEVWQlFVVTdXVUZETjBNc1QwRkJUeXhEUVVGRExGTkJRV2xDTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRja2NzUTBGQlF5eERRVUZCTzFGQmVFUkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzV1VGQldTeERRVUZETzFGQlEycERMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVjBGQlZ5eERRVUZETzFGQlF5OUNMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzV1VGQldTeERRVUZETzFGQlF5OUNMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZTeERRVUZETzBsQlEycERMRU5CUVVNN1NVRkZTeXhWUVVGVkxFTkJRVU1zVlVGQmEwSXNSVUZCUlN4UlFVRTBRanM3V1VGRE4wUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSVHRuUWtGRFlpeFBRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WVVGRGFFTTdXVUZGUkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRk8yZENRVU5ZTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXp0aFFVTTVRenRaUVVWRUxFMUJRVTBzV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03V1VGRE9VTXNTVUZCU1N4WlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzJkQ1FVTTVRaXhQUVVGUExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1lVRkRNVU03YVVKQlFVMHNTVUZCU1N4WlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzJkQ1FVTnlReXhQUVVGUExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNXVUZCV1N4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8yRkJRM0JFTzJsQ1FVRk5PMmRDUVVOSUxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNLMFJCUVN0RUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8yRkJRMmhJTzFGQlEwd3NRMEZCUXp0TFFVRkJPMGxCUldFc1dVRkJXU3hEUVVGRExGVkJRV3RDT3p0WlFVTjZReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSVHRuUWtGRE4wSXNUMEZCVHl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJGQlEyaERPMWxCUlVRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRMnhITEVOQlFVTTdTMEZCUVR0SlFVVmhMRmxCUVZrc1EwRkJReXhWUVVGclFpeEZRVUZGTEZGQlFXZENPenRaUVVNelJDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdG5Ra0ZETjBJc1QwRkJUeXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMkZCUTJoRE8xbEJSVVFzVDBGQlR5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRlZCUVZVc1EwRkJRenRwUWtGRE9VSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdhVUpCUTJwRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRlZCUVZVc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dHBRa0ZEYUVRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN2FVSkJRM1JETEVsQlFVa3NRMEZCUXl4RFFVRkRMRk5CUVdsQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5xUlN4RFFVRkRPMHRCUVVFN1EwRmpTanRCUVVWRUxFOUJRVThzUlVGQlF5eG5Ra0ZCWjBJc1JVRkJReXhEUVVGREluMD0iLCJjb25zdCBERUZBVUxUX1RJTUVPVVRfTVMgPSAxMDA7XHJcbmNvbnN0IERlZmF1bHRDb25maWcgPSB7XHJcbiAgICBpbnB1dDogW1wiLi8qKi8qLnRlc3QuanNcIl0sXHJcbiAgICBkZWJ1ZzogZmFsc2UsXHJcbiAgICBkZWJ1Z0JyZWFrOiBmYWxzZSxcclxuICAgIHdhdGNoOiBmYWxzZSxcclxuICAgIGNhY2hlRGlyOiBcIi51bWJyYS1jYWNoZVwiLFxyXG4gICAgdGltZW91dE1zOiB7XHJcbiAgICAgICAgaXQ6IERFRkFVTFRfVElNRU9VVF9NUyxcclxuICAgICAgICBiZWZvcmU6IERFRkFVTFRfVElNRU9VVF9NUyxcclxuICAgICAgICBiZWZvcmVFYWNoOiBERUZBVUxUX1RJTUVPVVRfTVMsXHJcbiAgICAgICAgYWZ0ZXI6IERFRkFVTFRfVElNRU9VVF9NUyxcclxuICAgICAgICBhZnRlckVhY2g6IERFRkFVTFRfVElNRU9VVF9NU1xyXG4gICAgfSxcclxuICAgIHJlcG9ydGluZzoge1xyXG4gICAgICAgIG91dHB1dFBhdGg6IHVuZGVmaW5lZCxcclxuICAgICAgICByZXBvcnRlcnM6IFtdXHJcbiAgICB9LFxyXG4gICAgcGFyYWxsZWw6IHtcclxuICAgICAgICBpZGVtcG90ZW50RmlsZXM6IGZhbHNlLFxyXG4gICAgICAgIGlkZW1wb3RlbnRUZXN0czogZmFsc2UsXHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydCB7IERlZmF1bHRDb25maWcgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUkdWbVlYVnNkRU52Ym1acFp5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5RGIyNW1hV2N2UkdWbVlYVnNkRU52Ym1acFp5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZGUVN4TlFVRk5MR3RDUVVGclFpeEhRVUZITEVkQlFVY3NRMEZCUXp0QlFVVXZRaXhOUVVGTkxHRkJRV0VzUjBGQlowSTdTVUZETDBJc1MwRkJTeXhGUVVGRkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1NVRkRla0lzUzBGQlN5eEZRVUZGTEV0QlFVczdTVUZEV2l4VlFVRlZMRVZCUVVVc1MwRkJTenRKUVVOcVFpeExRVUZMTEVWQlFVVXNTMEZCU3p0SlFVTmFMRkZCUVZFc1JVRkJSU3hqUVVGak8wbEJRM2hDTEZOQlFWTXNSVUZCUlR0UlFVTlFMRVZCUVVVc1JVRkJSU3hyUWtGQmEwSTdVVUZEZEVJc1RVRkJUU3hGUVVGRkxHdENRVUZyUWp0UlFVTXhRaXhWUVVGVkxFVkJRVVVzYTBKQlFXdENPMUZCUXpsQ0xFdEJRVXNzUlVGQlJTeHJRa0ZCYTBJN1VVRkRla0lzVTBGQlV5eEZRVUZGTEd0Q1FVRnJRanRMUVVOb1F6dEpRVU5FTEZOQlFWTXNSVUZCUlR0UlFVTlFMRlZCUVZVc1JVRkJSU3hUUVVGVE8xRkJRM0pDTEZOQlFWTXNSVUZCUlN4RlFVRkZPMHRCUTJoQ08wbEJRMFFzVVVGQlVTeEZRVUZGTzFGQlEwNHNaVUZCWlN4RlFVRkZMRXRCUVVzN1VVRkRkRUlzWlVGQlpTeEZRVUZGTEV0QlFVczdTMEZEZWtJN1EwRkRTaXhEUVVGRE8wRkJSVVlzVDBGQlR5eEZRVUZETEdGQlFXRXNSVUZCUXl4RFFVRkRJbjA9IiwiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5jbGFzcyBQYWNrYWdlSnNvbkNvbmZpZ0xvYWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZXF1aXJlUHJveHkgPSByZXF1aXJlKSB7XHJcbiAgICAgICAgdGhpcy5yZXF1aXJlUmVmID0gcmVxdWlyZVByb3h5O1xyXG4gICAgfVxyXG4gICAgbG9hZENvbmZpZygpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwYWNrYWdlSnNvbiA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIFwiLi9wYWNrYWdlLmpzb25cIikpO1xyXG4gICAgICAgICAgICByZXR1cm4gcGFja2FnZUpzb24udW1icmEgPyBwYWNrYWdlSnNvbi51bWJyYSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBBZGQgdmVyYm9zZSBsb2dnaW5nLlxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IHsgUGFja2FnZUpzb25Db25maWdMb2FkZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVUdGamEyRm5aVXB6YjI1RGIyNW1hV2RNYjJGa1pYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTl6Y21NdlEyOXVabWxuTDFCaFkydGhaMlZLYzI5dVEyOXVabWxuVEc5aFpHVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVThzUzBGQlN5eEpRVUZKTEUxQlFVMHNUVUZCVFN4RFFVRkRPMEZCUnpkQ0xFMUJRVTBzZFVKQlFYVkNPMGxCUjNwQ0xGbEJRVmtzV1VGQldTeEhRVUZITEU5QlFVODdVVUZET1VJc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eFpRVUZaTEVOQlFVTTdTVUZEYmtNc1EwRkJRenRKUVVWRUxGVkJRVlU3VVVGRFRpeEpRVUZKTzFsQlEwRXNUVUZCVFN4WFFVRlhMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNelJTeFBRVUZQTEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJRenRUUVVOMlJEdFJRVUZETEU5QlFVOHNTMEZCU3l4RlFVRkZPMWxCUTFvc05rSkJRVFpDTzFsQlF6ZENMRTlCUVU4c1NVRkJTU3hEUVVGRE8xTkJRMlk3U1VGRFRDeERRVUZETzBOQlEwbzdRVUZGUkN4UFFVRlBMRVZCUVVNc2RVSkJRWFZDTEVWQlFVTXNRMEZCUXlKOSIsImNsYXNzIENvbmZpZ01lcmdlciB7XHJcbiAgICAvKipcclxuICAgICAqIFN1cGVyIGJhc2ljIGhlbHBlciBtZXRob2QgZm9yIG1lcmdpbmcgY29uZmlndXJhdGlvbnMgdG9nZXRoZXIuIE92ZXJ3cml0ZXMgZWFybGllciBjb25maWdzIHdpdGggbGF0ZXIgb25lcywgd2l0aFxyXG4gICAgICogc3BlY2lhbCBoYW5kbGluZyBmb3IgdGltZW91dE1zLCB3aGljaCBjYW4gYmUgZWl0aGVyIGFuIG9iamVjdCBvciBhIHNpbmdsZSBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIG1lcmdlKGJhc2VDb25maWcsIC4uLmNvbmZpZ3MpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNvbmZpZyBvZiBjb25maWdzKSB7XHJcbiAgICAgICAgICAgIGlmICghY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBpbiBjb25maWcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW2F0dHJpYnV0ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSB1c2VyIGhhcyB0aGUgb3B0aW9uIHRvIHNldCBhIGdsb2JhbCB0aW1lb3V0IHZhbHVlLCByYXRoZXIgdGhhbiBzZXQgdGhlbSBpbmRpdmlkdWFsbHkuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gXCJ0aW1lb3V0TXNcIiAmJiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUNvbmZpZy50aW1lb3V0TXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdDogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaDogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlcjogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlckVhY2g6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlQ29uZmlnW2F0dHJpYnV0ZV0gPSBjb25maWdbYXR0cmlidXRlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJhc2VDb25maWc7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IHsgQ29uZmlnTWVyZ2VyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVEyOXVabWxuVFdWeVoyVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwwTnZibVpwWnk5RGIyNW1hV2ROWlhKblpYSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUlVFc1RVRkJUU3haUVVGWk8wbEJSV1E3T3p0UFFVZEhPMGxCUTBnc1MwRkJTeXhEUVVGRExGVkJRWFZDTEVWQlFVVXNSMEZCUnl4UFFVRjNRenRSUVVOMFJTeExRVUZMTEUxQlFVMHNUVUZCVFN4SlFVRkpMRTlCUVU4c1JVRkJSVHRaUVVNeFFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMmRDUVVOVUxGTkJRVk03WVVGRFdqdFpRVVZFTEV0QlFVc3NUVUZCVFN4VFFVRlRMRWxCUVVrc1RVRkJUU3hGUVVGRk8yZENRVU0xUWl4SlFVRkpMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zVTBGQlV5eERRVUZETEVWQlFVVTdiMEpCUTJ4RExFMUJRVTBzUzBGQlN5eEhRVUZKTEUxQlFXTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenR2UWtGRGVrTXNTVUZCU1N4TFFVRkxMRXRCUVVzc1UwRkJVeXhGUVVGRk8zZENRVU55UWl4VFFVRlRPM0ZDUVVOYU8yOUNRVVZFTERSR1FVRTBSanR2UWtGRE5VWXNTVUZCU1N4VFFVRlRMRXRCUVVzc1YwRkJWeXhKUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNSVUZCUlR0M1FrRkRlRVFzVlVGQlZTeERRVUZETEZOQlFWTXNSMEZCUnpzMFFrRkRia0lzUlVGQlJTeEZRVUZGTEV0QlFVczdORUpCUTFRc1RVRkJUU3hGUVVGRkxFdEJRVXM3TkVKQlEySXNWVUZCVlN4RlFVRkZMRXRCUVVzN05FSkJRMnBDTEV0QlFVc3NSVUZCUlN4TFFVRkxPelJDUVVOYUxGTkJRVk1zUlVGQlJTeExRVUZMTzNsQ1FVTnVRaXhEUVVGRE8zRkNRVU5NTzNsQ1FVRk5PM2RDUVVOR0xGVkJRV3RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVrc1RVRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzNGQ1FVTXZSRHRwUWtGRFNqdGhRVU5LTzFOQlEwbzdVVUZGUkN4UFFVRlBMRlZCUVZVc1EwRkJRenRKUVVOMFFpeERRVUZETzBOQlEwbzdRVUZGUkN4UFFVRlBMRVZCUVVNc1dVRkJXU3hGUVVGRExFTkJRVU1pZlE9PSIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuaW1wb3J0IHsgQ2xpQ29uZmlnUmVzb2x2ZXIgfSBmcm9tIFwiLi9DbGlDb25maWdSZXNvbHZlclwiO1xyXG5pbXBvcnQgeyBDb25maWdGaWxlTG9hZGVyIH0gZnJvbSBcIi4vQ29uZmlnRmlsZUxvYWRlclwiO1xyXG5pbXBvcnQgeyBEZWZhdWx0Q29uZmlnIH0gZnJvbSBcIi4vRGVmYXVsdENvbmZpZ1wiO1xyXG5pbXBvcnQgeyBQYWNrYWdlSnNvbkNvbmZpZ0xvYWRlciB9IGZyb20gXCIuL1BhY2thZ2VKc29uQ29uZmlnTG9hZGVyXCI7XHJcbmltcG9ydCB7IENvbmZpZ01lcmdlciB9IGZyb20gXCIuL0NvbmZpZ01lcmdlclwiO1xyXG5jb25zdCBERUZBVUxUX1RTX0NPTkZJRyA9IFwiLi91bWJyYS5jb25maWcudHNcIjtcclxuY29uc3QgREVGQVVMVF9KU19DT05GSUcgPSBcIi4vdW1icmEuY29uZmlnLmpzXCI7XHJcbmNsYXNzIENvbXBvc2l0ZUNvbmZpZ1Jlc29sdmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGFyZ1BhcnNlciA9IG5ldyBDbGlDb25maWdSZXNvbHZlcigpLCBjb25maWdGaWxlTG9hZGVyID0gbmV3IENvbmZpZ0ZpbGVMb2FkZXIoKSwgcGFja2FnZUpzb25Db25maWdMb2FkZXIgPSBuZXcgUGFja2FnZUpzb25Db25maWdMb2FkZXIoKSwgY29uZmlnTWVyZ2VyID0gbmV3IENvbmZpZ01lcmdlcigpKSB7XHJcbiAgICAgICAgdGhpcy5jbGlDb25maWdSZXNvbHZlciA9IGFyZ1BhcnNlcjtcclxuICAgICAgICB0aGlzLmNvbmZpZ0ZpbGVMb2FkZXIgPSBjb25maWdGaWxlTG9hZGVyO1xyXG4gICAgICAgIHRoaXMucGFja2FnZUpzb25Db25maWdMb2FkZXIgPSBwYWNrYWdlSnNvbkNvbmZpZ0xvYWRlcjtcclxuICAgICAgICB0aGlzLmNvbmZpZ01lcmdlciA9IGNvbmZpZ01lcmdlcjtcclxuICAgIH1cclxuICAgIHJlc29sdmUoYXJndikge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaUNvbmZpZyA9IHRoaXMuY2xpQ29uZmlnUmVzb2x2ZXIucGFyc2UoYXJndik7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb25maWcgPSB5aWVsZCB0aGlzLmdldEZpbGVDb25maWcoY2xpQ29uZmlnLmNvbmZpZ1BhdGgpO1xyXG4gICAgICAgICAgICBjb25zdCBwYWNrYWdlSnNvbkNvbmZpZyA9IHRoaXMucGFja2FnZUpzb25Db25maWdMb2FkZXIubG9hZENvbmZpZygpO1xyXG4gICAgICAgICAgICBpZiAoZmlsZUNvbmZpZyAmJiBwYWNrYWdlSnNvbkNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uZmlnIGV4aXN0cyB3aXRoaW4gYm90aCBwYWNrYWdlLmpzb24gYW5kIGFuIHVtYnJhLmNvbmZpZyBmaWxlLiBQbGVhc2UgcmVtb3ZlIG9uZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnTWVyZ2VyLm1lcmdlKERlZmF1bHRDb25maWcsIHBhY2thZ2VKc29uQ29uZmlnLCBmaWxlQ29uZmlnLCBjbGlDb25maWcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZ2V0RmlsZUNvbmZpZyhjbGlDb25maWdQYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgaWYgKGNsaUNvbmZpZ1BhdGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmNvbmZpZ0ZpbGVMb2FkZXIubG9hZENvbmZpZyhjbGlDb25maWdQYXRoLCBEZWZhdWx0Q29uZmlnLmNhY2hlRGlyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUeXBlU2NyaXB0IGlzIHByZWZlcnJlZCwgaWYgaXQgZXhpc3RzLlxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuY29uZmlnRmlsZUxvYWRlci5sb2FkQ29uZmlnKERFRkFVTFRfVFNfQ09ORklHLCBEZWZhdWx0Q29uZmlnLmNhY2hlRGlyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIC8vIEludGVudGlvbmFsbHkgYmxhbmsuIFRPRE86IEFkZCB2ZXJib3NlIGxvZ2dpbmcuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmNvbmZpZ0ZpbGVMb2FkZXIubG9hZENvbmZpZyhERUZBVUxUX0pTX0NPTkZJRywgRGVmYXVsdENvbmZpZy5jYWNoZURpcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbnRlbnRpb25hbGx5IGJsYW5rLiBUT0RPOiBBZGQgdmVyYm9zZSBsb2dnaW5nLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB7IENvbXBvc2l0ZUNvbmZpZ1Jlc29sdmVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVEyOXRjRzl6YVhSbFEyOXVabWxuVW1WemIyeDJaWEl1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZRMjl1Wm1sbkwwTnZiWEJ2YzJsMFpVTnZibVpwWjFKbGMyOXNkbVZ5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3p0QlFVRkJMRTlCUVU4c1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4TlFVRk5MSEZDUVVGeFFpeERRVUZETzBGQlEzaEVMRTlCUVU4c1JVRkJSU3huUWtGQlowSXNSVUZCUlN4TlFVRk5MRzlDUVVGdlFpeERRVUZETzBGQlEzUkVMRTlCUVU4c1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeHBRa0ZCYVVJc1EwRkJRenRCUVVWb1JDeFBRVUZQTEVWQlFVVXNkVUpCUVhWQ0xFVkJRVVVzVFVGQlRTd3lRa0ZCTWtJc1EwRkJRenRCUVVOd1JTeFBRVUZQTEVWQlFVVXNXVUZCV1N4RlFVRkZMRTFCUVUwc1owSkJRV2RDTEVOQlFVTTdRVUZIT1VNc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF6dEJRVU01UXl4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEcxQ1FVRnRRaXhEUVVGRE8wRkJSVGxETEUxQlFVMHNkVUpCUVhWQ08wbEJUM3BDTEZsQlFWa3NVMEZCVXl4SFFVRkhMRWxCUVVrc2FVSkJRV2xDTEVWQlFVVXNSVUZCUlN4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEdkQ1FVRm5RaXhGUVVGRkxFVkJRVVVzZFVKQlFYVkNMRWRCUVVjc1NVRkJTU3gxUWtGQmRVSXNSVUZCUlN4RlFVRkZMRmxCUVZrc1IwRkJSeXhKUVVGSkxGbEJRVmtzUlVGQlJUdFJRVU5zVEN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NVMEZCVXl4RFFVRkRPMUZCUTI1RExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhuUWtGQlowSXNRMEZCUXp0UlFVTjZReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRWRCUVVjc2RVSkJRWFZDTEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eFpRVUZaTEVOQlFVTTdTVUZEY2tNc1EwRkJRenRKUVVWTExFOUJRVThzUTBGQlF5eEpRVUZqT3p0WlFVTjRRaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMWxCUTNKRUxFMUJRVTBzVlVGQlZTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdXVUZEYkVVc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1dVRkZjRVVzU1VGQlNTeFZRVUZWTEVsQlFVa3NhVUpCUVdsQ0xFVkJRVVU3WjBKQlEycERMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zY1VaQlFYRkdMRU5CUVVNc1EwRkJRenRoUVVNeFJ6dFpRVVZFTEU5QlFVOHNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zWVVGQllTeEZRVUZGTEdsQ1FVRnBRaXhGUVVGRkxGVkJRVlVzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTTFSaXhEUVVGRE8wdEJRVUU3U1VGRllTeGhRVUZoTEVOQlFVTXNZVUZCY1VJN08xbEJRemRETEVsQlFVa3NZVUZCWVN4RlFVRkZPMmRDUVVObUxFOUJRVThzVFVGQlRTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeERRVUZETEdGQlFXRXNSVUZCUlN4aFFVRmhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03WVVGRGVFWTdXVUZGUkN4NVEwRkJlVU03V1VGRGVrTXNTVUZCU1R0blFrRkRRU3hQUVVGUExFMUJRVTBzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdZVUZETlVZN1dVRkJReXhQUVVGUExFdEJRVXNzUlVGQlJUdG5Ra0ZEV2l4clJFRkJhMFE3WVVGRGNrUTdXVUZGUkN4SlFVRkpPMmRDUVVOQkxFOUJRVThzVFVGQlRTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0aFFVTTFSanRaUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzJkQ1FVTmFMR3RFUVVGclJEdGhRVU55UkR0WlFVVkVMRTlCUVU4c1NVRkJTU3hEUVVGRE8xRkJRMmhDTEVOQlFVTTdTMEZCUVR0RFFVTktPMEZCUlVRc1QwRkJUeXhGUVVGRkxIVkNRVUYxUWl4RlFVRkZMRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkFzeW5jUHJvbWlzaWZpZXIgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBBIGNsYXNzIHRoYXQgbWFzc2FnZXMgc3luY2hyb25vdXMgYW5kIHNvbWUgYXN5bmMgZnVuY3Rpb25zIGludG8gcHJvbWlzZXMuIEV4cGVjdHMgdmVyeSBzcGVjaWZpYyBmdW5jdGlvbiBzaWduYXR1cmVzLlxyXG4gKi9cclxuY2xhc3MgQXN5bmNQcm9taXNpZmllciB7XHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGEgZnVuY3Rpb24gYW5kIGV4ZWN1dGVzIGl0IGFzIGEgUHJvbWlzZS5cclxuICAgICAqXHJcbiAgICAgKiBTdXBwb3J0czpcclxuICAgICAqICAtIFByb21pc2VzXHJcbiAgICAgKiAgLSBcImRvbmVcIiBjYWxsYmFja1xyXG4gICAgICogIC0gc3luYyByZXR1cm5zXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsoZG9uZSkgPT4gYW55fSBmblxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VD59XHJcbiAgICAgKi9cclxuICAgIGV4ZWMoZm4sIG5hbWUpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIFwibmFtZVwiLCB7IHZhbHVlOiBuYW1lLCB3cml0YWJsZTogZmFsc2UgfSk7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiAybmQgcGFyYW0gaXMgXCJkb25lXCIgLS0gaWYgdGhlIHVzZXIgZm4gaGFzIGV4YWN0bHkgdHdvIHBhcmFtcyB0aGVuIGl0IGlzIGV4cGVjdGVkIHRoYXQgdGhleSBhcmUgdXNpbmcgYVxyXG4gICAgICAgICAqIGNsYXNzaWMgYXN5bmNocm9ub3VzIGZ1bmN0aW9uIGFuZCB3aWxsIGNhbGwgXCJkb25lXCIgd2hlbiBjb21wbGV0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoZm4ubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZuKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Bc3luY1Byb21pc2lmaWVyID0gQXN5bmNQcm9taXNpZmllcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pUVhONWJtTlFjbTl0YVhOcFptbGxjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OUJjM2x1WXk5QmMzbHVZMUJ5YjIxcGMybG1hV1Z5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVmxCT3p0SFFVVkhPMEZCUTBnc1RVRkJUU3huUWtGQlowSTdTVUZGYkVJN096czdPenM3T3pzN1QwRlZSenRKUVVOSUxFbEJRVWtzUTBGQlNTeEZRVUV5UkN4RlFVRkZMRWxCUVZrN1VVRkZOMFVzVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU53UlRzN08xZEJSMGM3VVVGRFNDeEpRVUZKTEVWQlFVVXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8xbEJRMnBDTEU5QlFVOHNTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEVWQlFVVTdaMEpCUTJZc1JVRkJSeXhEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVTdiMEpCUXk5Q0xFbEJRVWtzVFVGQlRTeFpRVUZaTEV0QlFVc3NSVUZCUlR0M1FrRkRla0lzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPM0ZDUVVOc1FqdDVRa0ZCVFR0M1FrRkRTQ3hQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdjVUpCUTI1Q08yZENRVU5NTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTFBc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRFRqdGhRVUZOTzFsQlEwZ3NTVUZCU1R0blFrRkRRU3hQUVVGUExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFXOUNMRVZCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03WVVGRGNFUTdXVUZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRuUWtGRFVpeFBRVUZQTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRE5VSTdVMEZEU2p0SlFVTk1MRU5CUVVNN1EwRkRTanRCUVVWUkxEUkRRVUZuUWlKOSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVGltZW91dFByb21pc2lmaWVyID0gZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBlcnJvciB0eXBlIGZvciBkaWZmZXJlbnRpYXRpbmcgdGltZW91dHMgZnJvbSBvdGhlciBwcm9taXNlIGZhaWx1cmVzLlxyXG4gKi9cclxuY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZWxhcHNlZE1zLCB0aW1lb3V0TXMpIHtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLnRpbWVvdXRNcyA9IHRpbWVvdXRNcztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRpbWVvdXRFcnJvciA9IFRpbWVvdXRFcnJvcjtcclxuLyoqXHJcbiAqIEEgc2ltcGxlIHByb21pc2Ugd3JhcHBlciwgd2hpY2ggZW5hYmxlcyBwcm9taXNlcyB0byBcInRpbWVvdXRcIi4gSXQgZG9lcyAqTk9UKiBhY3R1YWxseSBtYW5pcHVsYXRlIG9yIG90aGVyd2lzZVxyXG4gKiBpbnRlcnJ1cHQgbG9uZy1ydW5uaW5nIHRhc2tzLCBidXQgcmF0aGVyIHNpbXBseSBpZ25vcmVzIHRoZWlyIHJlc3VsdCBpZiB0aGV5IGV2ZW50dWFsbHkgZG8gY29tcGxldGUuXHJcbiAqL1xyXG5jbGFzcyBUaW1lb3V0UHJvbWlzaWZpZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBXcmFwcyB0aGUgUHJvbWlzZSBpbiBhbm90aGVyIFByb21pc2UsIHdoaWNoIHdpbGwgcmVzb2x2ZS9yZWplY3QgYmFzZWQgb24gdGhlIGZvcm1lciwgb3IgaWYgYSBnaXZlbiBhbW91bnQgb2YgdGltZVxyXG4gICAgICogaGFzIHBhc3NlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcHJvbWlzZVxyXG4gICAgICogQHBhcmFtIHRpbWVvdXRNc1xyXG4gICAgICogQHJldHVybiBBIG5ldyBwcm9taXNlLCB3aGljaCB3aWxsIHJlc29sdmUgaWYgdGhlIGdpdmVuIHByb21pc2UgcmVzb2x2ZXMsIG9yIHJlamVjdCBpZiB0aGUgdGltZW91dCBvY2N1cnMgZmlyc3QuXHJcbiAgICAgKi9cclxuICAgIHdyYXAocHJvbWlzZSwgdGltZW91dE1zKSB7XHJcbiAgICAgICAgaWYgKHRpbWVvdXRNcyA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGxldCB0aW1lcklkID0gbnVsbDtcclxuICAgICAgICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxhcHNlZE1zID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgVGltZW91dEVycm9yKGBBc3luYyB0YXNrIHRpbWVvdXQgZXhjZWVkZWQhIEVsYXBzZWQ6ICR7ZWxhcHNlZE1zfSwgdGltZW91dDogJHt0aW1lb3V0TXN9bXMuYCwgZWxhcHNlZE1zLCB0aW1lb3V0TXMpKTtcclxuICAgICAgICAgICAgfSwgdGltZW91dE1zKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBwcm9taXNlLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHRpbWVvdXRQcm9taXNlIHdpbGwgbmV2ZXIgcmVzb2x2ZSwgdGh1cyB3ZSBjYW4gc2FmZWx5IGFzc3VtZSB0aGF0IHRoZSByZXN1bHQgaXMgdGhlIG9yaWdpbmFsIG9uZS5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtwcm9taXNlLCB0aW1lb3V0UHJvbWlzZV0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UaW1lb3V0UHJvbWlzaWZpZXIgPSBUaW1lb3V0UHJvbWlzaWZpZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVZHbHRaVzkxZEZCeWIyMXBjMmxtYVdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDBGemVXNWpMMVJwYldWdmRYUlFjbTl0YVhOcFptbGxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRVHM3UjBGRlJ6dEJRVU5JTEUxQlFVMHNXVUZCWVN4VFFVRlJMRXRCUVVzN1NVRkpOVUlzV1VGQldTeFBRVUZsTEVWQlFVVXNVMEZCYVVJc1JVRkJSU3hUUVVGcFFqdFJRVU0zUkN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VVVGRFppeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJRenRKUVVNdlFpeERRVUZETzBOQlEwbzdRVUV5UTA4c2IwTkJRVms3UVVGNlEzQkNPenM3UjBGSFJ6dEJRVU5JTEUxQlFVMHNhMEpCUVd0Q08wbEJSWEJDT3pzN096czdPMDlCVDBjN1NVRkRTQ3hKUVVGSkxFTkJRVWtzVDBGQmJVSXNSVUZCUlN4VFFVRnBRanRSUVVNeFF5eEpRVUZKTEZOQlFWTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1dVRkRhRUlzVDBGQlR5eFBRVUZQTEVOQlFVTTdVMEZEYkVJN1VVRkZSQ3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkROMElzU1VGQlNTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTI1Q0xFMUJRVTBzWTBGQll5eEhRVUZITEVsQlFVa3NUMEZCVHl4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEZRVUZGTzFsQlEyNUVMRTlCUVU4c1IwRkJSeXhWUVVGVkxFTkJRVU1zUjBGQlJ5eEZRVUZGTzJkQ1FVTjBRaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1UwRkJVeXhEUVVGRE8yZENRVU42UXl4TlFVRk5MRU5CUVVNc1NVRkJTU3haUVVGWkxFTkJRVU1zZVVOQlFYbERMRk5CUVZNc1kwRkJZeXhUUVVGVExFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOdVNTeERRVUZETEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRiRUlzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUlVGQlJUdFpRVU5tTEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVNeFFpeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVVklMRzlIUVVGdlJ6dFJRVU53Unl4UFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZsTEVWQlFVVXNSVUZCUlR0WlFVTndSU3haUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdXVUZEZEVJc1QwRkJUeXhOUVVGWExFTkJRVU03VVVGRGRrSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRE8wTkJSVW83UVVGRmNVSXNaMFJCUVd0Q0luMD0iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLm1lcmdlQ29uZmlnID0gdm9pZCAwO1xyXG4vKipcclxuICogQSBoZWxwZXIgbWV0aG9kIHRvIG1lcmdlIG11bHRpcGxlIHNvdXJjZXMgb2YgY29uZmlndXJhdGlvbi5cclxuICpcclxuICogQHBhcmFtIHRvIC0gVGhlIGJhc2UgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gYmUgbWVyZ2VkIGludG8uXHJcbiAqIEBwYXJhbSBmcm9tIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIG1lcmdlIGZyb20uXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZUNvbmZpZyh0bywgZnJvbSkge1xyXG4gICAgaWYgKCFmcm9tIHx8IHR5cGVvZiBmcm9tICE9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB0by50aW1lb3V0TXMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGZyb20udGltZW91dE1zID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeVR5cGUgb2YgW1wiaXRcIiwgXCJiZWZvcmVcIiwgXCJiZWZvcmVFYWNoXCIsIFwiYWZ0ZXJcIiwgXCJhZnRlckVhY2hcIl0pIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmcm9tLnRpbWVvdXRNc1tlbnRyeVR5cGVdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICB0by50aW1lb3V0TXNbZW50cnlUeXBlXSA9IGZyb20udGltZW91dE1zW2VudHJ5VHlwZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZnJvbS50aW1lb3V0TXMgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICB0by50aW1lb3V0TXMgPSBmcm9tLnRpbWVvdXRNcztcclxuICAgIH1cclxuICAgIGlmICh0by5zdG9wT25GaXJzdEZhaWwgIT09IGZyb20uc3RvcE9uRmlyc3RGYWlsKSB7XHJcbiAgICAgICAgdG8uc3RvcE9uRmlyc3RGYWlsID0gZnJvbS5zdG9wT25GaXJzdEZhaWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG87XHJcbn1cclxuZXhwb3J0cy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lWR1Z6ZEZKMWJtNWxja052Ym1acFp5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5RGIyNW1hV2N2VkdWemRGSjFibTVsY2tOdmJtWnBaeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRTRRa0U3T3pzN08wZEJTMGM3UVVGRFNDeFRRVUZUTEZkQlFWY3NRMEZCUXl4RlFVRnZRaXhGUVVGRkxFbEJRV2RETzBsQlEzWkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFbEJRVWtzVDBGQlR5eEpRVUZKTEV0QlFVc3NVVUZCVVN4RlFVRkZPMUZCUTI1RExFOUJRVThzUlVGQlJTeERRVUZETzB0QlEySTdTVUZGUkN4SlFVRkpMRTlCUVU4c1JVRkJSU3hEUVVGRExGTkJRVk1zUzBGQlN5eFJRVUZSTEVsQlFVa3NUMEZCVHl4SlFVRkpMRU5CUVVNc1UwRkJVeXhMUVVGTExGRkJRVkVzUlVGQlJUdFJRVU40UlN4TFFVRkxMRTFCUVUwc1UwRkJVeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4WlFVRlpMRVZCUVVVc1QwRkJUeXhGUVVGRkxGZEJRVmNzUTBGQlF5eEZRVUZGTzFsQlF6RkZMRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4TFFVRkxMRkZCUVZFc1JVRkJSVHRuUWtGREwwTXNSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8yRkJRM1pFTzFOQlEwbzdTMEZEU2p0VFFVRk5MRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eExRVUZMTEZkQlFWY3NSVUZCUlR0UlFVTTVReXhGUVVGRkxFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1MwRkRha003U1VGRlJDeEpRVUZKTEVWQlFVVXNRMEZCUXl4bFFVRmxMRXRCUVVzc1NVRkJTU3hEUVVGRExHVkJRV1VzUlVGQlJUdFJRVU0zUXl4RlFVRkZMRU5CUVVNc1pVRkJaU3hIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTTdTMEZETjBNN1NVRkZSQ3hQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU5rTEVOQlFVTTdRVUZGZDBNc2EwTkJRVmNpZlE9PSIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRGVmYXVsdFRlc3RSdW5uZXJDb25maWcgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBEZWZhdWx0IGNvbmZpZ3VyYXRpb24gdG8gYmUgdXNlZCBpZiB0aGUgdXNlciBkb2VzIG5vdCBleHBsaWNpdGx5IHNldCBjb25maWd1cmF0aW9uLlxyXG4gKi9cclxuY29uc3QgRGVmYXVsdFRlc3RSdW5uZXJDb25maWcgPSB7XHJcbiAgICB0aW1lb3V0TXM6IDEwMCxcclxuICAgIHN0b3BPbkZpcnN0RmFpbDogZmFsc2VcclxufTtcclxuZXhwb3J0cy5EZWZhdWx0VGVzdFJ1bm5lckNvbmZpZyA9IERlZmF1bHRUZXN0UnVubmVyQ29uZmlnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lSR1ZtWVhWc2RGUmxjM1JTZFc1dVpYSkRiMjVtYVdjdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12UTI5dVptbG5MMFJsWm1GMWJIUlVaWE4wVW5WdWJtVnlRMjl1Wm1sbkxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVWQk96dEhRVVZITzBGQlEwZ3NUVUZCVFN4MVFrRkJkVUlzUjBGQmNVSTdTVUZET1VNc1UwRkJVeXhGUVVGRkxFZEJRVWM3U1VGRFpDeGxRVUZsTEVWQlFVVXNTMEZCU3p0RFFVTjZRaXhEUVVGRE8wRkJSVTBzTUVSQlFYVkNJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy53aXRob3V0ID0gZXhwb3J0cy51bmlvbiA9IGV4cG9ydHMuU2ltcGxlRXZlbnRFbWl0dGVyID0gdm9pZCAwO1xyXG4vKipcclxuICogU2ltcGxlIGFycmF5IHVuaW9uIHdpdGggYXV0b21hdGljIGNyZWF0aW9uIGlmIHRoZSBhcnJheXMgZG9uJ3QgZXhpc3QuIFRoaXMgaXMgYSBuaWNlIG9wdGltaXphdGlvbiB3aGljaFxyXG4gKiBlbmFibGVzIHRoZSBldmVudCBlbWl0dGVyIHRvIGxhenktaW5zdGFudGlhdGUgZXZlbnQgY2FsbGJhY2sgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlBXHJcbiAqIEBwYXJhbSBhcnJheUJcclxuICogQHJldHVybiBhcnJheUEsIG1vZGlmaWVkIHRvIGluY2x1ZGUgYWxsIGl0ZW1zIGZyb20gYXJyYXlCIHRoYXQgd2VyZW4ndCBhbHJlYWR5IGluIGFycmF5QS4gSWYgYXJyYXlBIGRvZXNuJ3QgZXhpc3QsXHJcbiAqICAgICAgICAgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiB1bmlvbihhcnJheUEsIGFycmF5Qikge1xyXG4gICAgaWYgKCFhcnJheUEpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXlCID8gYXJyYXlCIDogW107XHJcbiAgICB9XHJcbiAgICBpZiAoIWFycmF5Qikge1xyXG4gICAgICAgIHJldHVybiBhcnJheUE7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXlCKSB7XHJcbiAgICAgICAgaWYgKGFycmF5QS5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xyXG4gICAgICAgICAgICBhcnJheUEucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXlBO1xyXG59XHJcbmV4cG9ydHMudW5pb24gPSB1bmlvbjtcclxuLyoqXHJcbiAqIFNpbXBsZSBhcnJheSBpdGVtIHJlbW92YWwgd2l0aCBhdXRvbWF0aWMgY3JlYXRpb24gaWYgdGhlIGFycmF5IGRvZXNuJ3QgZXhpc3QuIFRoaXMgaXMgYSBuaWNlIG9wdGltaXphdGlvbiB3aGljaFxyXG4gKiBlbmFibGVzIHRoZSBldmVudCBlbWl0dGVyIHRvIGxhenktaW5zdGFudGlhdGUgZXZlbnQgY2FsbGJhY2sgYXJyYXlzLlxyXG4gKlxyXG4gKiBET0VTIE5PVCBSRU1PVkUgRFVQTElDQVRFIFZBTFVFUyFcclxuICpcclxuICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5IGZyb20gd2hpY2ggdG8gcmVtb3ZlIGFuIGl0ZW0uXHJcbiAqIEBwYXJhbSBpdGVtIC0gVGhlIGl0ZW0gdG8gcmVtb3ZlIGZyb20gdGhlIGdpdmVuIGFycmF5LlxyXG4gKiBAcmV0dXJuIFRoZSBvcmlnaW5hbCBhcnJheSwgbW9kaWZpZWQgdG8gcmVtb3ZlIHRoZSBpdGVtIGlmIGl0IGV4aXN0ZWQuIElmIHRoZSBhcnJheSBkb2Vzbid0IGV4aXN0LCBhbiBlbXB0eSBhcnJheVxyXG4gKiAgICAgICAgIGlzIHJldHVybmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gd2l0aG91dChhcnJheSwgaXRlbSkge1xyXG4gICAgaWYgKCFhcnJheSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIGNvbnN0IGluZGV4T2ZJdGVtID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcclxuICAgIGlmIChpbmRleE9mSXRlbSAhPT0gLTEpIHtcclxuICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXhPZkl0ZW0sIDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcbmV4cG9ydHMud2l0aG91dCA9IHdpdGhvdXQ7XHJcbi8qKlxyXG4gKiBBIHJpZGljdWxvdXNseSBzaW1wbGUgZXZlbnQgZW1pdHRlciB3aXRoIHR5cGVzYWZldHkuXHJcbiAqXHJcbiAqIFRPRE86IE1heWJlIG9wZW5zb3VyY2UgdGhpcyB1bmRlciBpdHMgb3duIHBhY2thZ2UgaW4gdGhlIGZ1dHVyZS5cclxuICovXHJcbmNsYXNzIFNpbXBsZUV2ZW50RW1pdHRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBBbGwgZXZlbnQgYXJyYXlzIGFyZSBkeW5hbWljYWxseSBmaWxsZWQgd2hlbiBjYWxsaW5nIG9uL29uYy5cclxuICAgICAgICB0aGlzLm9uTGlzdGVuZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzID0ge307XHJcbiAgICB9XHJcbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcclxuICAgICAgICAodGhpcy5vbkxpc3RlbmVyc1tldmVudF0pID0gdW5pb24odGhpcy5vbkxpc3RlbmVyc1tldmVudF0sIFtjYWxsYmFja10pO1xyXG4gICAgfVxyXG4gICAgb25jZShldmVudCwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdID0gdW5pb24odGhpcy5vbmNlTGlzdGVuZXJzW2V2ZW50XSwgW2NhbGxiYWNrXSk7XHJcbiAgICB9XHJcbiAgICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5vbkxpc3RlbmVyc1tldmVudF0gPSB3aXRob3V0KHRoaXMub25MaXN0ZW5lcnNbZXZlbnRdLCBjYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzW2V2ZW50XSA9IHdpdGhvdXQodGhpcy5vbmNlTGlzdGVuZXJzW2V2ZW50XSwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZW1pdChldmVudCwgLi4uYXJncykge1xyXG4gICAgICAgIGlmICh0aGlzLm9uTGlzdGVuZXJzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHRoaXMub25MaXN0ZW5lcnNbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdICYmIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwobnVsbCwgLi4uYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vbmNlTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXZhbHVhdGVzIGVhY2ggZnVuY3Rpb24gc3luY2hyb25vdXNseSwgYnV0IHdhaXRzIGZvciBhbGwgdG8gYXN5bmNocm9ub3VzbHkgY29tcGxldGUgYmVmb3JlIHJldHVybmluZy5cclxuICAgICAqXHJcbiAgICAgKiBUT0RPOiBGaW5kIGEgYmV0dGVyIG5hbWUgZm9yIHRoaXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRvIGVtaXQuXHJcbiAgICAgKiBAcGFyYW0gYXJncyAtIEFsbCBhcmdzIHRvIGJlIGVtaXR0ZWQgZm9yIHRoZSBldmVudC5cclxuICAgICAqL1xyXG4gICAgZW1pdEFuZFdhaXRGb3JDb21wbGV0aW9uKGV2ZW50LCAuLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5vbkxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiB0aGlzLm9uTGlzdGVuZXJzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UucmVzb2x2ZShjYWxsYmFjay5jYWxsKG51bGwsIC4uLmFyZ3MpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goUHJvbWlzZS5yZWplY3QoZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdICYmIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIHRoaXMub25jZUxpc3RlbmVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChQcm9taXNlLnJlc29sdmUoY2FsbGJhY2suY2FsbChudWxsLCAuLi5hcmdzKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UucmVqZWN0KGUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9uY2VMaXN0ZW5lcnNbZXZlbnRdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICAvLyBJbnRlbnRpb25hbGx5IGJsYW5rLCBhcyB3ZSB3YW50IHRvIHN3YWxsb3cgYWxsIGFjdHVhbCBcInZhbGlkXCIgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TaW1wbGVFdmVudEVtaXR0ZXIgPSBTaW1wbGVFdmVudEVtaXR0ZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVUybHRjR3hsUlhabGJuUkZiV2wwZEdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDBWMlpXNTBSVzFwZEhSbGNpOVRhVzF3YkdWRmRtVnVkRVZ0YVhSMFpYSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlIwRTdPenM3T3pzN08wZEJVVWM3UVVGRFNDeFRRVUZUTEV0QlFVc3NRMEZCU1N4TlFVRlhMRVZCUVVVc1RVRkJWenRKUVVOMFF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMUZCUTFRc1QwRkJUeXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRE8wdEJReTlDTzBsQlJVUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVOVUxFOUJRVThzVFVGQlRTeERRVUZETzB0QlEycENPMGxCUlVRc1MwRkJTeXhOUVVGTkxFbEJRVWtzU1VGQlNTeE5RVUZOTEVWQlFVVTdVVUZEZGtJc1NVRkJTU3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRk8xbEJRemRDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VTBGRGNrSTdTMEZEU2p0SlFVVkVMRTlCUVU4c1RVRkJUU3hEUVVGRE8wRkJRMnhDTEVOQlFVTTdRVUY1UjNGRUxITkNRVUZMTzBGQmRrY3pSRHM3T3pzN096czdPenRIUVZWSE8wRkJRMGdzVTBGQlV5eFBRVUZQTEVOQlFVa3NTMEZCVlN4RlFVRkZMRWxCUVU4N1NVRkRia01zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0UlFVTlNMRTlCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMkk3U1VGRlJDeE5RVUZOTEZkQlFWY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEzaERMRWxCUVVrc1YwRkJWeXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTzFGQlEzQkNMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUTJoRE8wbEJSVVFzVDBGQlR5eExRVUZMTEVOQlFVTTdRVUZEYWtJc1EwRkJRenRCUVdsR05FUXNNRUpCUVU4N1FVRXZSWEJGT3pzN08wZEJTVWM3UVVGRFNDeE5RVUZOTEd0Q1FVRnJRanRKUVVGNFFqdFJRVVZKTEN0RVFVRXJSRHRSUVVNNVF5eG5Ra0ZCVnl4SFFVRnhSU3hGUVVGRkxFTkJRVU03VVVGRGJrWXNhMEpCUVdFc1IwRkJjVVVzUlVGQlJTeERRVUZETzBsQmIwVXhSeXhEUVVGRE8wbEJiRVZITEVWQlFVVXNRMEZCSzBJc1MwRkJXU3hGUVVGRkxGRkJRWGRETzFGQlEyNUdMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU16UlN4RFFVRkRPMGxCUlVRc1NVRkJTU3hEUVVFclFpeExRVUZaTEVWQlFVVXNVVUZCZDBNN1VVRkRja1lzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZETjBVc1EwRkJRenRKUVVWRUxFZEJRVWNzUTBGQkswSXNTMEZCV1N4RlFVRkZMRkZCUVhkRE8xRkJRM0JHTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdVVUZEY2tVc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVNM1JTeERRVUZETzBsQlJVUXNTVUZCU1N4RFFVRXJRaXhMUVVGWkxFVkJRVVVzUjBGQlJ5eEpRVUZuUXp0UlFVTm9SaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkRla0lzUzBGQlN5eE5RVUZOTEZGQlFWRXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzJkQ1FVTXpReXhSUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dGhRVU42UXp0VFFVTktPMUZCUlVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSVHRaUVVOdVJTeExRVUZMTEUxQlFVMHNVVUZCVVN4SlFVRkpMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdaMEpCUXpkRExGRkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETzJGQlEzcERPMWxCUlVRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1UwRkRiRU03U1VGRFRDeERRVUZETzBsQlJVUTdPenM3T3pzN1QwRlBSenRKUVVOSUxIZENRVUYzUWl4RFFVRXJRaXhMUVVGWkxFVkJRVVVzUjBGQlJ5eEpRVUZuUXp0UlFVTndSeXhOUVVGTkxGRkJRVkVzUjBGQmIwSXNSVUZCUlN4RFFVRkRPMUZCUTNKRExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSVHRaUVVONlFpeExRVUZMTEUxQlFVMHNVVUZCVVN4SlFVRkpMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdaMEpCUXpWRExFbEJRVWs3YjBKQlEwRXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZGTEZGQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRwUWtGRGVrVTdaMEpCUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3YjBKQlExSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2FVSkJRM0JETzJGQlEwbzdVMEZEU2p0UlFVVkVMRWxCUVVrc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVN1dVRkRia1VzUzBGQlN5eE5RVUZOTEZGQlFWRXNTVUZCU1N4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzJkQ1FVTTVReXhKUVVGSk8yOUNRVU5CTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlJTeFJRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2FVSkJRM3BGTzJkQ1FVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8yOUNRVU5TTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmxDUVVOd1F6dGhRVU5LTzFsQlJVUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVMEZEYkVNN1VVRkZSQ3hQUVVGUExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVTdXVUZETVVNc2QwVkJRWGRGTzFsQlEzaEZMRTlCUVU4N1VVRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5RTEVOQlFVTTdRMEZEU2p0QlFVVnBReXhuUkVGQmEwSWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5RdWV1ZVN0YWNrID0gdm9pZCAwO1xyXG4vKipcclxuICogQSB2ZXJ5IGNyZWF0aXZlbHkgbmFtZWQgUXVldWUgb2YgU3RhY2tzLCB3aXRoIHNvbWUgc2ltcGxlIGhlbHBlciBtZXRob2RzIGZvciBvcGVyYXRpbmcgb24gdGhlbS5cclxuICovXHJcbmNsYXNzIFF1ZXVlU3RhY2sge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQdXNoZXMgdGhlIGdpdmVuIGVsZW1lbnQgb250byB0aGUgZW5kIG9mIHRoZSB0b3Agc3RhY2ssIG9uIHRoZSB0b3AgcXVldWUuXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwdXNoT25Ub3AoZWxlbWVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLnB1c2goW2VsZW1lbnRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWVbMF0ucHVzaChlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFB1c2hlcyBhIG5ldyBzdGFjayBvbnRvIHRoZSBlbmQgb2YgdGhlIHF1ZXVlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzdGFja1xyXG4gICAgICovXHJcbiAgICBwdXNoU3RhY2soc3RhY2spIHtcclxuICAgICAgICB0aGlzLnF1ZXVlLnB1c2goc3RhY2spO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSBsYXN0IHN0YWNrIGZyb20gdGhlIHF1ZXVlIGFuZCByZXR1cm5zIGl0LlxyXG4gICAgICovXHJcbiAgICBwb3BTdGFjaygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZS5wb3AoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyB0aGUgZmlyc3Qgc3RhY2sgZnJvbSB0aGUgcXVldWUgYW5kIHJldHVybnMgaXQuXHJcbiAgICAgKi9cclxuICAgIHNoaWZ0U3RhY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUuc2hpZnQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhdmVyc2VzIHRoZSBxdWV1ZSBzdGFjaywgc3RhcnRpbmcgYXQgdGhlIHRvcCwgZmlyc3QgZWxlbWVudCBhbmQgcHJvY2VlZGluZyBkb3duIGxldmVsIGJ5IGxldmVsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICB0cmF2ZXJzZUxldmVsT3JkZXIoY2FsbGJhY2spIHtcclxuICAgICAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5xdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBxdWV1ZSA9IHRoaXMucXVldWVbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcXVldWUubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oKCkgPT4gY2FsbGJhY2socXVldWVbal0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhdmVyc2VzIHRoZSBxdWV1ZSBzdGFjaywgc3RhcnRpbmcgYXQgdGhlIGJvdHRvbSwgbGFzdCBlbGVtZW50IGFuZCBwcm9jZWVkaW5nIHVwIGxldmVsIGJ5IGxldmVsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICB0cmF2ZXJzZUludmVyc2VMZXZlbE9yZGVyKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5xdWV1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBjb25zdCBxdWV1ZSA9IHRoaXMucXVldWVbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSBxdWV1ZS5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbigoKSA9PiBjYWxsYmFjayhxdWV1ZVtqXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNldHMgdGhlIHN0YWNrLCByZW1vdmluZyBhbGwgcHJldmlvdXNseSBwdXNoZWQgcXVldWVzIGFuZCBlbGVtZW50cy5cclxuICAgICAqL1xyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUXVldWVTdGFjayA9IFF1ZXVlU3RhY2s7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVVYVmxkV1ZUZEdGamF5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlSZFdWMVpWTjBZV05yTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVUZCT3p0SFFVVkhPMEZCUTBnc1RVRkJUU3hWUVVGVk8wbEJRV2hDTzFGQlJWa3NWVUZCU3l4SFFVRlZMRVZCUVVVc1EwRkJRenRKUVRaRk9VSXNRMEZCUXp0SlFUTkZSenM3TzA5QlIwYzdTVUZEU0N4VFFVRlRMRU5CUVVNc1QwRkJWVHRSUVVOb1FpeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hMUVVGTExFTkJRVU1zUlVGQlJUdFpRVU42UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRPVUk3WVVGQlRUdFpRVU5JTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMU5CUXk5Q08wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeFRRVUZUTEVOQlFVTXNTMEZCVlR0UlFVTm9RaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVNelFpeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hSUVVGUk8xRkJRMG9zVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRelZDTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGVkJRVlU3VVVGRFRpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03U1VGRE9VSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4clFrRkJhMElzUTBGQlF5eFJRVUYxUXp0UlFVTjBSQ3hKUVVGSkxFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1VVRkRhRU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRM2hETEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETlVJc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdaMEpCUTI1RExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRM0JFTzFOQlEwbzdVVUZGUkN4UFFVRlBMRTlCUVU4c1EwRkJRenRKUVVOdVFpeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTEhsQ1FVRjVRaXhEUVVGRExGRkJRVGhDTzFGQlEzQkVMRWxCUVVrc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0UlFVTm9ReXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRemRETEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETlVJc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMmRDUVVONFF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dGhRVU53UkR0VFFVTktPMUZCUlVRc1QwRkJUeXhQUVVGUExFTkJRVU03U1VGRGJrSXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzUzBGQlN6dFJRVU5FTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRM0JDTEVOQlFVTTdRMEZEU2p0QlFVVlBMR2REUVVGVkluMD0iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuVGVzdFJ1bm5lciA9IHZvaWQgMDtcclxuY29uc3QgQXN5bmNQcm9taXNpZmllcl8xID0gcmVxdWlyZShcIi4vQXN5bmMvQXN5bmNQcm9taXNpZmllclwiKTtcclxuY29uc3QgVGltZW91dFByb21pc2lmaWVyXzEgPSByZXF1aXJlKFwiLi9Bc3luYy9UaW1lb3V0UHJvbWlzaWZpZXJcIik7XHJcbmNvbnN0IFRlc3RSdW5uZXJDb25maWdfMSA9IHJlcXVpcmUoXCIuL0NvbmZpZy9UZXN0UnVubmVyQ29uZmlnXCIpO1xyXG5jb25zdCBEZWZhdWx0VGVzdFJ1bm5lckNvbmZpZ18xID0gcmVxdWlyZShcIi4vQ29uZmlnL0RlZmF1bHRUZXN0UnVubmVyQ29uZmlnXCIpO1xyXG5jb25zdCBTaW1wbGVFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuL0V2ZW50RW1pdHRlci9TaW1wbGVFdmVudEVtaXR0ZXJcIik7XHJcbmNvbnN0IFF1ZXVlU3RhY2tfMSA9IHJlcXVpcmUoXCIuL1F1ZXVlU3RhY2tcIik7XHJcbmNvbnN0IFF1ZXVlU3RhY2tUeXBlcyA9IFtcImJlZm9yZVwiLCBcImJlZm9yZUVhY2hcIiwgXCJhZnRlclwiLCBcImFmdGVyRWFjaFwiXTtcclxuLyoqXHJcbiAqIGJlZm9yZSAtPiBiZWZvcmVFYWNoIC0+IGJlZm9yZUhvb2sgLT4gaXQgLT4gYWZ0ZXJIb29rIC0+IGFmdGVyRWFjaCAtPiBhZnRlclxyXG4gKi9cclxuY2xhc3MgVGVzdFJ1bm5lciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIGV2ZW50RW1pdHRlciA9IG5ldyBTaW1wbGVFdmVudEVtaXR0ZXJfMS5TaW1wbGVFdmVudEVtaXR0ZXIoKSkge1xyXG4gICAgICAgIHRoaXMuYXN5bmNQcm9taXNpZmllciA9IG5ldyBBc3luY1Byb21pc2lmaWVyXzEuQXN5bmNQcm9taXNpZmllcigpO1xyXG4gICAgICAgIHRoaXMudGltZW91dFByb21pc2lmaWVyID0gbmV3IFRpbWVvdXRQcm9taXNpZmllcl8xLlRpbWVvdXRQcm9taXNpZmllcigpO1xyXG4gICAgICAgIHRoaXMudGVzdFF1ZXVlU3RhY2sgPSBbXTtcclxuICAgICAgICB0aGlzLnF1ZXVlU3RhY2tzID0ge1xyXG4gICAgICAgICAgICBcImJlZm9yZVwiOiBuZXcgUXVldWVTdGFja18xLlF1ZXVlU3RhY2soKSxcclxuICAgICAgICAgICAgXCJiZWZvcmVFYWNoXCI6IG5ldyBRdWV1ZVN0YWNrXzEuUXVldWVTdGFjaygpLFxyXG4gICAgICAgICAgICBcImFmdGVyXCI6IG5ldyBRdWV1ZVN0YWNrXzEuUXVldWVTdGFjaygpLFxyXG4gICAgICAgICAgICBcImFmdGVyRWFjaFwiOiBuZXcgUXVldWVTdGFja18xLlF1ZXVlU3RhY2soKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VGVzdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50ZXN0UnVuQ2FuY2VsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gVGhpcyBtYWRuZXNzIGlzIG5lZWRlZCB0byBzdXBwb3J0IGZ1bmN0aW9uL29iamVjdCBoeWJyaWRzLCB3aGljaCBpcyByZW1hcmthYmx5IHVzZWZ1bCBidXQgb2Jub3hpb3VzIGluIFRTLlxyXG4gICAgICAgIHRoaXMuZGVzY3JpYmUgPSAoKHRpdGxlLCBleGVjQmxvY2spID0+IHtcclxuICAgICAgICAgICAgdGhpcy50aHJvd0lmVGVzdEluUHJvZ3Jlc3MoXCJkZXNjcmliZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5wdXNoVG9DdXJyZW50VGVzdFF1ZXVlKFwiZGVzY3JpYmVcIiwgdGl0bGUsIGV4ZWNCbG9jayk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kZXNjcmliZU9ubHkgPSAodGl0bGUsIGV4ZWNCbG9jaykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRocm93SWZUZXN0SW5Qcm9ncmVzcyhcImRlc2NyaWJlLm9ubHlcIik7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaFRvQ3VycmVudFRlc3RRdWV1ZShcImRlc2NyaWJlXCIsIHRpdGxlLCBleGVjQmxvY2ssIHRydWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5kZXNjcmliZVNraXAgPSAodGl0bGUsIGV4ZWNCbG9jaywgb3B0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRocm93SWZUZXN0SW5Qcm9ncmVzcyhcImRlc2NyaWJlLnNraXBcIik7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaFRvQ3VycmVudFRlc3RRdWV1ZShcImRlc2NyaWJlXCIsIHRpdGxlLCBleGVjQmxvY2ssIGZhbHNlLCB1bmRlZmluZWQsIHRydWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pdCA9ICgodGl0bGUsIGV4ZWNCbG9jaywgb3B0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRocm93SWZUZXN0SW5Qcm9ncmVzcyhcIml0XCIpO1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hUb0N1cnJlbnRUZXN0UXVldWUoXCJpdFwiLCB0aXRsZSwgZXhlY0Jsb2NrLCBmYWxzZSwgb3B0aW9ucyA/IG9wdGlvbnMudGltZW91dE1zIDogdW5kZWZpbmVkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLml0T25seSA9ICh0aXRsZSwgZXhlY0Jsb2NrLCBvcHRpb25zKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudGhyb3dJZlRlc3RJblByb2dyZXNzKFwiaXQub25seVwiKTtcclxuICAgICAgICAgICAgdGhpcy5wdXNoVG9DdXJyZW50VGVzdFF1ZXVlKFwiaXRcIiwgdGl0bGUsIGV4ZWNCbG9jaywgdHJ1ZSwgb3B0aW9ucyA/IG9wdGlvbnMudGltZW91dE1zIDogdW5kZWZpbmVkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaXRTa2lwID0gKHRpdGxlLCBleGVjQmxvY2ssIG9wdGlvbnMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50aHJvd0lmVGVzdEluUHJvZ3Jlc3MoXCJpdC5za2lwXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hUb0N1cnJlbnRUZXN0UXVldWUoXCJpdFwiLCB0aXRsZSwgZXhlY0Jsb2NrLCBmYWxzZSwgdW5kZWZpbmVkLCB0cnVlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucnVuTmV4dFRlc3RRdWV1ZSA9ICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGVzdFF1ZXVlU3RhY2subGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGV2YWx1YXRlZFRlc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgcXVldWUgPSB0aGlzLnRlc3RRdWV1ZVN0YWNrLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGlmIChxdWV1ZS5maXJzdE9ubHlJbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZXZhbHVhdGVkVGVzdCA9IHlpZWxkIHRoaXMuZXhlY3V0ZVRlc3QocXVldWUsIHF1ZXVlLnRlc3RzW3F1ZXVlLmZpcnN0T25seUluZGV4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLnRlc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZhbHVhdGVkVGVzdCA9ICh5aWVsZCB0aGlzLmV4ZWN1dGVUZXN0KHF1ZXVlLCBxdWV1ZS50ZXN0c1tpXSkpIHx8IGV2YWx1YXRlZFRlc3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV2YWx1YXRlZFRlc3QpIHtcclxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZXZhbHVhdGVRdWV1ZVdpdGhUaW1lb3V0KFwiYWZ0ZXJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRocm93SWZUZXN0SW5Qcm9ncmVzcyA9IChuYW1lKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRUZXN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBhZGQgYW4gJHtuYW1lfSBibG9jayB3aGlsZSBleGVjdXRpbmcgYSB0ZXN0IWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnJlc2V0UnVuUmVzdWx0cyA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ydW5SZXN1bHRzID0ge1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZFRpbWVNczogMCxcclxuICAgICAgICAgICAgICAgIHRvdGFsVGVzdHM6IDAsXHJcbiAgICAgICAgICAgICAgICB0b3RhbFN1Y2Nlc3NlczogMCxcclxuICAgICAgICAgICAgICAgIHRvdGFsRmFpbHVyZXM6IDAsXHJcbiAgICAgICAgICAgICAgICB0b3RhbFRpbWVvdXRzOiAwLFxyXG4gICAgICAgICAgICAgICAgdGVzdFJlc3VsdHM6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IFRlc3RSdW5uZXJDb25maWdfMS5tZXJnZUNvbmZpZyhEZWZhdWx0VGVzdFJ1bm5lckNvbmZpZ18xLkRlZmF1bHRUZXN0UnVubmVyQ29uZmlnLCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gZXZlbnRFbWl0dGVyO1xyXG4gICAgICAgIHRoaXMuaXQub25seSA9IHRoaXMuaXRPbmx5O1xyXG4gICAgICAgIHRoaXMuZGVzY3JpYmUub25seSA9IHRoaXMuZGVzY3JpYmVPbmx5O1xyXG4gICAgICAgIHRoaXMuaXQuc2tpcCA9IHRoaXMuaXRTa2lwO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpYmUuc2tpcCA9IHRoaXMuZGVzY3JpYmVTa2lwO1xyXG4gICAgICAgIHRoaXMucmVzZXRSdW5SZXN1bHRzKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgZmlsZSBuYW1lIGZvciBhbGwgc3Vic2VxdWVudCBjYWxscyB0byBkZXNjcmliZS9pdC9ldGMuIFRoaXMgaXMgdXNlZCBmb3IgbG9nZ2luZyB3aGVyZSB0ZXN0c1xyXG4gICAgICogYXJlIHNvdXJjZWQgZnJvbS5cclxuICAgICAqL1xyXG4gICAgc2V0Q3VycmVudEZpbGUoYWJzb2x1dGVQYXRoKSB7XHJcbiAgICAgICAgdGhpcy5sYXN0RmlsZVBhdGhTZXQgPSBhYnNvbHV0ZVBhdGg7XHJcbiAgICB9XHJcbiAgICBvbihldmVudCwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbihldmVudCwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgb25jZShldmVudCwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbmNlKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBvZmYoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIub2ZmKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBiZWZvcmUoZXhlY0Jsb2NrKSB7XHJcbiAgICAgICAgdGhpcy50aHJvd0lmVGVzdEluUHJvZ3Jlc3MoXCJiZWZvcmVcIik7XHJcbiAgICAgICAgdGhpcy5xdWV1ZVN0YWNrc1tcImJlZm9yZVwiXS5wdXNoT25Ub3AoZXhlY0Jsb2NrKTtcclxuICAgIH1cclxuICAgIGJlZm9yZUVhY2goZXhlY0Jsb2NrKSB7XHJcbiAgICAgICAgdGhpcy50aHJvd0lmVGVzdEluUHJvZ3Jlc3MoXCJiZWZvcmVFYWNoXCIpO1xyXG4gICAgICAgIHRoaXMucXVldWVTdGFja3NbXCJiZWZvcmVFYWNoXCJdLnB1c2hPblRvcChleGVjQmxvY2spO1xyXG4gICAgfVxyXG4gICAgYWZ0ZXIoZXhlY0Jsb2NrKSB7XHJcbiAgICAgICAgdGhpcy50aHJvd0lmVGVzdEluUHJvZ3Jlc3MoXCJhZnRlclwiKTtcclxuICAgICAgICB0aGlzLnF1ZXVlU3RhY2tzW1wiYWZ0ZXJcIl0ucHVzaE9uVG9wKGV4ZWNCbG9jayk7XHJcbiAgICB9XHJcbiAgICBhZnRlckVhY2goZXhlY0Jsb2NrKSB7XHJcbiAgICAgICAgdGhpcy50aHJvd0lmVGVzdEluUHJvZ3Jlc3MoXCJhZnRlckVhY2hcIik7XHJcbiAgICAgICAgdGhpcy5xdWV1ZVN0YWNrc1tcImFmdGVyRWFjaFwiXS5wdXNoT25Ub3AoZXhlY0Jsb2NrKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgYSB0ZXN0IHJ1biBiYXNlZCBvbiB0aGUgZGVzY3JpYmVzIGFuZCBpdHMgYWRkZWQgcHJldmlvdXNseS5cclxuICAgICAqXHJcbiAgICAgKiBJZiBhIHRlc3QgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgYW4gZXJyb3Igd2lsbCBiZSByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgcnVuKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRSdW4pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc3RhcnQgYSB0ZXN0IHJ1biBpZiBvbmUgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcyFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UnVuID0gdGhpcy5ydW5OZXh0VGVzdFF1ZXVlKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLnJ1blJlc3VsdHM7XHJcbiAgICAgICAgICAgIHJlc3VsdHMuZWxhcHNlZFRpbWVNcyA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFJ1biA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRSdW5SZXN1bHRzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICAgIH0pLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFJ1biA9IG51bGw7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFJ1bjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSWYgYSB0ZXN0IGlzIGluIHByb2dyZXNzLCB0aGUgY3VycmVudCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRlc3Qgd2lsbCBiZSByZXR1cm5lZC5cclxuICAgICAqXHJcbiAgICAgKiBJZiBub3QsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxyXG4gICAgICovXHJcbiAgICBnZXRDdXJyZW50VGVzdEluZm8oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRUZXN0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IG9idGFpbiBUZXN0SW5mbyBpZiBub3QgYWN0aXZlbHkgaW4gYSB0ZXN0IVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRlc3Q7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0cyBhbGwgcGVuZGluZyBzdGF0ZSwgaW5jbHVkaW5nIGFsbCBhdHRhY2hlZCBiZWZvcmUsIGJlZm9yZUVhY2gsIGFmdGVyLCBhZnRlckVhY2gsIHRlc3RzLCBkZXNjcmliZXMsIGV0Yy5cclxuICAgICAqXHJcbiAgICAgKiBJZiBhIHRlc3QgcnVuIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxyXG4gICAgICovXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50UnVuKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlc2V0IGlmIGEgdGVzdCBydW4gaXMgYWxyZWFkeSBpbiBwcm9ncmVzcyFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRSdW5SZXN1bHRzKCk7XHJcbiAgICAgICAgdGhpcy50ZXN0UnVuQ2FuY2VsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50ZXN0UXVldWVTdGFjayA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBRdWV1ZVN0YWNrVHlwZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZVN0YWNrc1t0eXBlXS5yZXNldCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY3VycmVudFJ1bikge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm90IGN1cnJlbnRseSBleGVjdXRpbmcgYSB0ZXN0IHJ1biEgVW5hYmxlIHRvIGNhbmNlbCBhY2NvcmRpbmdseS5cIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRlc3RSdW5DYW5jZWxsZWQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRSdW4udGhlbigocmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVzaFRvQ3VycmVudFRlc3RRdWV1ZSh0eXBlLCB0aXRsZSwgZXhlY0Jsb2NrLCBvbmx5LCB0aW1lb3V0TXMsIHNraXApIHtcclxuICAgICAgICBpZiAodGhpcy50ZXN0UXVldWVTdGFjay5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc3QgdGVzdFF1ZXVlID0ge1xyXG4gICAgICAgICAgICAgICAgZGVzY3JpYmVUaXRsZUNoYWluOiBbXSxcclxuICAgICAgICAgICAgICAgIHRlc3RzOiBbXSxcclxuICAgICAgICAgICAgICAgIGV2YWx1YXRlZEJlZm9yZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2tpcEFsbFRlc3RzOiB0eXBlID09PSBcImRlc2NyaWJlXCIgJiYgc2tpcCxcclxuICAgICAgICAgICAgICAgIGZpcnN0T25seUluZGV4OiBvbmx5ID8gMCA6IG51bGxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy50ZXN0UXVldWVTdGFjay5wdXNoKHRlc3RRdWV1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRFbnRyeSA9IHRoaXMudGVzdFF1ZXVlU3RhY2tbdGhpcy50ZXN0UXVldWVTdGFjay5sZW5ndGggLSAxXTtcclxuICAgICAgICBjb25zdCB0ZXN0RW50cnkgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBleGVjQmxvY2ssXHJcbiAgICAgICAgICAgIGRlc2NyaWJlVGl0bGVDaGFpbjogY3VycmVudEVudHJ5LmRlc2NyaWJlVGl0bGVDaGFpbixcclxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICBhYnNvbHV0ZUZpbGVQYXRoOiB0aGlzLmxhc3RGaWxlUGF0aFNldCxcclxuICAgICAgICAgICAgc2tpcDogc2tpcCB8fCBjdXJyZW50RW50cnkuc2tpcEFsbFRlc3RzXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAob25seSAmJiBjdXJyZW50RW50cnkuZmlyc3RPbmx5SW5kZXggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgY3VycmVudEVudHJ5LmZpcnN0T25seUluZGV4ID0gY3VycmVudEVudHJ5LnRlc3RzLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRpbWVvdXRNcyA+IDApIHtcclxuICAgICAgICAgICAgdGVzdEVudHJ5LnRpbWVvdXRNcyA9IHRpbWVvdXRNcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY3VycmVudEVudHJ5LnRlc3RzLnB1c2godGVzdEVudHJ5KTtcclxuICAgIH1cclxuICAgIGV4ZWN1dGVUZXN0KHF1ZXVlLCBlbnRyeSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5hYnNvbHV0ZUZpbGVQYXRoICE9PSB0aGlzLmN1cnJlbnRseUV4ZWN1dGluZ0ZpbGVQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRseUV4ZWN1dGluZ0ZpbGVQYXRoID0gZW50cnkuYWJzb2x1dGVGaWxlUGF0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy50ZXN0UnVuQ2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZW50cnkudHlwZSA9PT0gXCJkZXNjcmliZVwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0ZURlc2NyaWJlKHF1ZXVlLCBlbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ldmFsdWF0ZVRlc3QocXVldWUsIGVudHJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZXZhbHVhdGVEZXNjcmliZShxdWV1ZSwgZW50cnkpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICB0aGlzLnRlc3RRdWV1ZVN0YWNrLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZGVzY3JpYmVUaXRsZUNoYWluOiBbXS5jb25jYXQocXVldWUuZGVzY3JpYmVUaXRsZUNoYWluLCBlbnRyeS50aXRsZSksXHJcbiAgICAgICAgICAgICAgICB0ZXN0czogW10sXHJcbiAgICAgICAgICAgICAgICBldmFsdWF0ZWRCZWZvcmVzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNraXBBbGxUZXN0czogZW50cnkuc2tpcCxcclxuICAgICAgICAgICAgICAgIGZpcnN0T25seUluZGV4OiBudWxsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgUXVldWVTdGFja1R5cGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlU3RhY2tzW3R5cGVdLnB1c2hTdGFjayhbXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeWllbGQgdGhpcy5hc3luY1Byb21pc2lmaWVyLmV4ZWMoZW50cnkuY2FsbGJhY2ssIFwiZGVzY3JpYmVcIik7XHJcbiAgICAgICAgICAgIHlpZWxkIHRoaXMucnVuTmV4dFRlc3RRdWV1ZSgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgUXVldWVTdGFja1R5cGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlU3RhY2tzW3R5cGVdLnNoaWZ0U3RhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBldmFsdWF0ZVRlc3QocXVldWUsIGVudHJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5LnNraXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RSZXN1bHRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogXCJza2lwcGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVzdEluZm86IGVudHJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIGVsYXBzZWRNczogMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoXCJvblRlc3RFbmRcIiwgdGVzdFJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghcXVldWUuZXZhbHVhdGVkQmVmb3Jlcykge1xyXG4gICAgICAgICAgICAgICAgcXVldWUuZXZhbHVhdGVkQmVmb3JlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmV2YWx1YXRlUXVldWVXaXRoVGltZW91dChcImJlZm9yZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB5aWVsZCB0aGlzLmV2YWx1YXRlUXVldWVXaXRoVGltZW91dChcImJlZm9yZUVhY2hcIik7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFRlc3QgPSBlbnRyeTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZXhlY3V0ZVRlc3RDYWxsYmFjayhlbnRyeSk7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmV2YWx1YXRlUXVldWVXaXRoVGltZW91dChcImFmdGVyRWFjaFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucnVuUmVzdWx0cy50b3RhbFRlc3RzKys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUZXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGV4ZWN1dGVUZXN0Q2FsbGJhY2soZW50cnkpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0VmFsdWUgPSBlbnRyeS50aW1lb3V0TXMgPj0gMCA/IGVudHJ5LnRpbWVvdXRNcyA6IHRoaXMuZ2V0VGltZW91dFZhbHVlKFwiaXRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlc3RSZXN1bHRzID0ge1xyXG4gICAgICAgICAgICAgICAgdGVzdEluZm86IGVudHJ5XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLnRpbWVvdXRQcm9taXNpZmllci53cmFwKHRoaXMuYXN5bmNQcm9taXNpZmllci5leGVjKGVudHJ5LmNhbGxiYWNrLCBcIlRlc3Q6IFwiICsgZW50cnkudGl0bGUpLCB0aW1lb3V0VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGVzdFJlc3VsdHMucmVzdWx0ID0gXCJzdWNjZXNzXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUaW1lb3V0UHJvbWlzaWZpZXJfMS5UaW1lb3V0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXN0UmVzdWx0cy5yZXN1bHQgPSBcInRpbWVvdXRcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3RSZXN1bHRzLnJlc3VsdCA9IFwiZmFpbFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3RSZXN1bHRzLmVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGVzdFJlc3VsdHMuZWxhcHNlZE1zID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGV4cGxpY2l0bHkgYWRkIHN1cHBvcnQgZm9yIHJldHVybmluZyBhIG5ldyB0ZXN0UmVzdWx0LCByYXRoZXIgdGhhbiBtb2RpZnlpbmcgaXQgaW5saW5lIG9yIHRocm93aW5nLlxyXG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5ldmVudEVtaXR0ZXIuZW1pdEFuZFdhaXRGb3JDb21wbGV0aW9uKFwib25CZWZvcmVUZXN0RW5kXCIsIHRlc3RSZXN1bHRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRlc3RSZXN1bHRzLnJlc3VsdCA9IFwiZmFpbFwiO1xyXG4gICAgICAgICAgICAgICAgdGVzdFJlc3VsdHMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGVzdFJlc3VsdHMucmVzdWx0ID09PSBcInN1Y2Nlc3NcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ydW5SZXN1bHRzLnRvdGFsU3VjY2Vzc2VzKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGVzdFJlc3VsdHMucmVzdWx0ID09PSBcInRpbWVvdXRcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ydW5SZXN1bHRzLnRvdGFsVGltZW91dHMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucnVuUmVzdWx0cy50b3RhbEZhaWx1cmVzKys7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSB3YW50IHRvIHN0b3AgYWRkaXRpb25hbCBleGVjdXRpb24gb24gdGhlIGZpcnN0IGZhaWwsIGp1c3QgY2FuY2VsIHRoZSByZXN0IG9mIHRoZSBydW4uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcuc3RvcE9uRmlyc3RGYWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0UnVuQ2FuY2VsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJ1blJlc3VsdHMudGVzdFJlc3VsdHMucHVzaCh0ZXN0UmVzdWx0cyk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoXCJvblRlc3RFbmRcIiwgdGVzdFJlc3VsdHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZXZhbHVhdGVRdWV1ZVdpdGhUaW1lb3V0KHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aW1lb3V0UHJvbWlzaWZpZXIud3JhcCh0aGlzLmV2YWx1YXRlUXVldWUodHlwZSksIHRoaXMuZ2V0VGltZW91dFZhbHVlKHR5cGUpKTtcclxuICAgIH1cclxuICAgIGV2YWx1YXRlUXVldWUodHlwZSkge1xyXG4gICAgICAgIGNvbnN0IHF1ZXVlU3RhY2sgPSB0aGlzLnF1ZXVlU3RhY2tzW3R5cGVdO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBcImJlZm9yZVwiIHx8IHR5cGUgPT09IFwiYmVmb3JlRWFjaFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBxdWV1ZVN0YWNrLnRyYXZlcnNlTGV2ZWxPcmRlcigoY2FsbGJhY2spID0+IHRoaXMuYXN5bmNQcm9taXNpZmllci5leGVjKGNhbGxiYWNrLCB0eXBlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcXVldWVTdGFjay50cmF2ZXJzZUludmVyc2VMZXZlbE9yZGVyKChjYWxsYmFjaykgPT4gdGhpcy5hc3luY1Byb21pc2lmaWVyLmV4ZWMoY2FsbGJhY2ssIHR5cGUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRUaW1lb3V0VmFsdWUodHlwZSkge1xyXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLmNvbmZpZy50aW1lb3V0TXM7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aW1lb3V0ID09PSBcIm51bWJlclwiID8gdGltZW91dCA6IHRpbWVvdXRbdHlwZV07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5UZXN0UnVubmVyID0gVGVzdFJ1bm5lcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVkdWemRGSjFibTVsY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OVVaWE4wVW5WdWJtVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3p0QlFVZEJMQ3RFUVVFd1JEdEJRVU14UkN4dFJVRkJORVU3UVVGRE5VVXNaMFZCUVhWR08wRkJRM1pHTERoRlFVRjVSVHRCUVVWNlJTd3dSVUZCYjBZN1FVRkRjRVlzTmtOQlFYZERPMEZCWjBKNFF5eE5RVUZOTEdWQlFXVXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3haUVVGWkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMEZCYTBKMlJUczdSMEZGUnp0QlFVTklMRTFCUVUwc1ZVRkJWVHRKUVhsQ1dpeFpRVUZaTEUxQlFYbENMRVZCUVVVc1pVRkJaU3hKUVVGSkxIVkRRVUZyUWl4RlFVRlpPMUZCZGtKMlJTeHhRa0ZCWjBJc1IwRkJSeXhKUVVGSkxHMURRVUZuUWl4RlFVRkZMRU5CUVVNN1VVRkRNVU1zZFVKQlFXdENMRWRCUVVjc1NVRkJTU3gxUTBGQmEwSXNSVUZCUlN4RFFVRkRPMUZCUzNaRUxHMUNRVUZqTEVkQlFXZENMRVZCUVVVc1EwRkJRenRSUVVOcVF5eG5Ra0ZCVnl4SFFVRnJSVHRaUVVOcVJpeFJRVUZSTEVWQlFVVXNTVUZCU1N4MVFrRkJWU3hGUVVGRk8xbEJRekZDTEZsQlFWa3NSVUZCUlN4SlFVRkpMSFZDUVVGVkxFVkJRVVU3V1VGRE9VSXNUMEZCVHl4RlFVRkZMRWxCUVVrc2RVSkJRVlVzUlVGQlJUdFpRVU42UWl4WFFVRlhMRVZCUVVVc1NVRkJTU3gxUWtGQlZTeEZRVUZGTzFOQlEyaERMRU5CUVVNN1VVRkZUU3huUWtGQlZ5eEhRVUZ4UWl4SlFVRkpMRU5CUVVNN1VVRkRja01zY1VKQlFXZENMRWRCUVZrc1MwRkJTeXhEUVVGRE8xRkJlVU14UXl3MlIwRkJOa2M3VVVGRGNFY3NZVUZCVVN4SFFVRXlRaXhEUVVGRExFTkJRVU1zUzBGQllTeEZRVUZGTEZOQlFYRkNMRVZCUVVVc1JVRkJSVHRaUVVOc1JpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdXVUZEZGtNc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRlZCUVZVc1JVRkJSU3hMUVVGTExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdVVUZET1VRc1EwRkJReXhEUVVFeVFpeERRVUZETzFGQlJYSkNMR2xDUVVGWkxFZEJRVWNzUTBGQlF5eExRVUZoTEVWQlFVVXNVMEZCWjBZc1JVRkJVU3hGUVVGRk8xbEJRemRJTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0WlFVTTFReXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRjRVVzUTBGQlF5eERRVUZETzFGQlJVMHNhVUpCUVZrc1IwRkJSeXhEUVVGRExFdEJRV0VzUlVGQlJTeFRRVUZuUml4RlFVRkZMRTlCUVRSQ0xFVkJRVkVzUlVGQlJUdFpRVU16U2l4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1dVRkROVU1zU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExGVkJRVlVzUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZEVZc1EwRkJReXhEUVVGRE8xRkJSVThzVDBGQlJTeEhRVUZ4UWl4RFFVRkRMRU5CUVVNc1MwRkJZU3hGUVVGRkxGTkJRV2RHTEVWQlFVVXNUMEZCTkVJc1JVRkJVU3hGUVVGRk8xbEJRM0pMTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTnFReXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNTMEZCU3l4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGVFY3NRMEZCUXl4RFFVRnhRaXhEUVVGRE8xRkJSV1lzVjBGQlRTeEhRVUZITEVOQlFVTXNTMEZCWVN4RlFVRkZMRk5CUVdkR0xFVkJRVVVzVDBGQk5FSXNSVUZCVVN4RlFVRkZPMWxCUTNKS0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVU4wUXl4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hUUVVGVExFVkJRVVVzU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRka2NzUTBGQlF5eERRVUZETzFGQlJVMHNWMEZCVFN4SFFVRkhMRU5CUVVNc1MwRkJZU3hGUVVGRkxGTkJRV2RHTEVWQlFVVXNUMEZCTkVJc1JVRkJVU3hGUVVGRk8xbEJRM0pLTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0WlFVTjBReXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNTMEZCU3l4RlFVRkZMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5vUml4RFFVRkRMRU5CUVVNN1VVRTBTRTBzY1VKQlFXZENMRWRCUVVjc1IwRkJkMElzUlVGQlJUdFpRVU5xUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNSVUZCUlR0blFrRkRiRU1zVDBGQlR6dGhRVU5XTzFsQlJVUXNTVUZCU1N4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGRE8xbEJRekZDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZETVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zWTBGQll5eExRVUZMTEVsQlFVa3NSVUZCUlR0blFrRkRMMElzWVVGQllTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF6dGhRVU53Ump0cFFrRkJUVHRuUWtGRFNDeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3YjBKQlEzcERMR0ZCUVdFc1IwRkJSeXhEUVVGQkxFMUJRVTBzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkpMR0ZCUVdFc1EwRkJRenRwUWtGRGJFWTdZVUZEU2p0WlFVVkVMRWxCUVVrc1lVRkJZU3hGUVVGRk8yZENRVU5tTEUxQlFVMHNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMkZCUTJoRU8xRkJRMHdzUTBGQlF5eERRVUZCTEVOQlFVTTdVVUYxU1Uwc01FSkJRWEZDTEVkQlFVY3NRMEZCUXl4SlFVRlpMRVZCUVZFc1JVRkJSVHRaUVVOdVJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN1owSkJRMnhDTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVsQlFVa3NaME5CUVdkRExFTkJRVU1zUTBGQlF6dGhRVU14UlR0UlFVTk1MRU5CUVVNc1EwRkJRenRSUVVWTkxHOUNRVUZsTEVkQlFVY3NSMEZCUnl4RlFVRkZPMWxCUXpOQ0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVYzdaMEpCUTJRc1lVRkJZU3hGUVVGRkxFTkJRVU03WjBKQlEyaENMRlZCUVZVc1JVRkJSU3hEUVVGRE8yZENRVU5pTEdOQlFXTXNSVUZCUlN4RFFVRkRPMmRDUVVOcVFpeGhRVUZoTEVWQlFVVXNRMEZCUXp0blFrRkRhRUlzWVVGQllTeEZRVUZGTEVOQlFVTTdaMEpCUTJoQ0xGZEJRVmNzUlVGQlJTeEZRVUZGTzJGQlEyeENMRU5CUVVNN1VVRkRUaXhEUVVGRExFTkJRVUU3VVVGcVYwY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXc0UWtGQlZ5eERRVUZETEdsRVFVRjFRaXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzFGQlF6TkVMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzV1VGQldTeERRVUZETzFGQlJXcERMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1VVRkRNMElzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF6dFJRVVYyUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRmRrTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGRE8wbEJRek5DTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGpRVUZqTEVOQlFVTXNXVUZCYjBJN1VVRkRMMElzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4WlFVRlpMRU5CUVVNN1NVRkRlRU1zUTBGQlF6dEpRVVZFTEVWQlFVVXNRMEZCSzBJc1MwRkJXU3hGUVVGRkxGRkJRWGRETzFGQlEyNUdMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVNeFF5eERRVUZETzBsQlJVUXNTVUZCU1N4RFFVRXJRaXhMUVVGWkxFVkJRVVVzVVVGQmQwTTdVVUZEY2tZc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRelZETEVOQlFVTTdTVUZGUkN4SFFVRkhMRU5CUVN0Q0xFdEJRVmtzUlVGQlJTeFJRVUYzUXp0UlFVTndSaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE0wTXNRMEZCUXp0SlFXbERSQ3hOUVVGTkxFTkJRVU1zVTBGQlowWTdVVUZEYmtZc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRM0pETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUTNCRUxFTkJRVU03U1VGRlJDeFZRVUZWTEVOQlFVTXNVMEZCWjBZN1VVRkRka1lzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFGQlEzcERMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wbEJRM2hFTEVOQlFVTTdTVUZGUkN4TFFVRkxMRU5CUVVNc1UwRkJaMFk3VVVGRGJFWXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTNCRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBsQlEyNUVMRU5CUVVNN1NVRkZSQ3hUUVVGVExFTkJRVU1zVTBGQlowWTdVVUZEZEVZc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUTNaRUxFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzUjBGQlJ6dFJRVU5ETEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSVHRaUVVOcVFpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMSFZFUVVGMVJDeERRVUZETEVOQlFVTTdVMEZETlVVN1VVRkZSQ3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkROMElzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRk8xbEJRMmhFTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU03V1VGRGFFTXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NVMEZCVXl4RFFVRkRPMWxCUXk5RExFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUlhaQ0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXp0WlFVTjJRaXhQUVVGUExFOUJRVThzUTBGQlF6dFJRVU51UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTllMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzWkNMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRMW9zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4UFFVRlBMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU03U1VGRE0wSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4clFrRkJhMEk3VVVGRFpDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHRaUVVOdVFpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMR3RFUVVGclJDeERRVUZETEVOQlFVTTdVMEZEZGtVN1VVRkZSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTTdTVUZETlVJc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3hMUVVGTE8xRkJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZPMWxCUTJwQ0xFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNiVVJCUVcxRUxFTkJRVU1zUTBGQlF6dFRRVU40UlR0UlFVVkVMRWxCUVVrc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlF6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NSVUZCUlN4RFFVRkRPMUZCUTNwQ0xFdEJRVXNzVFVGQlRTeEpRVUZKTEVsQlFVa3NaVUZCWlN4RlFVRkZPMWxCUTJoRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VTBGRGJFTTdTVUZEVEN4RFFVRkRPMGxCUlVRc1RVRkJUVHRSUVVOR0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZPMWxCUTJ4Q0xFOUJRVThzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRXRCUVVzc1EwRkJReXh0UlVGQmJVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRla2M3VVVGRlJDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZETzFGQlF6ZENMRTlCUVU4c1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSVHRaUVVOd1F5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1dVRkRZaXhQUVVGUExFOUJRVThzUTBGQlF6dFJRVU51UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU03U1VGRlR5eHpRa0ZCYzBJc1EwRkJReXhKUVVGMVFpeEZRVUZGTEV0QlFXRXNSVUZCUlN4VFFVRnhRaXhGUVVGRkxFbEJRV01zUlVGQlJTeFRRVUZyUWl4RlFVRkZMRWxCUVdNN1VVRkROVWtzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFVkJRVVU3V1VGRGJFTXNUVUZCVFN4VFFVRlRMRWRCUVdNN1owSkJRM3BDTEd0Q1FVRnJRaXhGUVVGRkxFVkJRVVU3WjBKQlEzUkNMRXRCUVVzc1JVRkJSU3hGUVVGRk8yZENRVU5VTEdkQ1FVRm5RaXhGUVVGRkxFdEJRVXM3WjBKQlEzWkNMRmxCUVZrc1JVRkJSU3hKUVVGSkxFdEJRVXNzVlVGQlZTeEpRVUZKTEVsQlFVazdaMEpCUTNwRExHTkJRV01zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNUdGhRVU5zUXl4RFFVRkRPMWxCUTBZc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1UwRkRka003VVVGRlJDeE5RVUZOTEZsQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRM3BGTEUxQlFVMHNVMEZCVXl4SFFVRmpPMWxCUTNwQ0xFbEJRVWtzUlVGQlJTeEpRVUZKTzFsQlExWXNVVUZCVVN4RlFVRkZMRk5CUVZNN1dVRkRia0lzYTBKQlFXdENMRVZCUVVVc1dVRkJXU3hEUVVGRExHdENRVUZyUWp0WlFVTnVSQ3hMUVVGTExFVkJRVVVzUzBGQlN6dFpRVU5hTEdkQ1FVRm5RaXhGUVVGRkxFbEJRVWtzUTBGQlF5eGxRVUZsTzFsQlEzUkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFbEJRVWtzV1VGQldTeERRVUZETEZsQlFWazdVMEZETVVNc1EwRkJRenRSUVVWR0xFbEJRVWtzU1VGQlNTeEpRVUZKTEZsQlFWa3NRMEZCUXl4alFVRmpMRXRCUVVzc1NVRkJTU3hGUVVGRk8xbEJRemxETEZsQlFWa3NRMEZCUXl4alFVRmpMRWRCUVVjc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTTdVMEZETTBRN1VVRkZSQ3hKUVVGSkxGTkJRVk1zUjBGQlJ5eERRVUZETEVWQlFVVTdXVUZEWml4VFFVRlRMRU5CUVVNc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF6dFRRVU51UXp0UlFVVkVMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMGxCUTNaRExFTkJRVU03U1VGelFtRXNWMEZCVnl4RFFVRkRMRXRCUVdkQ0xFVkJRVVVzUzBGQlowSTdPMWxCUTNoRUxFbEJRVWtzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhMUVVGTExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSVHRuUWtGRE5VUXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeEhRVUZITEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF6dGhRVU0xUkR0WlFVVkVMRWxCUVVrc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZPMmRDUVVOMlFpeFBRVUZQTEV0QlFVc3NRMEZCUXp0aFFVTm9RanRwUWtGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRXRCUVVzc1ZVRkJWU3hGUVVGRk8yZENRVU5zUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03WVVGRE9VTTdhVUpCUVUwN1owSkJRMGdzVDBGQlR5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dGhRVU14UXp0UlFVTk1MRU5CUVVNN1MwRkJRVHRKUVVWaExHZENRVUZuUWl4RFFVRkRMRXRCUVdkQ0xFVkJRVVVzUzBGQlowSTdPMWxCUXpkRUxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRPMmRDUVVOeVFpeHJRa0ZCYTBJc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRPMmRDUVVOd1JTeExRVUZMTEVWQlFVVXNSVUZCUlR0blFrRkRWQ3huUWtGQlowSXNSVUZCUlN4TFFVRkxPMmRDUVVOMlFpeFpRVUZaTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWxCUVVrN1owSkJRM2hDTEdOQlFXTXNSVUZCUlN4SlFVRkpPMkZCUTNaQ0xFTkJRVU1zUTBGQlF6dFpRVVZJTEV0QlFVc3NUVUZCVFN4SlFVRkpMRWxCUVVrc1pVRkJaU3hGUVVGRk8yZENRVU5vUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRoUVVONFF6dFpRVVZFTEUxQlFVMHNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZETzFsQlF6ZEVMRTFCUVUwc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNN1dVRkZPVUlzUzBGQlN5eE5RVUZOTEVsQlFVa3NTVUZCU1N4bFFVRmxMRVZCUVVVN1owSkJRMmhETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdZVUZEZGtNN1dVRkZSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dFJRVU5xUWl4RFFVRkRPMHRCUVVFN1NVRkZZU3haUVVGWkxFTkJRVU1zUzBGQlowSXNSVUZCUlN4TFFVRm5RanM3V1VGRGVrUXNTVUZCU1N4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRk8yZENRVU5hTEUxQlFVMHNWMEZCVnl4SFFVRmxPMjlDUVVNMVFpeE5RVUZOTEVWQlFVVXNVMEZCVXp0dlFrRkRha0lzVVVGQlVTeEZRVUZGTEV0QlFVczdiMEpCUTJZc1UwRkJVeXhGUVVGRkxFTkJRVU03YVVKQlEyWXNRMEZCUXp0blFrRkZSaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1YwRkJlVUlzUTBGQlF5eERRVUZETzJkQ1FVTXZSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dGhRVU5vUWp0WlFVVkVMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRVZCUVVVN1owSkJRM3BDTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdaMEpCUXpsQ0xFMUJRVTBzU1VGQlNTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzJGQlEycEVPMWxCUTBRc1RVRkJUU3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03V1VGRmJFUXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU03V1VGRmVrSXNTVUZCU1R0blFrRkRRU3hOUVVGTkxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dG5Ra0ZEZEVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03WVVGRGNFUTdiMEpCUVZNN1owSkJRMDRzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRuUWtGRE4wSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03WVVGRE0wSTdXVUZGUkN4UFFVRlBMRWxCUVVrc1EwRkJRenRSUVVOb1FpeERRVUZETzB0QlFVRTdTVUZGWVN4dFFrRkJiVUlzUTBGQlF5eExRVUZuUWpzN1dVRkRPVU1zVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xbEJRemRDTEUxQlFVMHNXVUZCV1N4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xbEJSWHBHTEUxQlFVMHNWMEZCVnl4SFFVRjNRanRuUWtGRGNrTXNVVUZCVVN4RlFVRkZMRXRCUVVzN1lVRkRiRUlzUTBGQlF6dFpRVVZHTEVsQlFVazdaMEpCUTBFc1RVRkJUU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRPMmRDUVVOeVNDeFhRVUZYTEVOQlFVTXNUVUZCVFN4SFFVRkhMRk5CUVZNc1EwRkJRenRoUVVOc1F6dFpRVUZETEU5QlFVOHNTMEZCU3l4RlFVRkZPMmRDUVVOYUxFbEJRVWtzUzBGQlN5eFpRVUZaTEdsRFFVRlpMRVZCUVVVN2IwSkJReTlDTEZkQlFWY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGRE8ybENRVU5zUXp0eFFrRkJUVHR2UWtGRFNDeFhRVUZYTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenR2UWtGRE5VSXNWMEZCVnl4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03YVVKQlF6ZENPMkZCUTBvN1dVRkZSQ3hYUVVGWExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhUUVVGVExFTkJRVU03V1VGRkwwTXNTVUZCU1R0blFrRkRRU3cwUjBGQk5FYzdaMEpCUXpWSExFMUJRVTBzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hYUVVGNVFpeERRVUZETEVOQlFVTTdZVUZEYkVjN1dVRkJReXhQUVVGUExFdEJRVXNzUlVGQlJUdG5Ra0ZEV2l4WFFVRlhMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF6dG5Ra0ZETlVJc1YwRkJWeXhEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdZVUZETjBJN1dVRkZSQ3hKUVVGSkxGZEJRVmNzUTBGQlF5eE5RVUZOTEV0QlFVc3NVMEZCVXl4RlFVRkZPMmRDUVVOc1F5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8yRkJRM0JETzJsQ1FVRk5MRWxCUVVrc1YwRkJWeXhEUVVGRExFMUJRVTBzUzBGQlN5eFRRVUZUTEVWQlFVVTdaMEpCUTNwRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNN1lVRkRia003YVVKQlFVMDdaMEpCUTBnc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0blFrRkZhRU1zT0VaQlFUaEdPMmRDUVVNNVJpeEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1pVRkJaU3hGUVVGRk8yOUNRVU0zUWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMmxDUVVOb1F6dGhRVU5LTzFsQlJVUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFYbENMRU5CUVVNc1EwRkJRenRaUVVNMVJDeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzVjBGQmVVSXNRMEZCUXl4RFFVRkRPMUZCUTI1RkxFTkJRVU03UzBGQlFUdEpRVVZQTEhkQ1FVRjNRaXhEUVVGRExFbEJRVzlDTzFGQlEycEVMRTlCUVU4c1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTTVSaXhEUVVGRE8wbEJSVThzWVVGQllTeERRVUZETEVsQlFXOUNPMUZCUTNSRExFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRE1VTXNTVUZCU1N4SlFVRkpMRXRCUVVzc1VVRkJVU3hKUVVGSkxFbEJRVWtzUzBGQlN5eFpRVUZaTEVWQlFVVTdXVUZETlVNc1QwRkJUeXhWUVVGVkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGJFYzdZVUZCVFR0WlFVTklMRTlCUVU4c1ZVRkJWU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRM3BITzBsQlEwd3NRMEZCUXp0SlFVVlBMR1ZCUVdVc1EwRkJaME1zU1VGQlR6dFJRVU14UkN4TlFVRk5MRTlCUVU4c1IwRkJNa0lzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN1VVRkRPVVFzVDBGQlR5eFBRVUZQTEU5QlFVOHNTMEZCU3l4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRMnBGTEVOQlFVTTdRMEZyUWtvN1FVRkZUeXhuUTBGQlZTSjkiLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlRlc3RSdW5uZXIgPSB2b2lkIDA7XHJcbmNvbnN0IFRlc3RSdW5uZXJfMSA9IHJlcXVpcmUoXCIuL1Rlc3RSdW5uZXJcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRlc3RSdW5uZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFRlc3RSdW5uZXJfMS5UZXN0UnVubmVyOyB9IH0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc05rTkJRWGRETzBGQlQxWXNNa1pCVUhSQ0xIVkNRVUZWTEU5QlQzTkNJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gZmxhdHRlbihpdGVtcykge1xyXG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZSgoY29sbGVjdGlvbiwgaXRlbSkgPT4gW10uY29uY2F0KGNvbGxlY3Rpb24sIGl0ZW0pLCBbXSk7XHJcbn1cclxuZXhwb3J0cy5mbGF0dGVuID0gZmxhdHRlbjtcclxuZnVuY3Rpb24gc3BsaXRXaGVuKGl0ZW1zLCBwcmVkaWNhdGUpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFtbXV07XHJcbiAgICBsZXQgZ3JvdXBJbmRleCA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcclxuICAgICAgICBpZiAocHJlZGljYXRlKGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIGdyb3VwSW5kZXgrKztcclxuICAgICAgICAgICAgcmVzdWx0W2dyb3VwSW5kZXhdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHRbZ3JvdXBJbmRleF0ucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmV4cG9ydHMuc3BsaXRXaGVuID0gc3BsaXRXaGVuO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBpc0Vub2VudENvZGVFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIGVycm9yLmNvZGUgPT09ICdFTk9FTlQnO1xyXG59XHJcbmV4cG9ydHMuaXNFbm9lbnRDb2RlRXJyb3IgPSBpc0Vub2VudENvZGVFcnJvcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgRGlyZW50RnJvbVN0YXRzIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHN0YXRzKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmlzQmxvY2tEZXZpY2UgPSBzdGF0cy5pc0Jsb2NrRGV2aWNlLmJpbmQoc3RhdHMpO1xyXG4gICAgICAgIHRoaXMuaXNDaGFyYWN0ZXJEZXZpY2UgPSBzdGF0cy5pc0NoYXJhY3RlckRldmljZS5iaW5kKHN0YXRzKTtcclxuICAgICAgICB0aGlzLmlzRGlyZWN0b3J5ID0gc3RhdHMuaXNEaXJlY3RvcnkuYmluZChzdGF0cyk7XHJcbiAgICAgICAgdGhpcy5pc0ZJRk8gPSBzdGF0cy5pc0ZJRk8uYmluZChzdGF0cyk7XHJcbiAgICAgICAgdGhpcy5pc0ZpbGUgPSBzdGF0cy5pc0ZpbGUuYmluZChzdGF0cyk7XHJcbiAgICAgICAgdGhpcy5pc1NvY2tldCA9IHN0YXRzLmlzU29ja2V0LmJpbmQoc3RhdHMpO1xyXG4gICAgICAgIHRoaXMuaXNTeW1ib2xpY0xpbmsgPSBzdGF0cy5pc1N5bWJvbGljTGluay5iaW5kKHN0YXRzKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVEaXJlbnRGcm9tU3RhdHMobmFtZSwgc3RhdHMpIHtcclxuICAgIHJldHVybiBuZXcgRGlyZW50RnJvbVN0YXRzKG5hbWUsIHN0YXRzKTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZURpcmVudEZyb21TdGF0cyA9IGNyZWF0ZURpcmVudEZyb21TdGF0cztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBMRUFESU5HX0RPVF9TRUdNRU5UX0NIQVJBQ1RFUlNfQ09VTlQgPSAyOyAvLyAuLyBvciAuXFxcXFxyXG5jb25zdCBVTkVTQ0FQRURfR0xPQl9TWU1CT0xTX1JFID0gLyhcXFxcPykoWygpKj9bXFxde3x9XXxeIXxbIStAXSg/PVxcKCkpL2c7XHJcbi8qKlxyXG4gKiBEZXNpZ25lZCB0byB3b3JrIG9ubHkgd2l0aCBzaW1wbGUgcGF0aHM6IGBkaXJcXFxcZmlsZWAuXHJcbiAqL1xyXG5mdW5jdGlvbiB1bml4aWZ5KGZpbGVwYXRoKSB7XHJcbiAgICByZXR1cm4gZmlsZXBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xyXG59XHJcbmV4cG9ydHMudW5peGlmeSA9IHVuaXhpZnk7XHJcbmZ1bmN0aW9uIG1ha2VBYnNvbHV0ZShjd2QsIGZpbGVwYXRoKSB7XHJcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKGN3ZCwgZmlsZXBhdGgpO1xyXG59XHJcbmV4cG9ydHMubWFrZUFic29sdXRlID0gbWFrZUFic29sdXRlO1xyXG5mdW5jdGlvbiBlc2NhcGUocGF0dGVybikge1xyXG4gICAgcmV0dXJuIHBhdHRlcm4ucmVwbGFjZShVTkVTQ0FQRURfR0xPQl9TWU1CT0xTX1JFLCAnXFxcXCQyJyk7XHJcbn1cclxuZXhwb3J0cy5lc2NhcGUgPSBlc2NhcGU7XHJcbmZ1bmN0aW9uIHJlbW92ZUxlYWRpbmdEb3RTZWdtZW50KGVudHJ5KSB7XHJcbiAgICAvLyBXZSBkbyBub3QgdXNlIGBzdGFydHNXaXRoYCBiZWNhdXNlIHRoaXMgaXMgMTB4IHNsb3dlciB0aGFuIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gZm9yIHNvbWUgY2FzZXMuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1zdHJpbmctc3RhcnRzLWVuZHMtd2l0aFxyXG4gICAgaWYgKGVudHJ5LmNoYXJBdCgwKSA9PT0gJy4nKSB7XHJcbiAgICAgICAgY29uc3Qgc2Vjb25kQ2hhcmFjdGVyeSA9IGVudHJ5LmNoYXJBdCgxKTtcclxuICAgICAgICBpZiAoc2Vjb25kQ2hhcmFjdGVyeSA9PT0gJy8nIHx8IHNlY29uZENoYXJhY3RlcnkgPT09ICdcXFxcJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnkuc2xpY2UoTEVBRElOR19ET1RfU0VHTUVOVF9DSEFSQUNURVJTX0NPVU5UKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn1cclxuZXhwb3J0cy5yZW1vdmVMZWFkaW5nRG90U2VnbWVudCA9IHJlbW92ZUxlYWRpbmdEb3RTZWdtZW50O1xyXG4iLCIvKiFcbiAqIGlzLWdsb2IgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLWdsb2I+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbnZhciBpc0V4dGdsb2IgPSByZXF1aXJlKCdpcy1leHRnbG9iJyk7XG52YXIgY2hhcnMgPSB7ICd7JzogJ30nLCAnKCc6ICcpJywgJ1snOiAnXSd9O1xudmFyIHN0cmljdFJlZ2V4ID0gL1xcXFwoLil8KF4hfFxcKnxbXFxdLispXVxcP3xcXFtbXlxcXFxcXF1dK1xcXXxcXHtbXlxcXFx9XStcXH18XFwoXFw/WzohPV1bXlxcXFwpXStcXCl8XFwoW158XStcXHxbXlxcXFwpXStcXCkpLztcbnZhciByZWxheGVkUmVnZXggPSAvXFxcXCguKXwoXiF8Wyo/e30oKVtcXF1dfFxcKFxcPykvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzR2xvYihzdHIsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8IHN0ciA9PT0gJycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNFeHRnbG9iKHN0cikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciByZWdleCA9IHN0cmljdFJlZ2V4O1xuICB2YXIgbWF0Y2g7XG5cbiAgLy8gb3B0aW9uYWxseSByZWxheCByZWdleFxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnN0cmljdCA9PT0gZmFsc2UpIHtcbiAgICByZWdleCA9IHJlbGF4ZWRSZWdleDtcbiAgfVxuXG4gIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKHN0cikpKSB7XG4gICAgaWYgKG1hdGNoWzJdKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgaWR4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG5cbiAgICAvLyBpZiBhbiBvcGVuIGJyYWNrZXQvYnJhY2UvcGFyZW4gaXMgZXNjYXBlZCxcbiAgICAvLyBzZXQgdGhlIGluZGV4IHRvIHRoZSBuZXh0IGNsb3NpbmcgY2hhcmFjdGVyXG4gICAgdmFyIG9wZW4gPSBtYXRjaFsxXTtcbiAgICB2YXIgY2xvc2UgPSBvcGVuID8gY2hhcnNbb3Blbl0gOiBudWxsO1xuICAgIGlmIChvcGVuICYmIGNsb3NlKSB7XG4gICAgICB2YXIgbiA9IHN0ci5pbmRleE9mKGNsb3NlLCBpZHgpO1xuICAgICAgaWYgKG4gIT09IC0xKSB7XG4gICAgICAgIGlkeCA9IG4gKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0ciA9IHN0ci5zbGljZShpZHgpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIvKiFcbiAqIGlzLWV4dGdsb2IgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLWV4dGdsb2I+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTYsIEpvbiBTY2hsaW5rZXJ0LlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNFeHRnbG9iKHN0cikge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgc3RyID09PSAnJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBtYXRjaDtcbiAgd2hpbGUgKChtYXRjaCA9IC8oXFxcXCkufChbQD8hKypdXFwoLipcXCkpL2cuZXhlYyhzdHIpKSkge1xuICAgIGlmIChtYXRjaFsyXSkgcmV0dXJuIHRydWU7XG4gICAgc3RyID0gc3RyLnNsaWNlKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0dsb2IgPSByZXF1aXJlKCdpcy1nbG9iJyk7XG52YXIgcGF0aFBvc2l4RGlybmFtZSA9IHJlcXVpcmUoJ3BhdGgnKS5wb3NpeC5kaXJuYW1lO1xudmFyIGlzV2luMzIgPSByZXF1aXJlKCdvcycpLnBsYXRmb3JtKCkgPT09ICd3aW4zMic7XG5cbnZhciBzbGFzaCA9ICcvJztcbnZhciBiYWNrc2xhc2ggPSAvXFxcXC9nO1xudmFyIGVuY2xvc3VyZSA9IC9bXFx7XFxbXS4qW1xcL10qLipbXFx9XFxdXSQvO1xudmFyIGdsb2JieSA9IC8oXnxbXlxcXFxdKShbXFx7XFxbXXxcXChbXlxcKV0rJCkvO1xudmFyIGVzY2FwZWQgPSAvXFxcXChbXFwqXFw/XFx8XFxbXFxdXFwoXFwpXFx7XFx9XSkvZztcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5mbGlwQmFja3NsYXNoZXM9dHJ1ZV1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnbG9iUGFyZW50KHN0ciwgb3B0cykge1xuICB2YXIgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBmbGlwQmFja3NsYXNoZXM6IHRydWUgfSwgb3B0cyk7XG5cbiAgLy8gZmxpcCB3aW5kb3dzIHBhdGggc2VwYXJhdG9yc1xuICBpZiAob3B0aW9ucy5mbGlwQmFja3NsYXNoZXMgJiYgaXNXaW4zMiAmJiBzdHIuaW5kZXhPZihzbGFzaCkgPCAwKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoYmFja3NsYXNoLCBzbGFzaCk7XG4gIH1cblxuICAvLyBzcGVjaWFsIGNhc2UgZm9yIHN0cmluZ3MgZW5kaW5nIGluIGVuY2xvc3VyZSBjb250YWluaW5nIHBhdGggc2VwYXJhdG9yXG4gIGlmIChlbmNsb3N1cmUudGVzdChzdHIpKSB7XG4gICAgc3RyICs9IHNsYXNoO1xuICB9XG5cbiAgLy8gcHJlc2VydmVzIGZ1bGwgcGF0aCBpbiBjYXNlIG9mIHRyYWlsaW5nIHBhdGggc2VwYXJhdG9yXG4gIHN0ciArPSAnYSc7XG5cbiAgLy8gcmVtb3ZlIHBhdGggcGFydHMgdGhhdCBhcmUgZ2xvYmJ5XG4gIGRvIHtcbiAgICBzdHIgPSBwYXRoUG9zaXhEaXJuYW1lKHN0cik7XG4gIH0gd2hpbGUgKGlzR2xvYihzdHIpIHx8IGdsb2JieS50ZXN0KHN0cikpO1xuXG4gIC8vIHJlbW92ZSBlc2NhcGUgY2hhcnMgYW5kIHJldHVybiByZXN1bHRcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGVzY2FwZWQsICckMScpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5pc0ludGVnZXIgPSBudW0gPT4ge1xuICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihudW0pO1xuICB9XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJyAmJiBudW0udHJpbSgpICE9PSAnJykge1xuICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKE51bWJlcihudW0pKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEZpbmQgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlXG4gKi9cblxuZXhwb3J0cy5maW5kID0gKG5vZGUsIHR5cGUpID0+IG5vZGUubm9kZXMuZmluZChub2RlID0+IG5vZGUudHlwZSA9PT0gdHlwZSk7XG5cbi8qKlxuICogRmluZCBhIG5vZGUgb2YgdGhlIGdpdmVuIHR5cGVcbiAqL1xuXG5leHBvcnRzLmV4Y2VlZHNMaW1pdCA9IChtaW4sIG1heCwgc3RlcCA9IDEsIGxpbWl0KSA9PiB7XG4gIGlmIChsaW1pdCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFleHBvcnRzLmlzSW50ZWdlcihtaW4pIHx8ICFleHBvcnRzLmlzSW50ZWdlcihtYXgpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKE51bWJlcihtYXgpIC0gTnVtYmVyKG1pbikpIC8gTnVtYmVyKHN0ZXApKSA+PSBsaW1pdDtcbn07XG5cbi8qKlxuICogRXNjYXBlIHRoZSBnaXZlbiBub2RlIHdpdGggJ1xcXFwnIGJlZm9yZSBub2RlLnZhbHVlXG4gKi9cblxuZXhwb3J0cy5lc2NhcGVOb2RlID0gKGJsb2NrLCBuID0gMCwgdHlwZSkgPT4ge1xuICBsZXQgbm9kZSA9IGJsb2NrLm5vZGVzW25dO1xuICBpZiAoIW5vZGUpIHJldHVybjtcblxuICBpZiAoKHR5cGUgJiYgbm9kZS50eXBlID09PSB0eXBlKSB8fCBub2RlLnR5cGUgPT09ICdvcGVuJyB8fCBub2RlLnR5cGUgPT09ICdjbG9zZScpIHtcbiAgICBpZiAobm9kZS5lc2NhcGVkICE9PSB0cnVlKSB7XG4gICAgICBub2RlLnZhbHVlID0gJ1xcXFwnICsgbm9kZS52YWx1ZTtcbiAgICAgIG5vZGUuZXNjYXBlZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gYnJhY2Ugbm9kZSBzaG91bGQgYmUgZW5jbG9zZWQgaW4gbGl0ZXJhbCBicmFjZXNcbiAqL1xuXG5leHBvcnRzLmVuY2xvc2VCcmFjZSA9IG5vZGUgPT4ge1xuICBpZiAobm9kZS50eXBlICE9PSAnYnJhY2UnKSByZXR1cm4gZmFsc2U7XG4gIGlmICgobm9kZS5jb21tYXMgPj4gMCArIG5vZGUucmFuZ2VzID4+IDApID09PSAwKSB7XG4gICAgbm9kZS5pbnZhbGlkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGJyYWNlIG5vZGUgaXMgaW52YWxpZC5cbiAqL1xuXG5leHBvcnRzLmlzSW52YWxpZEJyYWNlID0gYmxvY2sgPT4ge1xuICBpZiAoYmxvY2sudHlwZSAhPT0gJ2JyYWNlJykgcmV0dXJuIGZhbHNlO1xuICBpZiAoYmxvY2suaW52YWxpZCA9PT0gdHJ1ZSB8fCBibG9jay5kb2xsYXIpIHJldHVybiB0cnVlO1xuICBpZiAoKGJsb2NrLmNvbW1hcyA+PiAwICsgYmxvY2sucmFuZ2VzID4+IDApID09PSAwKSB7XG4gICAgYmxvY2suaW52YWxpZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGJsb2NrLm9wZW4gIT09IHRydWUgfHwgYmxvY2suY2xvc2UgIT09IHRydWUpIHtcbiAgICBibG9jay5pbnZhbGlkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIG5vZGUgaXMgYW4gb3BlbiBvciBjbG9zZSBub2RlXG4gKi9cblxuZXhwb3J0cy5pc09wZW5PckNsb3NlID0gbm9kZSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09ICdvcGVuJyB8fCBub2RlLnR5cGUgPT09ICdjbG9zZScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gbm9kZS5vcGVuID09PSB0cnVlIHx8IG5vZGUuY2xvc2UgPT09IHRydWU7XG59O1xuXG4vKipcbiAqIFJlZHVjZSBhbiBhcnJheSBvZiB0ZXh0IG5vZGVzLlxuICovXG5cbmV4cG9ydHMucmVkdWNlID0gbm9kZXMgPT4gbm9kZXMucmVkdWNlKChhY2MsIG5vZGUpID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ3RleHQnKSBhY2MucHVzaChub2RlLnZhbHVlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ3JhbmdlJykgbm9kZS50eXBlID0gJ3RleHQnO1xuICByZXR1cm4gYWNjO1xufSwgW10pO1xuXG4vKipcbiAqIEZsYXR0ZW4gYW4gYXJyYXlcbiAqL1xuXG5leHBvcnRzLmZsYXR0ZW4gPSAoLi4uYXJncykgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3QgZmxhdCA9IGFyciA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlbGUgPSBhcnJbaV07XG4gICAgICBBcnJheS5pc0FycmF5KGVsZSkgPyBmbGF0KGVsZSwgcmVzdWx0KSA6IGVsZSAhPT0gdm9pZCAwICYmIHJlc3VsdC5wdXNoKGVsZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGZsYXQoYXJncyk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoYXN0LCBvcHRpb25zID0ge30pID0+IHtcbiAgbGV0IHN0cmluZ2lmeSA9IChub2RlLCBwYXJlbnQgPSB7fSkgPT4ge1xuICAgIGxldCBpbnZhbGlkQmxvY2sgPSBvcHRpb25zLmVzY2FwZUludmFsaWQgJiYgdXRpbHMuaXNJbnZhbGlkQnJhY2UocGFyZW50KTtcbiAgICBsZXQgaW52YWxpZE5vZGUgPSBub2RlLmludmFsaWQgPT09IHRydWUgJiYgb3B0aW9ucy5lc2NhcGVJbnZhbGlkID09PSB0cnVlO1xuICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICBpZiAoKGludmFsaWRCbG9jayB8fCBpbnZhbGlkTm9kZSkgJiYgdXRpbHMuaXNPcGVuT3JDbG9zZShub2RlKSkge1xuICAgICAgICByZXR1cm4gJ1xcXFwnICsgbm9kZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5ub2Rlcykge1xuICAgICAgZm9yIChsZXQgY2hpbGQgb2Ygbm9kZS5ub2Rlcykge1xuICAgICAgICBvdXRwdXQgKz0gc3RyaW5naWZ5KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICByZXR1cm4gc3RyaW5naWZ5KGFzdCk7XG59O1xuXG4iLCIvKiFcbiAqIGlzLW51bWJlciA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtbnVtYmVyPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obnVtKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBudW0gLSBudW0gPT09IDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnICYmIG51bS50cmltKCkgIT09ICcnKSB7XG4gICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSA/IE51bWJlci5pc0Zpbml0ZSgrbnVtKSA6IGlzRmluaXRlKCtudW0pO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCIvKiFcbiAqIHRvLXJlZ2V4LXJhbmdlIDxodHRwczovL2dpdGh1Yi5jb20vbWljcm9tYXRjaC90by1yZWdleC1yYW5nZT5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc051bWJlciA9IHJlcXVpcmUoJ2lzLW51bWJlcicpO1xuXG5jb25zdCB0b1JlZ2V4UmFuZ2UgPSAobWluLCBtYXgsIG9wdGlvbnMpID0+IHtcbiAgaWYgKGlzTnVtYmVyKG1pbikgPT09IGZhbHNlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9SZWdleFJhbmdlOiBleHBlY3RlZCB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBudW1iZXInKTtcbiAgfVxuXG4gIGlmIChtYXggPT09IHZvaWQgMCB8fCBtaW4gPT09IG1heCkge1xuICAgIHJldHVybiBTdHJpbmcobWluKTtcbiAgfVxuXG4gIGlmIChpc051bWJlcihtYXgpID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RvUmVnZXhSYW5nZTogZXhwZWN0ZWQgdGhlIHNlY29uZCBhcmd1bWVudCB0byBiZSBhIG51bWJlci4nKTtcbiAgfVxuXG4gIGxldCBvcHRzID0geyByZWxheFplcm9zOiB0cnVlLCAuLi5vcHRpb25zIH07XG4gIGlmICh0eXBlb2Ygb3B0cy5zdHJpY3RaZXJvcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0cy5yZWxheFplcm9zID0gb3B0cy5zdHJpY3RaZXJvcyA9PT0gZmFsc2U7XG4gIH1cblxuICBsZXQgcmVsYXggPSBTdHJpbmcob3B0cy5yZWxheFplcm9zKTtcbiAgbGV0IHNob3J0aGFuZCA9IFN0cmluZyhvcHRzLnNob3J0aGFuZCk7XG4gIGxldCBjYXB0dXJlID0gU3RyaW5nKG9wdHMuY2FwdHVyZSk7XG4gIGxldCB3cmFwID0gU3RyaW5nKG9wdHMud3JhcCk7XG4gIGxldCBjYWNoZUtleSA9IG1pbiArICc6JyArIG1heCArICc9JyArIHJlbGF4ICsgc2hvcnRoYW5kICsgY2FwdHVyZSArIHdyYXA7XG5cbiAgaWYgKHRvUmVnZXhSYW5nZS5jYWNoZS5oYXNPd25Qcm9wZXJ0eShjYWNoZUtleSkpIHtcbiAgICByZXR1cm4gdG9SZWdleFJhbmdlLmNhY2hlW2NhY2hlS2V5XS5yZXN1bHQ7XG4gIH1cblxuICBsZXQgYSA9IE1hdGgubWluKG1pbiwgbWF4KTtcbiAgbGV0IGIgPSBNYXRoLm1heChtaW4sIG1heCk7XG5cbiAgaWYgKE1hdGguYWJzKGEgLSBiKSA9PT0gMSkge1xuICAgIGxldCByZXN1bHQgPSBtaW4gKyAnfCcgKyBtYXg7XG4gICAgaWYgKG9wdHMuY2FwdHVyZSkge1xuICAgICAgcmV0dXJuIGAoJHtyZXN1bHR9KWA7XG4gICAgfVxuICAgIGlmIChvcHRzLndyYXAgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gYCg/OiR7cmVzdWx0fSlgO1xuICB9XG5cbiAgbGV0IGlzUGFkZGVkID0gaGFzUGFkZGluZyhtaW4pIHx8IGhhc1BhZGRpbmcobWF4KTtcbiAgbGV0IHN0YXRlID0geyBtaW4sIG1heCwgYSwgYiB9O1xuICBsZXQgcG9zaXRpdmVzID0gW107XG4gIGxldCBuZWdhdGl2ZXMgPSBbXTtcblxuICBpZiAoaXNQYWRkZWQpIHtcbiAgICBzdGF0ZS5pc1BhZGRlZCA9IGlzUGFkZGVkO1xuICAgIHN0YXRlLm1heExlbiA9IFN0cmluZyhzdGF0ZS5tYXgpLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChhIDwgMCkge1xuICAgIGxldCBuZXdNaW4gPSBiIDwgMCA/IE1hdGguYWJzKGIpIDogMTtcbiAgICBuZWdhdGl2ZXMgPSBzcGxpdFRvUGF0dGVybnMobmV3TWluLCBNYXRoLmFicyhhKSwgc3RhdGUsIG9wdHMpO1xuICAgIGEgPSBzdGF0ZS5hID0gMDtcbiAgfVxuXG4gIGlmIChiID49IDApIHtcbiAgICBwb3NpdGl2ZXMgPSBzcGxpdFRvUGF0dGVybnMoYSwgYiwgc3RhdGUsIG9wdHMpO1xuICB9XG5cbiAgc3RhdGUubmVnYXRpdmVzID0gbmVnYXRpdmVzO1xuICBzdGF0ZS5wb3NpdGl2ZXMgPSBwb3NpdGl2ZXM7XG4gIHN0YXRlLnJlc3VsdCA9IGNvbGxhdGVQYXR0ZXJucyhuZWdhdGl2ZXMsIHBvc2l0aXZlcywgb3B0cyk7XG5cbiAgaWYgKG9wdHMuY2FwdHVyZSA9PT0gdHJ1ZSkge1xuICAgIHN0YXRlLnJlc3VsdCA9IGAoJHtzdGF0ZS5yZXN1bHR9KWA7XG4gIH0gZWxzZSBpZiAob3B0cy53cmFwICE9PSBmYWxzZSAmJiAocG9zaXRpdmVzLmxlbmd0aCArIG5lZ2F0aXZlcy5sZW5ndGgpID4gMSkge1xuICAgIHN0YXRlLnJlc3VsdCA9IGAoPzoke3N0YXRlLnJlc3VsdH0pYDtcbiAgfVxuXG4gIHRvUmVnZXhSYW5nZS5jYWNoZVtjYWNoZUtleV0gPSBzdGF0ZTtcbiAgcmV0dXJuIHN0YXRlLnJlc3VsdDtcbn07XG5cbmZ1bmN0aW9uIGNvbGxhdGVQYXR0ZXJucyhuZWcsIHBvcywgb3B0aW9ucykge1xuICBsZXQgb25seU5lZ2F0aXZlID0gZmlsdGVyUGF0dGVybnMobmVnLCBwb3MsICctJywgZmFsc2UsIG9wdGlvbnMpIHx8IFtdO1xuICBsZXQgb25seVBvc2l0aXZlID0gZmlsdGVyUGF0dGVybnMocG9zLCBuZWcsICcnLCBmYWxzZSwgb3B0aW9ucykgfHwgW107XG4gIGxldCBpbnRlcnNlY3RlZCA9IGZpbHRlclBhdHRlcm5zKG5lZywgcG9zLCAnLT8nLCB0cnVlLCBvcHRpb25zKSB8fCBbXTtcbiAgbGV0IHN1YnBhdHRlcm5zID0gb25seU5lZ2F0aXZlLmNvbmNhdChpbnRlcnNlY3RlZCkuY29uY2F0KG9ubHlQb3NpdGl2ZSk7XG4gIHJldHVybiBzdWJwYXR0ZXJucy5qb2luKCd8Jyk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0VG9SYW5nZXMobWluLCBtYXgpIHtcbiAgbGV0IG5pbmVzID0gMTtcbiAgbGV0IHplcm9zID0gMTtcblxuICBsZXQgc3RvcCA9IGNvdW50TmluZXMobWluLCBuaW5lcyk7XG4gIGxldCBzdG9wcyA9IG5ldyBTZXQoW21heF0pO1xuXG4gIHdoaWxlIChtaW4gPD0gc3RvcCAmJiBzdG9wIDw9IG1heCkge1xuICAgIHN0b3BzLmFkZChzdG9wKTtcbiAgICBuaW5lcyArPSAxO1xuICAgIHN0b3AgPSBjb3VudE5pbmVzKG1pbiwgbmluZXMpO1xuICB9XG5cbiAgc3RvcCA9IGNvdW50WmVyb3MobWF4ICsgMSwgemVyb3MpIC0gMTtcblxuICB3aGlsZSAobWluIDwgc3RvcCAmJiBzdG9wIDw9IG1heCkge1xuICAgIHN0b3BzLmFkZChzdG9wKTtcbiAgICB6ZXJvcyArPSAxO1xuICAgIHN0b3AgPSBjb3VudFplcm9zKG1heCArIDEsIHplcm9zKSAtIDE7XG4gIH1cblxuICBzdG9wcyA9IFsuLi5zdG9wc107XG4gIHN0b3BzLnNvcnQoY29tcGFyZSk7XG4gIHJldHVybiBzdG9wcztcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgcmFuZ2UgdG8gYSByZWdleCBwYXR0ZXJuXG4gKiBAcGFyYW0ge051bWJlcn0gYHN0YXJ0YFxuICogQHBhcmFtIHtOdW1iZXJ9IGBzdG9wYFxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIHJhbmdlVG9QYXR0ZXJuKHN0YXJ0LCBzdG9wLCBvcHRpb25zKSB7XG4gIGlmIChzdGFydCA9PT0gc3RvcCkge1xuICAgIHJldHVybiB7IHBhdHRlcm46IHN0YXJ0LCBjb3VudDogW10sIGRpZ2l0czogMCB9O1xuICB9XG5cbiAgbGV0IHppcHBlZCA9IHppcChzdGFydCwgc3RvcCk7XG4gIGxldCBkaWdpdHMgPSB6aXBwZWQubGVuZ3RoO1xuICBsZXQgcGF0dGVybiA9ICcnO1xuICBsZXQgY291bnQgPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlnaXRzOyBpKyspIHtcbiAgICBsZXQgW3N0YXJ0RGlnaXQsIHN0b3BEaWdpdF0gPSB6aXBwZWRbaV07XG5cbiAgICBpZiAoc3RhcnREaWdpdCA9PT0gc3RvcERpZ2l0KSB7XG4gICAgICBwYXR0ZXJuICs9IHN0YXJ0RGlnaXQ7XG5cbiAgICB9IGVsc2UgaWYgKHN0YXJ0RGlnaXQgIT09ICcwJyB8fCBzdG9wRGlnaXQgIT09ICc5Jykge1xuICAgICAgcGF0dGVybiArPSB0b0NoYXJhY3RlckNsYXNzKHN0YXJ0RGlnaXQsIHN0b3BEaWdpdCwgb3B0aW9ucyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH1cblxuICBpZiAoY291bnQpIHtcbiAgICBwYXR0ZXJuICs9IG9wdGlvbnMuc2hvcnRoYW5kID09PSB0cnVlID8gJ1xcXFxkJyA6ICdbMC05XSc7XG4gIH1cblxuICByZXR1cm4geyBwYXR0ZXJuLCBjb3VudDogW2NvdW50XSwgZGlnaXRzIH07XG59XG5cbmZ1bmN0aW9uIHNwbGl0VG9QYXR0ZXJucyhtaW4sIG1heCwgdG9rLCBvcHRpb25zKSB7XG4gIGxldCByYW5nZXMgPSBzcGxpdFRvUmFuZ2VzKG1pbiwgbWF4KTtcbiAgbGV0IHRva2VucyA9IFtdO1xuICBsZXQgc3RhcnQgPSBtaW47XG4gIGxldCBwcmV2O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG1heCA9IHJhbmdlc1tpXTtcbiAgICBsZXQgb2JqID0gcmFuZ2VUb1BhdHRlcm4oU3RyaW5nKHN0YXJ0KSwgU3RyaW5nKG1heCksIG9wdGlvbnMpO1xuICAgIGxldCB6ZXJvcyA9ICcnO1xuXG4gICAgaWYgKCF0b2suaXNQYWRkZWQgJiYgcHJldiAmJiBwcmV2LnBhdHRlcm4gPT09IG9iai5wYXR0ZXJuKSB7XG4gICAgICBpZiAocHJldi5jb3VudC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHByZXYuY291bnQucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHByZXYuY291bnQucHVzaChvYmouY291bnRbMF0pO1xuICAgICAgcHJldi5zdHJpbmcgPSBwcmV2LnBhdHRlcm4gKyB0b1F1YW50aWZpZXIocHJldi5jb3VudCk7XG4gICAgICBzdGFydCA9IG1heCArIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodG9rLmlzUGFkZGVkKSB7XG4gICAgICB6ZXJvcyA9IHBhZFplcm9zKG1heCwgdG9rLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBvYmouc3RyaW5nID0gemVyb3MgKyBvYmoucGF0dGVybiArIHRvUXVhbnRpZmllcihvYmouY291bnQpO1xuICAgIHRva2Vucy5wdXNoKG9iaik7XG4gICAgc3RhcnQgPSBtYXggKyAxO1xuICAgIHByZXYgPSBvYmo7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJQYXR0ZXJucyhhcnIsIGNvbXBhcmlzb24sIHByZWZpeCwgaW50ZXJzZWN0aW9uLCBvcHRpb25zKSB7XG4gIGxldCByZXN1bHQgPSBbXTtcblxuICBmb3IgKGxldCBlbGUgb2YgYXJyKSB7XG4gICAgbGV0IHsgc3RyaW5nIH0gPSBlbGU7XG5cbiAgICAvLyBvbmx5IHB1c2ggaWYgX2JvdGhfIGFyZSBuZWdhdGl2ZS4uLlxuICAgIGlmICghaW50ZXJzZWN0aW9uICYmICFjb250YWlucyhjb21wYXJpc29uLCAnc3RyaW5nJywgc3RyaW5nKSkge1xuICAgICAgcmVzdWx0LnB1c2gocHJlZml4ICsgc3RyaW5nKTtcbiAgICB9XG5cbiAgICAvLyBvciBfYm90aF8gYXJlIHBvc2l0aXZlXG4gICAgaWYgKGludGVyc2VjdGlvbiAmJiBjb250YWlucyhjb21wYXJpc29uLCAnc3RyaW5nJywgc3RyaW5nKSkge1xuICAgICAgcmVzdWx0LnB1c2gocHJlZml4ICsgc3RyaW5nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBaaXAgc3RyaW5nc1xuICovXG5cbmZ1bmN0aW9uIHppcChhLCBiKSB7XG4gIGxldCBhcnIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSBhcnIucHVzaChbYVtpXSwgYltpXV0pO1xuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGEgPiBiID8gMSA6IGIgPiBhID8gLTEgOiAwO1xufVxuXG5mdW5jdGlvbiBjb250YWlucyhhcnIsIGtleSwgdmFsKSB7XG4gIHJldHVybiBhcnIuc29tZShlbGUgPT4gZWxlW2tleV0gPT09IHZhbCk7XG59XG5cbmZ1bmN0aW9uIGNvdW50TmluZXMobWluLCBsZW4pIHtcbiAgcmV0dXJuIE51bWJlcihTdHJpbmcobWluKS5zbGljZSgwLCAtbGVuKSArICc5Jy5yZXBlYXQobGVuKSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50WmVyb3MoaW50ZWdlciwgemVyb3MpIHtcbiAgcmV0dXJuIGludGVnZXIgLSAoaW50ZWdlciAlIE1hdGgucG93KDEwLCB6ZXJvcykpO1xufVxuXG5mdW5jdGlvbiB0b1F1YW50aWZpZXIoZGlnaXRzKSB7XG4gIGxldCBbc3RhcnQgPSAwLCBzdG9wID0gJyddID0gZGlnaXRzO1xuICBpZiAoc3RvcCB8fCBzdGFydCA+IDEpIHtcbiAgICByZXR1cm4gYHske3N0YXJ0ICsgKHN0b3AgPyAnLCcgKyBzdG9wIDogJycpfX1gO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gdG9DaGFyYWN0ZXJDbGFzcyhhLCBiLCBvcHRpb25zKSB7XG4gIHJldHVybiBgWyR7YX0keyhiIC0gYSA9PT0gMSkgPyAnJyA6ICctJ30ke2J9XWA7XG59XG5cbmZ1bmN0aW9uIGhhc1BhZGRpbmcoc3RyKSB7XG4gIHJldHVybiAvXi0/KDArKVxcZC8udGVzdChzdHIpO1xufVxuXG5mdW5jdGlvbiBwYWRaZXJvcyh2YWx1ZSwgdG9rLCBvcHRpb25zKSB7XG4gIGlmICghdG9rLmlzUGFkZGVkKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgbGV0IGRpZmYgPSBNYXRoLmFicyh0b2subWF4TGVuIC0gU3RyaW5nKHZhbHVlKS5sZW5ndGgpO1xuICBsZXQgcmVsYXggPSBvcHRpb25zLnJlbGF4WmVyb3MgIT09IGZhbHNlO1xuXG4gIHN3aXRjaCAoZGlmZikge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiAnJztcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gcmVsYXggPyAnMD8nIDogJzAnO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiByZWxheCA/ICcwezAsMn0nIDogJzAwJztcbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gcmVsYXggPyBgMHswLCR7ZGlmZn19YCA6IGAweyR7ZGlmZn19YDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDYWNoZVxuICovXG5cbnRvUmVnZXhSYW5nZS5jYWNoZSA9IHt9O1xudG9SZWdleFJhbmdlLmNsZWFyQ2FjaGUgPSAoKSA9PiAodG9SZWdleFJhbmdlLmNhY2hlID0ge30pO1xuXG4vKipcbiAqIEV4cG9zZSBgdG9SZWdleFJhbmdlYFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdG9SZWdleFJhbmdlO1xuIiwiLyohXG4gKiBmaWxsLXJhbmdlIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9maWxsLXJhbmdlPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBKb24gU2NobGlua2VydC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCB0b1JlZ2V4UmFuZ2UgPSByZXF1aXJlKCd0by1yZWdleC1yYW5nZScpO1xuXG5jb25zdCBpc09iamVjdCA9IHZhbCA9PiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkodmFsKTtcblxuY29uc3QgdHJhbnNmb3JtID0gdG9OdW1iZXIgPT4ge1xuICByZXR1cm4gdmFsdWUgPT4gdG9OdW1iZXIgPT09IHRydWUgPyBOdW1iZXIodmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn07XG5cbmNvbnN0IGlzVmFsaWRWYWx1ZSA9IHZhbHVlID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgIT09ICcnKTtcbn07XG5cbmNvbnN0IGlzTnVtYmVyID0gbnVtID0+IE51bWJlci5pc0ludGVnZXIoK251bSk7XG5cbmNvbnN0IHplcm9zID0gaW5wdXQgPT4ge1xuICBsZXQgdmFsdWUgPSBgJHtpbnB1dH1gO1xuICBsZXQgaW5kZXggPSAtMTtcbiAgaWYgKHZhbHVlWzBdID09PSAnLScpIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gIGlmICh2YWx1ZSA9PT0gJzAnKSByZXR1cm4gZmFsc2U7XG4gIHdoaWxlICh2YWx1ZVsrK2luZGV4XSA9PT0gJzAnKTtcbiAgcmV0dXJuIGluZGV4ID4gMDtcbn07XG5cbmNvbnN0IHN0cmluZ2lmeSA9IChzdGFydCwgZW5kLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnMuc3RyaW5naWZ5ID09PSB0cnVlO1xufTtcblxuY29uc3QgcGFkID0gKGlucHV0LCBtYXhMZW5ndGgsIHRvTnVtYmVyKSA9PiB7XG4gIGlmIChtYXhMZW5ndGggPiAwKSB7XG4gICAgbGV0IGRhc2ggPSBpbnB1dFswXSA9PT0gJy0nID8gJy0nIDogJyc7XG4gICAgaWYgKGRhc2gpIGlucHV0ID0gaW5wdXQuc2xpY2UoMSk7XG4gICAgaW5wdXQgPSAoZGFzaCArIGlucHV0LnBhZFN0YXJ0KGRhc2ggPyBtYXhMZW5ndGggLSAxIDogbWF4TGVuZ3RoLCAnMCcpKTtcbiAgfVxuICBpZiAodG9OdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIFN0cmluZyhpbnB1dCk7XG4gIH1cbiAgcmV0dXJuIGlucHV0O1xufTtcblxuY29uc3QgdG9NYXhMZW4gPSAoaW5wdXQsIG1heExlbmd0aCkgPT4ge1xuICBsZXQgbmVnYXRpdmUgPSBpbnB1dFswXSA9PT0gJy0nID8gJy0nIDogJyc7XG4gIGlmIChuZWdhdGl2ZSkge1xuICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMSk7XG4gICAgbWF4TGVuZ3RoLS07XG4gIH1cbiAgd2hpbGUgKGlucHV0Lmxlbmd0aCA8IG1heExlbmd0aCkgaW5wdXQgPSAnMCcgKyBpbnB1dDtcbiAgcmV0dXJuIG5lZ2F0aXZlID8gKCctJyArIGlucHV0KSA6IGlucHV0O1xufTtcblxuY29uc3QgdG9TZXF1ZW5jZSA9IChwYXJ0cywgb3B0aW9ucykgPT4ge1xuICBwYXJ0cy5uZWdhdGl2ZXMuc29ydCgoYSwgYikgPT4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDApO1xuICBwYXJ0cy5wb3NpdGl2ZXMuc29ydCgoYSwgYikgPT4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDApO1xuXG4gIGxldCBwcmVmaXggPSBvcHRpb25zLmNhcHR1cmUgPyAnJyA6ICc/Oic7XG4gIGxldCBwb3NpdGl2ZXMgPSAnJztcbiAgbGV0IG5lZ2F0aXZlcyA9ICcnO1xuICBsZXQgcmVzdWx0O1xuXG4gIGlmIChwYXJ0cy5wb3NpdGl2ZXMubGVuZ3RoKSB7XG4gICAgcG9zaXRpdmVzID0gcGFydHMucG9zaXRpdmVzLmpvaW4oJ3wnKTtcbiAgfVxuXG4gIGlmIChwYXJ0cy5uZWdhdGl2ZXMubGVuZ3RoKSB7XG4gICAgbmVnYXRpdmVzID0gYC0oJHtwcmVmaXh9JHtwYXJ0cy5uZWdhdGl2ZXMuam9pbignfCcpfSlgO1xuICB9XG5cbiAgaWYgKHBvc2l0aXZlcyAmJiBuZWdhdGl2ZXMpIHtcbiAgICByZXN1bHQgPSBgJHtwb3NpdGl2ZXN9fCR7bmVnYXRpdmVzfWA7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gcG9zaXRpdmVzIHx8IG5lZ2F0aXZlcztcbiAgfVxuXG4gIGlmIChvcHRpb25zLndyYXApIHtcbiAgICByZXR1cm4gYCgke3ByZWZpeH0ke3Jlc3VsdH0pYDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCB0b1JhbmdlID0gKGEsIGIsIGlzTnVtYmVycywgb3B0aW9ucykgPT4ge1xuICBpZiAoaXNOdW1iZXJzKSB7XG4gICAgcmV0dXJuIHRvUmVnZXhSYW5nZShhLCBiLCB7IHdyYXA6IGZhbHNlLCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgbGV0IHN0YXJ0ID0gU3RyaW5nLmZyb21DaGFyQ29kZShhKTtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBzdGFydDtcblxuICBsZXQgc3RvcCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYik7XG4gIHJldHVybiBgWyR7c3RhcnR9LSR7c3RvcH1dYDtcbn07XG5cbmNvbnN0IHRvUmVnZXggPSAoc3RhcnQsIGVuZCwgb3B0aW9ucykgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShzdGFydCkpIHtcbiAgICBsZXQgd3JhcCA9IG9wdGlvbnMud3JhcCA9PT0gdHJ1ZTtcbiAgICBsZXQgcHJlZml4ID0gb3B0aW9ucy5jYXB0dXJlID8gJycgOiAnPzonO1xuICAgIHJldHVybiB3cmFwID8gYCgke3ByZWZpeH0ke3N0YXJ0LmpvaW4oJ3wnKX0pYCA6IHN0YXJ0LmpvaW4oJ3wnKTtcbiAgfVxuICByZXR1cm4gdG9SZWdleFJhbmdlKHN0YXJ0LCBlbmQsIG9wdGlvbnMpO1xufTtcblxuY29uc3QgcmFuZ2VFcnJvciA9ICguLi5hcmdzKSA9PiB7XG4gIHJldHVybiBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCByYW5nZSBhcmd1bWVudHM6ICcgKyB1dGlsLmluc3BlY3QoLi4uYXJncykpO1xufTtcblxuY29uc3QgaW52YWxpZFJhbmdlID0gKHN0YXJ0LCBlbmQsIG9wdGlvbnMpID0+IHtcbiAgaWYgKG9wdGlvbnMuc3RyaWN0UmFuZ2VzID09PSB0cnVlKSB0aHJvdyByYW5nZUVycm9yKFtzdGFydCwgZW5kXSk7XG4gIHJldHVybiBbXTtcbn07XG5cbmNvbnN0IGludmFsaWRTdGVwID0gKHN0ZXAsIG9wdGlvbnMpID0+IHtcbiAgaWYgKG9wdGlvbnMuc3RyaWN0UmFuZ2VzID09PSB0cnVlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgc3RlcCBcIiR7c3RlcH1cIiB0byBiZSBhIG51bWJlcmApO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5cbmNvbnN0IGZpbGxOdW1iZXJzID0gKHN0YXJ0LCBlbmQsIHN0ZXAgPSAxLCBvcHRpb25zID0ge30pID0+IHtcbiAgbGV0IGEgPSBOdW1iZXIoc3RhcnQpO1xuICBsZXQgYiA9IE51bWJlcihlbmQpO1xuXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihhKSB8fCAhTnVtYmVyLmlzSW50ZWdlcihiKSkge1xuICAgIGlmIChvcHRpb25zLnN0cmljdFJhbmdlcyA9PT0gdHJ1ZSkgdGhyb3cgcmFuZ2VFcnJvcihbc3RhcnQsIGVuZF0pO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vIGZpeCBuZWdhdGl2ZSB6ZXJvXG4gIGlmIChhID09PSAwKSBhID0gMDtcbiAgaWYgKGIgPT09IDApIGIgPSAwO1xuXG4gIGxldCBkZXNjZW5kaW5nID0gYSA+IGI7XG4gIGxldCBzdGFydFN0cmluZyA9IFN0cmluZyhzdGFydCk7XG4gIGxldCBlbmRTdHJpbmcgPSBTdHJpbmcoZW5kKTtcbiAgbGV0IHN0ZXBTdHJpbmcgPSBTdHJpbmcoc3RlcCk7XG4gIHN0ZXAgPSBNYXRoLm1heChNYXRoLmFicyhzdGVwKSwgMSk7XG5cbiAgbGV0IHBhZGRlZCA9IHplcm9zKHN0YXJ0U3RyaW5nKSB8fCB6ZXJvcyhlbmRTdHJpbmcpIHx8IHplcm9zKHN0ZXBTdHJpbmcpO1xuICBsZXQgbWF4TGVuID0gcGFkZGVkID8gTWF0aC5tYXgoc3RhcnRTdHJpbmcubGVuZ3RoLCBlbmRTdHJpbmcubGVuZ3RoLCBzdGVwU3RyaW5nLmxlbmd0aCkgOiAwO1xuICBsZXQgdG9OdW1iZXIgPSBwYWRkZWQgPT09IGZhbHNlICYmIHN0cmluZ2lmeShzdGFydCwgZW5kLCBvcHRpb25zKSA9PT0gZmFsc2U7XG4gIGxldCBmb3JtYXQgPSBvcHRpb25zLnRyYW5zZm9ybSB8fCB0cmFuc2Zvcm0odG9OdW1iZXIpO1xuXG4gIGlmIChvcHRpb25zLnRvUmVnZXggJiYgc3RlcCA9PT0gMSkge1xuICAgIHJldHVybiB0b1JhbmdlKHRvTWF4TGVuKHN0YXJ0LCBtYXhMZW4pLCB0b01heExlbihlbmQsIG1heExlbiksIHRydWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgbGV0IHBhcnRzID0geyBuZWdhdGl2ZXM6IFtdLCBwb3NpdGl2ZXM6IFtdIH07XG4gIGxldCBwdXNoID0gbnVtID0+IHBhcnRzW251bSA8IDAgPyAnbmVnYXRpdmVzJyA6ICdwb3NpdGl2ZXMnXS5wdXNoKE1hdGguYWJzKG51bSkpO1xuICBsZXQgcmFuZ2UgPSBbXTtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB3aGlsZSAoZGVzY2VuZGluZyA/IGEgPj0gYiA6IGEgPD0gYikge1xuICAgIGlmIChvcHRpb25zLnRvUmVnZXggPT09IHRydWUgJiYgc3RlcCA+IDEpIHtcbiAgICAgIHB1c2goYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnB1c2gocGFkKGZvcm1hdChhLCBpbmRleCksIG1heExlbiwgdG9OdW1iZXIpKTtcbiAgICB9XG4gICAgYSA9IGRlc2NlbmRpbmcgPyBhIC0gc3RlcCA6IGEgKyBzdGVwO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAob3B0aW9ucy50b1JlZ2V4ID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHN0ZXAgPiAxXG4gICAgICA/IHRvU2VxdWVuY2UocGFydHMsIG9wdGlvbnMpXG4gICAgICA6IHRvUmVnZXgocmFuZ2UsIG51bGwsIHsgd3JhcDogZmFsc2UsIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59O1xuXG5jb25zdCBmaWxsTGV0dGVycyA9IChzdGFydCwgZW5kLCBzdGVwID0gMSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICgoIWlzTnVtYmVyKHN0YXJ0KSAmJiBzdGFydC5sZW5ndGggPiAxKSB8fCAoIWlzTnVtYmVyKGVuZCkgJiYgZW5kLmxlbmd0aCA+IDEpKSB7XG4gICAgcmV0dXJuIGludmFsaWRSYW5nZShzdGFydCwgZW5kLCBvcHRpb25zKTtcbiAgfVxuXG5cbiAgbGV0IGZvcm1hdCA9IG9wdGlvbnMudHJhbnNmb3JtIHx8ICh2YWwgPT4gU3RyaW5nLmZyb21DaGFyQ29kZSh2YWwpKTtcbiAgbGV0IGEgPSBgJHtzdGFydH1gLmNoYXJDb2RlQXQoMCk7XG4gIGxldCBiID0gYCR7ZW5kfWAuY2hhckNvZGVBdCgwKTtcblxuICBsZXQgZGVzY2VuZGluZyA9IGEgPiBiO1xuICBsZXQgbWluID0gTWF0aC5taW4oYSwgYik7XG4gIGxldCBtYXggPSBNYXRoLm1heChhLCBiKTtcblxuICBpZiAob3B0aW9ucy50b1JlZ2V4ICYmIHN0ZXAgPT09IDEpIHtcbiAgICByZXR1cm4gdG9SYW5nZShtaW4sIG1heCwgZmFsc2UsIG9wdGlvbnMpO1xuICB9XG5cbiAgbGV0IHJhbmdlID0gW107XG4gIGxldCBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKGRlc2NlbmRpbmcgPyBhID49IGIgOiBhIDw9IGIpIHtcbiAgICByYW5nZS5wdXNoKGZvcm1hdChhLCBpbmRleCkpO1xuICAgIGEgPSBkZXNjZW5kaW5nID8gYSAtIHN0ZXAgOiBhICsgc3RlcDtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMudG9SZWdleCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB0b1JlZ2V4KHJhbmdlLCBudWxsLCB7IHdyYXA6IGZhbHNlLCBvcHRpb25zIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJhbmdlO1xufTtcblxuY29uc3QgZmlsbCA9IChzdGFydCwgZW5kLCBzdGVwLCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKGVuZCA9PSBudWxsICYmIGlzVmFsaWRWYWx1ZShzdGFydCkpIHtcbiAgICByZXR1cm4gW3N0YXJ0XTtcbiAgfVxuXG4gIGlmICghaXNWYWxpZFZhbHVlKHN0YXJ0KSB8fCAhaXNWYWxpZFZhbHVlKGVuZCkpIHtcbiAgICByZXR1cm4gaW52YWxpZFJhbmdlKHN0YXJ0LCBlbmQsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdGVwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZpbGwoc3RhcnQsIGVuZCwgMSwgeyB0cmFuc2Zvcm06IHN0ZXAgfSk7XG4gIH1cblxuICBpZiAoaXNPYmplY3Qoc3RlcCkpIHtcbiAgICByZXR1cm4gZmlsbChzdGFydCwgZW5kLCAwLCBzdGVwKTtcbiAgfVxuXG4gIGxldCBvcHRzID0geyAuLi5vcHRpb25zIH07XG4gIGlmIChvcHRzLmNhcHR1cmUgPT09IHRydWUpIG9wdHMud3JhcCA9IHRydWU7XG4gIHN0ZXAgPSBzdGVwIHx8IG9wdHMuc3RlcCB8fCAxO1xuXG4gIGlmICghaXNOdW1iZXIoc3RlcCkpIHtcbiAgICBpZiAoc3RlcCAhPSBudWxsICYmICFpc09iamVjdChzdGVwKSkgcmV0dXJuIGludmFsaWRTdGVwKHN0ZXAsIG9wdHMpO1xuICAgIHJldHVybiBmaWxsKHN0YXJ0LCBlbmQsIDEsIHN0ZXApO1xuICB9XG5cbiAgaWYgKGlzTnVtYmVyKHN0YXJ0KSAmJiBpc051bWJlcihlbmQpKSB7XG4gICAgcmV0dXJuIGZpbGxOdW1iZXJzKHN0YXJ0LCBlbmQsIHN0ZXAsIG9wdHMpO1xuICB9XG5cbiAgcmV0dXJuIGZpbGxMZXR0ZXJzKHN0YXJ0LCBlbmQsIE1hdGgubWF4KE1hdGguYWJzKHN0ZXApLCAxKSwgb3B0cyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZpbGwgPSByZXF1aXJlKCdmaWxsLXJhbmdlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuY29uc3QgY29tcGlsZSA9IChhc3QsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgd2FsayA9IChub2RlLCBwYXJlbnQgPSB7fSkgPT4ge1xuICAgIGxldCBpbnZhbGlkQmxvY2sgPSB1dGlscy5pc0ludmFsaWRCcmFjZShwYXJlbnQpO1xuICAgIGxldCBpbnZhbGlkTm9kZSA9IG5vZGUuaW52YWxpZCA9PT0gdHJ1ZSAmJiBvcHRpb25zLmVzY2FwZUludmFsaWQgPT09IHRydWU7XG4gICAgbGV0IGludmFsaWQgPSBpbnZhbGlkQmxvY2sgPT09IHRydWUgfHwgaW52YWxpZE5vZGUgPT09IHRydWU7XG4gICAgbGV0IHByZWZpeCA9IG9wdGlvbnMuZXNjYXBlSW52YWxpZCA9PT0gdHJ1ZSA/ICdcXFxcJyA6ICcnO1xuICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgIGlmIChub2RlLmlzT3BlbiA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIG5vZGUudmFsdWU7XG4gICAgfVxuICAgIGlmIChub2RlLmlzQ2xvc2UgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyBub2RlLnZhbHVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLnR5cGUgPT09ICdvcGVuJykge1xuICAgICAgcmV0dXJuIGludmFsaWQgPyAocHJlZml4ICsgbm9kZS52YWx1ZSkgOiAnKCc7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2Nsb3NlJykge1xuICAgICAgcmV0dXJuIGludmFsaWQgPyAocHJlZml4ICsgbm9kZS52YWx1ZSkgOiAnKSc7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2NvbW1hJykge1xuICAgICAgcmV0dXJuIG5vZGUucHJldi50eXBlID09PSAnY29tbWEnID8gJycgOiAoaW52YWxpZCA/IG5vZGUudmFsdWUgOiAnfCcpO1xuICAgIH1cblxuICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5ub2RlcyAmJiBub2RlLnJhbmdlcyA+IDApIHtcbiAgICAgIGxldCBhcmdzID0gdXRpbHMucmVkdWNlKG5vZGUubm9kZXMpO1xuICAgICAgbGV0IHJhbmdlID0gZmlsbCguLi5hcmdzLCB7IC4uLm9wdGlvbnMsIHdyYXA6IGZhbHNlLCB0b1JlZ2V4OiB0cnVlIH0pO1xuXG4gICAgICBpZiAocmFuZ2UubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA+IDEgJiYgcmFuZ2UubGVuZ3RoID4gMSA/IGAoJHtyYW5nZX0pYCA6IHJhbmdlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlLm5vZGVzKSB7XG4gICAgICBmb3IgKGxldCBjaGlsZCBvZiBub2RlLm5vZGVzKSB7XG4gICAgICAgIG91dHB1dCArPSB3YWxrKGNoaWxkLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICByZXR1cm4gd2Fsayhhc3QpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb21waWxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmaWxsID0gcmVxdWlyZSgnZmlsbC1yYW5nZScpO1xuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5jb25zdCBhcHBlbmQgPSAocXVldWUgPSAnJywgc3Rhc2ggPSAnJywgZW5jbG9zZSA9IGZhbHNlKSA9PiB7XG4gIGxldCByZXN1bHQgPSBbXTtcblxuICBxdWV1ZSA9IFtdLmNvbmNhdChxdWV1ZSk7XG4gIHN0YXNoID0gW10uY29uY2F0KHN0YXNoKTtcblxuICBpZiAoIXN0YXNoLmxlbmd0aCkgcmV0dXJuIHF1ZXVlO1xuICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuICAgIHJldHVybiBlbmNsb3NlID8gdXRpbHMuZmxhdHRlbihzdGFzaCkubWFwKGVsZSA9PiBgeyR7ZWxlfX1gKSA6IHN0YXNoO1xuICB9XG5cbiAgZm9yIChsZXQgaXRlbSBvZiBxdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICBmb3IgKGxldCB2YWx1ZSBvZiBpdGVtKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFwcGVuZCh2YWx1ZSwgc3Rhc2gsIGVuY2xvc2UpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgZWxlIG9mIHN0YXNoKSB7XG4gICAgICAgIGlmIChlbmNsb3NlID09PSB0cnVlICYmIHR5cGVvZiBlbGUgPT09ICdzdHJpbmcnKSBlbGUgPSBgeyR7ZWxlfX1gO1xuICAgICAgICByZXN1bHQucHVzaChBcnJheS5pc0FycmF5KGVsZSkgPyBhcHBlbmQoaXRlbSwgZWxlLCBlbmNsb3NlKSA6IChpdGVtICsgZWxlKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB1dGlscy5mbGF0dGVuKHJlc3VsdCk7XG59O1xuXG5jb25zdCBleHBhbmQgPSAoYXN0LCBvcHRpb25zID0ge30pID0+IHtcbiAgbGV0IHJhbmdlTGltaXQgPSBvcHRpb25zLnJhbmdlTGltaXQgPT09IHZvaWQgMCA/IDEwMDAgOiBvcHRpb25zLnJhbmdlTGltaXQ7XG5cbiAgbGV0IHdhbGsgPSAobm9kZSwgcGFyZW50ID0ge30pID0+IHtcbiAgICBub2RlLnF1ZXVlID0gW107XG5cbiAgICBsZXQgcCA9IHBhcmVudDtcbiAgICBsZXQgcSA9IHBhcmVudC5xdWV1ZTtcblxuICAgIHdoaWxlIChwLnR5cGUgIT09ICdicmFjZScgJiYgcC50eXBlICE9PSAncm9vdCcgJiYgcC5wYXJlbnQpIHtcbiAgICAgIHAgPSBwLnBhcmVudDtcbiAgICAgIHEgPSBwLnF1ZXVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLmludmFsaWQgfHwgbm9kZS5kb2xsYXIpIHtcbiAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgc3RyaW5naWZ5KG5vZGUsIG9wdGlvbnMpKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2JyYWNlJyAmJiBub2RlLmludmFsaWQgIT09IHRydWUgJiYgbm9kZS5ub2Rlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgWyd7fSddKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUubm9kZXMgJiYgbm9kZS5yYW5nZXMgPiAwKSB7XG4gICAgICBsZXQgYXJncyA9IHV0aWxzLnJlZHVjZShub2RlLm5vZGVzKTtcblxuICAgICAgaWYgKHV0aWxzLmV4Y2VlZHNMaW1pdCguLi5hcmdzLCBvcHRpb25zLnN0ZXAsIHJhbmdlTGltaXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdleHBhbmRlZCBhcnJheSBsZW5ndGggZXhjZWVkcyByYW5nZSBsaW1pdC4gVXNlIG9wdGlvbnMucmFuZ2VMaW1pdCB0byBpbmNyZWFzZSBvciBkaXNhYmxlIHRoZSBsaW1pdC4nKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJhbmdlID0gZmlsbCguLi5hcmdzLCBvcHRpb25zKTtcbiAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmFuZ2UgPSBzdHJpbmdpZnkobm9kZSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgcmFuZ2UpKTtcbiAgICAgIG5vZGUubm9kZXMgPSBbXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZW5jbG9zZSA9IHV0aWxzLmVuY2xvc2VCcmFjZShub2RlKTtcbiAgICBsZXQgcXVldWUgPSBub2RlLnF1ZXVlO1xuICAgIGxldCBibG9jayA9IG5vZGU7XG5cbiAgICB3aGlsZSAoYmxvY2sudHlwZSAhPT0gJ2JyYWNlJyAmJiBibG9jay50eXBlICE9PSAncm9vdCcgJiYgYmxvY2sucGFyZW50KSB7XG4gICAgICBibG9jayA9IGJsb2NrLnBhcmVudDtcbiAgICAgIHF1ZXVlID0gYmxvY2sucXVldWU7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY2hpbGQgPSBub2RlLm5vZGVzW2ldO1xuXG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2NvbW1hJyAmJiBub2RlLnR5cGUgPT09ICdicmFjZScpIHtcbiAgICAgICAgaWYgKGkgPT09IDEpIHF1ZXVlLnB1c2goJycpO1xuICAgICAgICBxdWV1ZS5wdXNoKCcnKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgICAgIHEucHVzaChhcHBlbmQocS5wb3AoKSwgcXVldWUsIGVuY2xvc2UpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC52YWx1ZSAmJiBjaGlsZC50eXBlICE9PSAnb3BlbicpIHtcbiAgICAgICAgcXVldWUucHVzaChhcHBlbmQocXVldWUucG9wKCksIGNoaWxkLnZhbHVlKSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQubm9kZXMpIHtcbiAgICAgICAgd2FsayhjaGlsZCwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXVlO1xuICB9O1xuXG4gIHJldHVybiB1dGlscy5mbGF0dGVuKHdhbGsoYXN0KSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cGFuZDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCB7XG4gIE1BWF9MRU5HVEgsXG4gIENIQVJfQkFDS1NMQVNILCAvKiBcXCAqL1xuICBDSEFSX0JBQ0tUSUNLLCAvKiBgICovXG4gIENIQVJfQ09NTUEsIC8qICwgKi9cbiAgQ0hBUl9ET1QsIC8qIC4gKi9cbiAgQ0hBUl9MRUZUX1BBUkVOVEhFU0VTLCAvKiAoICovXG4gIENIQVJfUklHSFRfUEFSRU5USEVTRVMsIC8qICkgKi9cbiAgQ0hBUl9MRUZUX0NVUkxZX0JSQUNFLCAvKiB7ICovXG4gIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0UsIC8qIH0gKi9cbiAgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VULCAvKiBbICovXG4gIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQsIC8qIF0gKi9cbiAgQ0hBUl9ET1VCTEVfUVVPVEUsIC8qIFwiICovXG4gIENIQVJfU0lOR0xFX1FVT1RFLCAvKiAnICovXG4gIENIQVJfTk9fQlJFQUtfU1BBQ0UsXG4gIENIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBwYXJzZVxuICovXG5cbmNvbnN0IHBhcnNlID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xuICB9XG5cbiAgbGV0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgbWF4ID0gdHlwZW9mIG9wdHMubWF4TGVuZ3RoID09PSAnbnVtYmVyJyA/IE1hdGgubWluKE1BWF9MRU5HVEgsIG9wdHMubWF4TGVuZ3RoKSA6IE1BWF9MRU5HVEg7XG4gIGlmIChpbnB1dC5sZW5ndGggPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYElucHV0IGxlbmd0aCAoJHtpbnB1dC5sZW5ndGh9KSwgZXhjZWVkcyBtYXggY2hhcmFjdGVycyAoJHttYXh9KWApO1xuICB9XG5cbiAgbGV0IGFzdCA9IHsgdHlwZTogJ3Jvb3QnLCBpbnB1dCwgbm9kZXM6IFtdIH07XG4gIGxldCBzdGFjayA9IFthc3RdO1xuICBsZXQgYmxvY2sgPSBhc3Q7XG4gIGxldCBwcmV2ID0gYXN0O1xuICBsZXQgYnJhY2tldHMgPSAwO1xuICBsZXQgbGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgZGVwdGggPSAwO1xuICBsZXQgdmFsdWU7XG4gIGxldCBtZW1vID0ge307XG5cbiAgLyoqXG4gICAqIEhlbHBlcnNcbiAgICovXG5cbiAgY29uc3QgYWR2YW5jZSA9ICgpID0+IGlucHV0W2luZGV4KytdO1xuICBjb25zdCBwdXNoID0gbm9kZSA9PiB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ3RleHQnICYmIHByZXYudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgIHByZXYudHlwZSA9ICd0ZXh0JztcbiAgICB9XG5cbiAgICBpZiAocHJldiAmJiBwcmV2LnR5cGUgPT09ICd0ZXh0JyAmJiBub2RlLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgcHJldi52YWx1ZSArPSBub2RlLnZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJsb2NrLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgbm9kZS5wYXJlbnQgPSBibG9jaztcbiAgICBub2RlLnByZXYgPSBwcmV2O1xuICAgIHByZXYgPSBub2RlO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIHB1c2goeyB0eXBlOiAnYm9zJyB9KTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBibG9jayA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgIHZhbHVlID0gYWR2YW5jZSgpO1xuXG4gICAgLyoqXG4gICAgICogSW52YWxpZCBjaGFyc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX1pFUk9fV0lEVEhfTk9CUkVBS19TUEFDRSB8fCB2YWx1ZSA9PT0gQ0hBUl9OT19CUkVBS19TUEFDRSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlZCBjaGFyc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0JBQ0tTTEFTSCkge1xuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IChvcHRpb25zLmtlZXBFc2NhcGluZyA/IHZhbHVlIDogJycpICsgYWR2YW5jZSgpIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmlnaHQgc3F1YXJlIGJyYWNrZXQgKGxpdGVyYWwpOiAnXSdcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXFxcJyArIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGVmdCBzcXVhcmUgYnJhY2tldDogJ1snXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgYnJhY2tldHMrKztcblxuICAgICAgbGV0IGNsb3NlZCA9IHRydWU7XG4gICAgICBsZXQgbmV4dDtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoICYmIChuZXh0ID0gYWR2YW5jZSgpKSkge1xuICAgICAgICB2YWx1ZSArPSBuZXh0O1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgICAgICBicmFja2V0cysrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgdmFsdWUgKz0gYWR2YW5jZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgICAgICBicmFja2V0cy0tO1xuXG4gICAgICAgICAgaWYgKGJyYWNrZXRzID09PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJlbnRoZXNlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgIGJsb2NrID0gcHVzaCh7IHR5cGU6ICdwYXJlbicsIG5vZGVzOiBbXSB9KTtcbiAgICAgIHN0YWNrLnB1c2goYmxvY2spO1xuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfUklHSFRfUEFSRU5USEVTRVMpIHtcbiAgICAgIGlmIChibG9jay50eXBlICE9PSAncGFyZW4nKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJsb2NrID0gc3RhY2sucG9wKCk7XG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGJsb2NrID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBRdW90ZXM6ICd8XCJ8YFxuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0RPVUJMRV9RVU9URSB8fCB2YWx1ZSA9PT0gQ0hBUl9TSU5HTEVfUVVPVEUgfHwgdmFsdWUgPT09IENIQVJfQkFDS1RJQ0spIHtcbiAgICAgIGxldCBvcGVuID0gdmFsdWU7XG4gICAgICBsZXQgbmV4dDtcblxuICAgICAgaWYgKG9wdGlvbnMua2VlcFF1b3RlcyAhPT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGggJiYgKG5leHQgPSBhZHZhbmNlKCkpKSB7XG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX0JBQ0tTTEFTSCkge1xuICAgICAgICAgIHZhbHVlICs9IG5leHQgKyBhZHZhbmNlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCA9PT0gb3Blbikge1xuICAgICAgICAgIGlmIChvcHRpb25zLmtlZXBRdW90ZXMgPT09IHRydWUpIHZhbHVlICs9IG5leHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSArPSBuZXh0O1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZnQgY3VybHkgYnJhY2U6ICd7J1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgIGRlcHRoKys7XG5cbiAgICAgIGxldCBkb2xsYXIgPSBwcmV2LnZhbHVlICYmIHByZXYudmFsdWUuc2xpY2UoLTEpID09PSAnJCcgfHwgYmxvY2suZG9sbGFyID09PSB0cnVlO1xuICAgICAgbGV0IGJyYWNlID0ge1xuICAgICAgICB0eXBlOiAnYnJhY2UnLFxuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBjbG9zZTogZmFsc2UsXG4gICAgICAgIGRvbGxhcixcbiAgICAgICAgZGVwdGgsXG4gICAgICAgIGNvbW1hczogMCxcbiAgICAgICAgcmFuZ2VzOiAwLFxuICAgICAgICBub2RlczogW11cbiAgICAgIH07XG5cbiAgICAgIGJsb2NrID0gcHVzaChicmFjZSk7XG4gICAgICBzdGFjay5wdXNoKGJsb2NrKTtcbiAgICAgIHB1c2goeyB0eXBlOiAnb3BlbicsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmlnaHQgY3VybHkgYnJhY2U6ICd9J1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNFKSB7XG4gICAgICBpZiAoYmxvY2sudHlwZSAhPT0gJ2JyYWNlJykge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB0eXBlID0gJ2Nsb3NlJztcbiAgICAgIGJsb2NrID0gc3RhY2sucG9wKCk7XG4gICAgICBibG9jay5jbG9zZSA9IHRydWU7XG5cbiAgICAgIHB1c2goeyB0eXBlLCB2YWx1ZSB9KTtcbiAgICAgIGRlcHRoLS07XG5cbiAgICAgIGJsb2NrID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21tYTogJywnXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfQ09NTUEgJiYgZGVwdGggPiAwKSB7XG4gICAgICBpZiAoYmxvY2sucmFuZ2VzID4gMCkge1xuICAgICAgICBibG9jay5yYW5nZXMgPSAwO1xuICAgICAgICBsZXQgb3BlbiA9IGJsb2NrLm5vZGVzLnNoaWZ0KCk7XG4gICAgICAgIGJsb2NrLm5vZGVzID0gW29wZW4sIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogc3RyaW5naWZ5KGJsb2NrKSB9XTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdjb21tYScsIHZhbHVlIH0pO1xuICAgICAgYmxvY2suY29tbWFzKys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3Q6ICcuJ1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0RPVCAmJiBkZXB0aCA+IDAgJiYgYmxvY2suY29tbWFzID09PSAwKSB7XG4gICAgICBsZXQgc2libGluZ3MgPSBibG9jay5ub2RlcztcblxuICAgICAgaWYgKGRlcHRoID09PSAwIHx8IHNpYmxpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdkb3QnKSB7XG4gICAgICAgIGJsb2NrLnJhbmdlID0gW107XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIHByZXYudHlwZSA9ICdyYW5nZSc7XG5cbiAgICAgICAgaWYgKGJsb2NrLm5vZGVzLmxlbmd0aCAhPT0gMyAmJiBibG9jay5ub2Rlcy5sZW5ndGggIT09IDUpIHtcbiAgICAgICAgICBibG9jay5pbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICBibG9jay5yYW5nZXMgPSAwO1xuICAgICAgICAgIHByZXYudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJsb2NrLnJhbmdlcysrO1xuICAgICAgICBibG9jay5hcmdzID0gW107XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldi50eXBlID09PSAncmFuZ2UnKSB7XG4gICAgICAgIHNpYmxpbmdzLnBvcCgpO1xuXG4gICAgICAgIGxldCBiZWZvcmUgPSBzaWJsaW5nc1tzaWJsaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgYmVmb3JlLnZhbHVlICs9IHByZXYudmFsdWUgKyB2YWx1ZTtcbiAgICAgICAgcHJldiA9IGJlZm9yZTtcbiAgICAgICAgYmxvY2sucmFuZ2VzLS07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ2RvdCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGV4dFxuICAgICAqL1xuXG4gICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gIH1cblxuICAvLyBNYXJrIGltYmFsYW5jZWQgYnJhY2VzIGFuZCBicmFja2V0cyBhcyBpbnZhbGlkXG4gIGRvIHtcbiAgICBibG9jayA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGJsb2NrLnR5cGUgIT09ICdyb290Jykge1xuICAgICAgYmxvY2subm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgaWYgKCFub2RlLm5vZGVzKSB7XG4gICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ29wZW4nKSBub2RlLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2Nsb3NlJykgbm9kZS5pc0Nsb3NlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoIW5vZGUubm9kZXMpIG5vZGUudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICBub2RlLmludmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gZ2V0IHRoZSBsb2NhdGlvbiBvZiB0aGUgYmxvY2sgb24gcGFyZW50Lm5vZGVzIChibG9jaydzIHNpYmxpbmdzKVxuICAgICAgbGV0IHBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgbGV0IGluZGV4ID0gcGFyZW50Lm5vZGVzLmluZGV4T2YoYmxvY2spO1xuICAgICAgLy8gcmVwbGFjZSB0aGUgKGludmFsaWQpIGJsb2NrIHdpdGggaXQncyBub2Rlc1xuICAgICAgcGFyZW50Lm5vZGVzLnNwbGljZShpbmRleCwgMSwgLi4uYmxvY2subm9kZXMpO1xuICAgIH1cbiAgfSB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCk7XG5cbiAgcHVzaCh7IHR5cGU6ICdlb3MnIH0pO1xuICByZXR1cm4gYXN0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE1BWF9MRU5HVEg6IDEwMjQgKiA2NCxcblxuICAvLyBEaWdpdHNcbiAgQ0hBUl8wOiAnMCcsIC8qIDAgKi9cbiAgQ0hBUl85OiAnOScsIC8qIDkgKi9cblxuICAvLyBBbHBoYWJldCBjaGFycy5cbiAgQ0hBUl9VUFBFUkNBU0VfQTogJ0EnLCAvKiBBICovXG4gIENIQVJfTE9XRVJDQVNFX0E6ICdhJywgLyogYSAqL1xuICBDSEFSX1VQUEVSQ0FTRV9aOiAnWicsIC8qIFogKi9cbiAgQ0hBUl9MT1dFUkNBU0VfWjogJ3onLCAvKiB6ICovXG5cbiAgQ0hBUl9MRUZUX1BBUkVOVEhFU0VTOiAnKCcsIC8qICggKi9cbiAgQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUzogJyknLCAvKiApICovXG5cbiAgQ0hBUl9BU1RFUklTSzogJyonLCAvKiAqICovXG5cbiAgLy8gTm9uLWFscGhhYmV0aWMgY2hhcnMuXG4gIENIQVJfQU1QRVJTQU5EOiAnJicsIC8qICYgKi9cbiAgQ0hBUl9BVDogJ0AnLCAvKiBAICovXG4gIENIQVJfQkFDS1NMQVNIOiAnXFxcXCcsIC8qIFxcICovXG4gIENIQVJfQkFDS1RJQ0s6ICdgJywgLyogYCAqL1xuICBDSEFSX0NBUlJJQUdFX1JFVFVSTjogJ1xccicsIC8qIFxcciAqL1xuICBDSEFSX0NJUkNVTUZMRVhfQUNDRU5UOiAnXicsIC8qIF4gKi9cbiAgQ0hBUl9DT0xPTjogJzonLCAvKiA6ICovXG4gIENIQVJfQ09NTUE6ICcsJywgLyogLCAqL1xuICBDSEFSX0RPTExBUjogJyQnLCAvKiAuICovXG4gIENIQVJfRE9UOiAnLicsIC8qIC4gKi9cbiAgQ0hBUl9ET1VCTEVfUVVPVEU6ICdcIicsIC8qIFwiICovXG4gIENIQVJfRVFVQUw6ICc9JywgLyogPSAqL1xuICBDSEFSX0VYQ0xBTUFUSU9OX01BUks6ICchJywgLyogISAqL1xuICBDSEFSX0ZPUk1fRkVFRDogJ1xcZicsIC8qIFxcZiAqL1xuICBDSEFSX0ZPUldBUkRfU0xBU0g6ICcvJywgLyogLyAqL1xuICBDSEFSX0hBU0g6ICcjJywgLyogIyAqL1xuICBDSEFSX0hZUEhFTl9NSU5VUzogJy0nLCAvKiAtICovXG4gIENIQVJfTEVGVF9BTkdMRV9CUkFDS0VUOiAnPCcsIC8qIDwgKi9cbiAgQ0hBUl9MRUZUX0NVUkxZX0JSQUNFOiAneycsIC8qIHsgKi9cbiAgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUOiAnWycsIC8qIFsgKi9cbiAgQ0hBUl9MSU5FX0ZFRUQ6ICdcXG4nLCAvKiBcXG4gKi9cbiAgQ0hBUl9OT19CUkVBS19TUEFDRTogJ1xcdTAwQTAnLCAvKiBcXHUwMEEwICovXG4gIENIQVJfUEVSQ0VOVDogJyUnLCAvKiAlICovXG4gIENIQVJfUExVUzogJysnLCAvKiArICovXG4gIENIQVJfUVVFU1RJT05fTUFSSzogJz8nLCAvKiA/ICovXG4gIENIQVJfUklHSFRfQU5HTEVfQlJBQ0tFVDogJz4nLCAvKiA+ICovXG4gIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0U6ICd9JywgLyogfSAqL1xuICBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUOiAnXScsIC8qIF0gKi9cbiAgQ0hBUl9TRU1JQ09MT046ICc7JywgLyogOyAqL1xuICBDSEFSX1NJTkdMRV9RVU9URTogJ1xcJycsIC8qICcgKi9cbiAgQ0hBUl9TUEFDRTogJyAnLCAvKiAgICovXG4gIENIQVJfVEFCOiAnXFx0JywgLyogXFx0ICovXG4gIENIQVJfVU5ERVJTQ09SRTogJ18nLCAvKiBfICovXG4gIENIQVJfVkVSVElDQUxfTElORTogJ3wnLCAvKiB8ICovXG4gIENIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFOiAnXFx1RkVGRicgLyogXFx1RkVGRiAqL1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9saWIvc3RyaW5naWZ5Jyk7XG5jb25zdCBjb21waWxlID0gcmVxdWlyZSgnLi9saWIvY29tcGlsZScpO1xuY29uc3QgZXhwYW5kID0gcmVxdWlyZSgnLi9saWIvZXhwYW5kJyk7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vbGliL3BhcnNlJyk7XG5cbi8qKlxuICogRXhwYW5kIHRoZSBnaXZlbiBwYXR0ZXJuIG9yIGNyZWF0ZSBhIHJlZ2V4LWNvbXBhdGlibGUgc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBicmFjZXMgPSByZXF1aXJlKCdicmFjZXMnKTtcbiAqIGNvbnNvbGUubG9nKGJyYWNlcygne2EsYixjfScsIHsgY29tcGlsZTogdHJ1ZSB9KSk7IC8vPT4gWycoYXxifGMpJ11cbiAqIGNvbnNvbGUubG9nKGJyYWNlcygne2EsYixjfScpKTsgLy89PiBbJ2EnLCAnYicsICdjJ11cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmNvbnN0IGJyYWNlcyA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCBvdXRwdXQgPSBbXTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBmb3IgKGxldCBwYXR0ZXJuIG9mIGlucHV0KSB7XG4gICAgICBsZXQgcmVzdWx0ID0gYnJhY2VzLmNyZWF0ZShwYXR0ZXJuLCBvcHRpb25zKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goLi4ucmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IFtdLmNvbmNhdChicmFjZXMuY3JlYXRlKGlucHV0LCBvcHRpb25zKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmV4cGFuZCA9PT0gdHJ1ZSAmJiBvcHRpb25zLm5vZHVwZXMgPT09IHRydWUpIHtcbiAgICBvdXRwdXQgPSBbLi4ubmV3IFNldChvdXRwdXQpXTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgd2l0aCB0aGUgZ2l2ZW4gYG9wdGlvbnNgLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBicmFjZXMucGFyc2UocGF0dGVybiwgWywgb3B0aW9uc10pO1xuICogY29uc3QgYXN0ID0gYnJhY2VzLnBhcnNlKCdhL3tiLGN9L2QnKTtcbiAqIGNvbnNvbGUubG9nKGFzdCk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIEJyYWNlIHBhdHRlcm4gdG8gcGFyc2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gQVNUXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmJyYWNlcy5wYXJzZSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiBwYXJzZShpbnB1dCwgb3B0aW9ucyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGJyYWNlcyBzdHJpbmcgZnJvbSBhbiBBU1QsIG9yIGFuIEFTVCBub2RlLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBicmFjZXMgPSByZXF1aXJlKCdicmFjZXMnKTtcbiAqIGxldCBhc3QgPSBicmFjZXMucGFyc2UoJ2Zvby97YSxifS9iYXInKTtcbiAqIGNvbnNvbGUubG9nKHN0cmluZ2lmeShhc3Qubm9kZXNbMl0pKTsgLy89PiAne2EsYn0nXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIEJyYWNlIHBhdHRlcm4gb3IgQVNULlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuc3RyaW5naWZ5ID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KGJyYWNlcy5wYXJzZShpbnB1dCwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICB9XG4gIHJldHVybiBzdHJpbmdpZnkoaW5wdXQsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBDb21waWxlcyBhIGJyYWNlIHBhdHRlcm4gaW50byBhIHJlZ2V4LWNvbXBhdGlibGUsIG9wdGltaXplZCBzdHJpbmcuXG4gKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIG1haW4gW2JyYWNlc10oI2JyYWNlcykgZnVuY3Rpb24gYnkgZGVmYXVsdC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBjb25zb2xlLmxvZyhicmFjZXMuY29tcGlsZSgnYS97YixjfS9kJykpO1xuICogLy89PiBbJ2EvKGJ8YykvZCddXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIEJyYWNlIHBhdHRlcm4gb3IgQVNULlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuY29tcGlsZSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5wdXQgPSBicmFjZXMucGFyc2UoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG4gIHJldHVybiBjb21waWxlKGlucHV0LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogRXhwYW5kcyBhIGJyYWNlIHBhdHRlcm4gaW50byBhbiBhcnJheS4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZVxuICogbWFpbiBbYnJhY2VzXSgjYnJhY2VzKSBmdW5jdGlvbiB3aGVuIGBvcHRpb25zLmV4cGFuZGAgaXMgdHJ1ZS4gQmVmb3JlXG4gKiB1c2luZyB0aGlzIG1ldGhvZCBpdCdzIHJlY29tbWVuZGVkIHRoYXQgeW91IHJlYWQgdGhlIFtwZXJmb3JtYW5jZSBub3Rlc10oI3BlcmZvcm1hbmNlKSlcbiAqIGFuZCBhZHZhbnRhZ2VzIG9mIHVzaW5nIFsuY29tcGlsZV0oI2NvbXBpbGUpIGluc3RlYWQuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGJyYWNlcyA9IHJlcXVpcmUoJ2JyYWNlcycpO1xuICogY29uc29sZS5sb2coYnJhY2VzLmV4cGFuZCgnYS97YixjfS9kJykpO1xuICogLy89PiBbJ2EvYi9kJywgJ2EvYy9kJ107XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgQnJhY2UgcGF0dGVyblxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuZXhwYW5kID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICBpbnB1dCA9IGJyYWNlcy5wYXJzZShpbnB1dCwgb3B0aW9ucyk7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gZXhwYW5kKGlucHV0LCBvcHRpb25zKTtcblxuICAvLyBmaWx0ZXIgb3V0IGVtcHR5IHN0cmluZ3MgaWYgc3BlY2lmaWVkXG4gIGlmIChvcHRpb25zLm5vZW1wdHkgPT09IHRydWUpIHtcbiAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKEJvb2xlYW4pO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBkdXBsaWNhdGVzIGlmIHNwZWNpZmllZFxuICBpZiAob3B0aW9ucy5ub2R1cGVzID09PSB0cnVlKSB7XG4gICAgcmVzdWx0ID0gWy4uLm5ldyBTZXQocmVzdWx0KV07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBQcm9jZXNzZXMgYSBicmFjZSBwYXR0ZXJuIGFuZCByZXR1cm5zIGVpdGhlciBhbiBleHBhbmRlZCBhcnJheVxuICogKGlmIGBvcHRpb25zLmV4cGFuZGAgaXMgdHJ1ZSksIGEgaGlnaGx5IG9wdGltaXplZCByZWdleC1jb21wYXRpYmxlIHN0cmluZy5cbiAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGUgbWFpbiBbYnJhY2VzXSgjYnJhY2VzKSBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBjb25zb2xlLmxvZyhicmFjZXMuY3JlYXRlKCd1c2VyLXsyMDAuLjMwMH0vcHJvamVjdC17YSxiLGN9LXsxLi4xMH0nKSlcbiAqIC8vPT4gJ3VzZXItKDIwWzAtOV18MlsxLTldWzAtOV18MzAwKS9wcm9qZWN0LShhfGJ8YyktKFsxLTldfDEwKSdcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYCBCcmFjZSBwYXR0ZXJuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBleHBhbmRlZCB2YWx1ZXMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmJyYWNlcy5jcmVhdGUgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoaW5wdXQgPT09ICcnIHx8IGlucHV0Lmxlbmd0aCA8IDMpIHtcbiAgICByZXR1cm4gW2lucHV0XTtcbiAgfVxuXG4gcmV0dXJuIG9wdGlvbnMuZXhwYW5kICE9PSB0cnVlXG4gICAgPyBicmFjZXMuY29tcGlsZShpbnB1dCwgb3B0aW9ucylcbiAgICA6IGJyYWNlcy5leHBhbmQoaW5wdXQsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgXCJicmFjZXNcIlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gYnJhY2VzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgV0lOX1NMQVNIID0gJ1xcXFxcXFxcLyc7XG5jb25zdCBXSU5fTk9fU0xBU0ggPSBgW14ke1dJTl9TTEFTSH1dYDtcblxuLyoqXG4gKiBQb3NpeCBnbG9iIHJlZ2V4XG4gKi9cblxuY29uc3QgRE9UX0xJVEVSQUwgPSAnXFxcXC4nO1xuY29uc3QgUExVU19MSVRFUkFMID0gJ1xcXFwrJztcbmNvbnN0IFFNQVJLX0xJVEVSQUwgPSAnXFxcXD8nO1xuY29uc3QgU0xBU0hfTElURVJBTCA9ICdcXFxcLyc7XG5jb25zdCBPTkVfQ0hBUiA9ICcoPz0uKSc7XG5jb25zdCBRTUFSSyA9ICdbXi9dJztcbmNvbnN0IEVORF9BTkNIT1IgPSBgKD86JHtTTEFTSF9MSVRFUkFMfXwkKWA7XG5jb25zdCBTVEFSVF9BTkNIT1IgPSBgKD86Xnwke1NMQVNIX0xJVEVSQUx9KWA7XG5jb25zdCBET1RTX1NMQVNIID0gYCR7RE9UX0xJVEVSQUx9ezEsMn0ke0VORF9BTkNIT1J9YDtcbmNvbnN0IE5PX0RPVCA9IGAoPyEke0RPVF9MSVRFUkFMfSlgO1xuY29uc3QgTk9fRE9UUyA9IGAoPyEke1NUQVJUX0FOQ0hPUn0ke0RPVFNfU0xBU0h9KWA7XG5jb25zdCBOT19ET1RfU0xBU0ggPSBgKD8hJHtET1RfTElURVJBTH17MCwxfSR7RU5EX0FOQ0hPUn0pYDtcbmNvbnN0IE5PX0RPVFNfU0xBU0ggPSBgKD8hJHtET1RTX1NMQVNIfSlgO1xuY29uc3QgUU1BUktfTk9fRE9UID0gYFteLiR7U0xBU0hfTElURVJBTH1dYDtcbmNvbnN0IFNUQVIgPSBgJHtRTUFSS30qP2A7XG5cbmNvbnN0IFBPU0lYX0NIQVJTID0ge1xuICBET1RfTElURVJBTCxcbiAgUExVU19MSVRFUkFMLFxuICBRTUFSS19MSVRFUkFMLFxuICBTTEFTSF9MSVRFUkFMLFxuICBPTkVfQ0hBUixcbiAgUU1BUkssXG4gIEVORF9BTkNIT1IsXG4gIERPVFNfU0xBU0gsXG4gIE5PX0RPVCxcbiAgTk9fRE9UUyxcbiAgTk9fRE9UX1NMQVNILFxuICBOT19ET1RTX1NMQVNILFxuICBRTUFSS19OT19ET1QsXG4gIFNUQVIsXG4gIFNUQVJUX0FOQ0hPUlxufTtcblxuLyoqXG4gKiBXaW5kb3dzIGdsb2IgcmVnZXhcbiAqL1xuXG5jb25zdCBXSU5ET1dTX0NIQVJTID0ge1xuICAuLi5QT1NJWF9DSEFSUyxcblxuICBTTEFTSF9MSVRFUkFMOiBgWyR7V0lOX1NMQVNIfV1gLFxuICBRTUFSSzogV0lOX05PX1NMQVNILFxuICBTVEFSOiBgJHtXSU5fTk9fU0xBU0h9Kj9gLFxuICBET1RTX1NMQVNIOiBgJHtET1RfTElURVJBTH17MSwyfSg/Olske1dJTl9TTEFTSH1dfCQpYCxcbiAgTk9fRE9UOiBgKD8hJHtET1RfTElURVJBTH0pYCxcbiAgTk9fRE9UUzogYCg/ISg/Ol58WyR7V0lOX1NMQVNIfV0pJHtET1RfTElURVJBTH17MSwyfSg/Olske1dJTl9TTEFTSH1dfCQpKWAsXG4gIE5PX0RPVF9TTEFTSDogYCg/ISR7RE9UX0xJVEVSQUx9ezAsMX0oPzpbJHtXSU5fU0xBU0h9XXwkKSlgLFxuICBOT19ET1RTX1NMQVNIOiBgKD8hJHtET1RfTElURVJBTH17MSwyfSg/Olske1dJTl9TTEFTSH1dfCQpKWAsXG4gIFFNQVJLX05PX0RPVDogYFteLiR7V0lOX1NMQVNIfV1gLFxuICBTVEFSVF9BTkNIT1I6IGAoPzpefFske1dJTl9TTEFTSH1dKWAsXG4gIEVORF9BTkNIT1I6IGAoPzpbJHtXSU5fU0xBU0h9XXwkKWBcbn07XG5cbi8qKlxuICogUE9TSVggQnJhY2tldCBSZWdleFxuICovXG5cbmNvbnN0IFBPU0lYX1JFR0VYX1NPVVJDRSA9IHtcbiAgYWxudW06ICdhLXpBLVowLTknLFxuICBhbHBoYTogJ2EtekEtWicsXG4gIGFzY2lpOiAnXFxcXHgwMC1cXFxceDdGJyxcbiAgYmxhbms6ICcgXFxcXHQnLFxuICBjbnRybDogJ1xcXFx4MDAtXFxcXHgxRlxcXFx4N0YnLFxuICBkaWdpdDogJzAtOScsXG4gIGdyYXBoOiAnXFxcXHgyMS1cXFxceDdFJyxcbiAgbG93ZXI6ICdhLXonLFxuICBwcmludDogJ1xcXFx4MjAtXFxcXHg3RSAnLFxuICBwdW5jdDogJ1xcXFwtIVwiIyQlJlxcJygpXFxcXCorLC4vOjs8PT4/QFtcXFxcXV5fYHt8fX4nLFxuICBzcGFjZTogJyBcXFxcdFxcXFxyXFxcXG5cXFxcdlxcXFxmJyxcbiAgdXBwZXI6ICdBLVonLFxuICB3b3JkOiAnQS1aYS16MC05XycsXG4gIHhkaWdpdDogJ0EtRmEtZjAtOSdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBNQVhfTEVOR1RIOiAxMDI0ICogNjQsXG4gIFBPU0lYX1JFR0VYX1NPVVJDRSxcblxuICAvLyByZWd1bGFyIGV4cHJlc3Npb25zXG4gIFJFR0VYX0JBQ0tTTEFTSDogL1xcXFwoPyFbKis/XiR7fSh8KVtcXF1dKS9nLFxuICBSRUdFWF9OT05fU1BFQ0lBTF9DSEFSUzogL15bXkAhW1xcXS4sJCorP157fSgpfFxcXFwvXSsvLFxuICBSRUdFWF9TUEVDSUFMX0NIQVJTOiAvWy0qKz8uXiR7fSh8KVtcXF1dLyxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSU19CQUNLUkVGOiAvKFxcXFw/KSgoXFxXKShcXDMqKSkvZyxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSU19HTE9CQUw6IC8oWy0qKz8uXiR7fSh8KVtcXF1dKS9nLFxuICBSRUdFWF9SRU1PVkVfQkFDS1NMQVNIOiAvKD86XFxbLio/W15cXFxcXVxcXXxcXFxcKD89LikpL2csXG5cbiAgLy8gUmVwbGFjZSBnbG9icyB3aXRoIGVxdWl2YWxlbnQgcGF0dGVybnMgdG8gcmVkdWNlIHBhcnNpbmcgdGltZS5cbiAgUkVQTEFDRU1FTlRTOiB7XG4gICAgJyoqKic6ICcqJyxcbiAgICAnKiovKionOiAnKionLFxuICAgICcqKi8qKi8qKic6ICcqKidcbiAgfSxcblxuICAvLyBEaWdpdHNcbiAgQ0hBUl8wOiA0OCwgLyogMCAqL1xuICBDSEFSXzk6IDU3LCAvKiA5ICovXG5cbiAgLy8gQWxwaGFiZXQgY2hhcnMuXG4gIENIQVJfVVBQRVJDQVNFX0E6IDY1LCAvKiBBICovXG4gIENIQVJfTE9XRVJDQVNFX0E6IDk3LCAvKiBhICovXG4gIENIQVJfVVBQRVJDQVNFX1o6IDkwLCAvKiBaICovXG4gIENIQVJfTE9XRVJDQVNFX1o6IDEyMiwgLyogeiAqL1xuXG4gIENIQVJfTEVGVF9QQVJFTlRIRVNFUzogNDAsIC8qICggKi9cbiAgQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUzogNDEsIC8qICkgKi9cblxuICBDSEFSX0FTVEVSSVNLOiA0MiwgLyogKiAqL1xuXG4gIC8vIE5vbi1hbHBoYWJldGljIGNoYXJzLlxuICBDSEFSX0FNUEVSU0FORDogMzgsIC8qICYgKi9cbiAgQ0hBUl9BVDogNjQsIC8qIEAgKi9cbiAgQ0hBUl9CQUNLV0FSRF9TTEFTSDogOTIsIC8qIFxcICovXG4gIENIQVJfQ0FSUklBR0VfUkVUVVJOOiAxMywgLyogXFxyICovXG4gIENIQVJfQ0lSQ1VNRkxFWF9BQ0NFTlQ6IDk0LCAvKiBeICovXG4gIENIQVJfQ09MT046IDU4LCAvKiA6ICovXG4gIENIQVJfQ09NTUE6IDQ0LCAvKiAsICovXG4gIENIQVJfRE9UOiA0NiwgLyogLiAqL1xuICBDSEFSX0RPVUJMRV9RVU9URTogMzQsIC8qIFwiICovXG4gIENIQVJfRVFVQUw6IDYxLCAvKiA9ICovXG4gIENIQVJfRVhDTEFNQVRJT05fTUFSSzogMzMsIC8qICEgKi9cbiAgQ0hBUl9GT1JNX0ZFRUQ6IDEyLCAvKiBcXGYgKi9cbiAgQ0hBUl9GT1JXQVJEX1NMQVNIOiA0NywgLyogLyAqL1xuICBDSEFSX0dSQVZFX0FDQ0VOVDogOTYsIC8qIGAgKi9cbiAgQ0hBUl9IQVNIOiAzNSwgLyogIyAqL1xuICBDSEFSX0hZUEhFTl9NSU5VUzogNDUsIC8qIC0gKi9cbiAgQ0hBUl9MRUZUX0FOR0xFX0JSQUNLRVQ6IDYwLCAvKiA8ICovXG4gIENIQVJfTEVGVF9DVVJMWV9CUkFDRTogMTIzLCAvKiB7ICovXG4gIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVDogOTEsIC8qIFsgKi9cbiAgQ0hBUl9MSU5FX0ZFRUQ6IDEwLCAvKiBcXG4gKi9cbiAgQ0hBUl9OT19CUkVBS19TUEFDRTogMTYwLCAvKiBcXHUwMEEwICovXG4gIENIQVJfUEVSQ0VOVDogMzcsIC8qICUgKi9cbiAgQ0hBUl9QTFVTOiA0MywgLyogKyAqL1xuICBDSEFSX1FVRVNUSU9OX01BUks6IDYzLCAvKiA/ICovXG4gIENIQVJfUklHSFRfQU5HTEVfQlJBQ0tFVDogNjIsIC8qID4gKi9cbiAgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRTogMTI1LCAvKiB9ICovXG4gIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQ6IDkzLCAvKiBdICovXG4gIENIQVJfU0VNSUNPTE9OOiA1OSwgLyogOyAqL1xuICBDSEFSX1NJTkdMRV9RVU9URTogMzksIC8qICcgKi9cbiAgQ0hBUl9TUEFDRTogMzIsIC8qICAgKi9cbiAgQ0hBUl9UQUI6IDksIC8qIFxcdCAqL1xuICBDSEFSX1VOREVSU0NPUkU6IDk1LCAvKiBfICovXG4gIENIQVJfVkVSVElDQUxfTElORTogMTI0LCAvKiB8ICovXG4gIENIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFOiA2NTI3OSwgLyogXFx1RkVGRiAqL1xuXG4gIFNFUDogcGF0aC5zZXAsXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBFWFRHTE9CX0NIQVJTXG4gICAqL1xuXG4gIGV4dGdsb2JDaGFycyhjaGFycykge1xuICAgIHJldHVybiB7XG4gICAgICAnISc6IHsgdHlwZTogJ25lZ2F0ZScsIG9wZW46ICcoPzooPyEoPzonLCBjbG9zZTogYCkpJHtjaGFycy5TVEFSfSlgIH0sXG4gICAgICAnPyc6IHsgdHlwZTogJ3FtYXJrJywgb3BlbjogJyg/OicsIGNsb3NlOiAnKT8nIH0sXG4gICAgICAnKyc6IHsgdHlwZTogJ3BsdXMnLCBvcGVuOiAnKD86JywgY2xvc2U6ICcpKycgfSxcbiAgICAgICcqJzogeyB0eXBlOiAnc3RhcicsIG9wZW46ICcoPzonLCBjbG9zZTogJykqJyB9LFxuICAgICAgJ0AnOiB7IHR5cGU6ICdhdCcsIG9wZW46ICcoPzonLCBjbG9zZTogJyknIH1cbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGUgR0xPQl9DSEFSU1xuICAgKi9cblxuICBnbG9iQ2hhcnMod2luMzIpIHtcbiAgICByZXR1cm4gd2luMzIgPT09IHRydWUgPyBXSU5ET1dTX0NIQVJTIDogUE9TSVhfQ0hBUlM7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB3aW4zMiA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG5jb25zdCB7XG4gIFJFR0VYX0JBQ0tTTEFTSCxcbiAgUkVHRVhfUkVNT1ZFX0JBQ0tTTEFTSCxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSUyxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSU19HTE9CQUxcbn0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5leHBvcnRzLmlzT2JqZWN0ID0gdmFsID0+IHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWwpO1xuZXhwb3J0cy5oYXNSZWdleENoYXJzID0gc3RyID0+IFJFR0VYX1NQRUNJQUxfQ0hBUlMudGVzdChzdHIpO1xuZXhwb3J0cy5pc1JlZ2V4Q2hhciA9IHN0ciA9PiBzdHIubGVuZ3RoID09PSAxICYmIGV4cG9ydHMuaGFzUmVnZXhDaGFycyhzdHIpO1xuZXhwb3J0cy5lc2NhcGVSZWdleCA9IHN0ciA9PiBzdHIucmVwbGFjZShSRUdFWF9TUEVDSUFMX0NIQVJTX0dMT0JBTCwgJ1xcXFwkMScpO1xuZXhwb3J0cy50b1Bvc2l4U2xhc2hlcyA9IHN0ciA9PiBzdHIucmVwbGFjZShSRUdFWF9CQUNLU0xBU0gsICcvJyk7XG5cbmV4cG9ydHMucmVtb3ZlQmFja3NsYXNoZXMgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoUkVHRVhfUkVNT1ZFX0JBQ0tTTEFTSCwgbWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaCA9PT0gJ1xcXFwnID8gJycgOiBtYXRjaDtcbiAgfSk7XG59O1xuXG5leHBvcnRzLnN1cHBvcnRzTG9va2JlaGluZHMgPSAoKSA9PiB7XG4gIGNvbnN0IHNlZ3MgPSBwcm9jZXNzLnZlcnNpb24uc2xpY2UoMSkuc3BsaXQoJy4nKS5tYXAoTnVtYmVyKTtcbiAgaWYgKHNlZ3MubGVuZ3RoID09PSAzICYmIHNlZ3NbMF0gPj0gOSB8fCAoc2Vnc1swXSA9PT0gOCAmJiBzZWdzWzFdID49IDEwKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydHMuaXNXaW5kb3dzID0gb3B0aW9ucyA9PiB7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLndpbmRvd3MgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBvcHRpb25zLndpbmRvd3M7XG4gIH1cbiAgcmV0dXJuIHdpbjMyID09PSB0cnVlIHx8IHBhdGguc2VwID09PSAnXFxcXCc7XG59O1xuXG5leHBvcnRzLmVzY2FwZUxhc3QgPSAoaW5wdXQsIGNoYXIsIGxhc3RJZHgpID0+IHtcbiAgY29uc3QgaWR4ID0gaW5wdXQubGFzdEluZGV4T2YoY2hhciwgbGFzdElkeCk7XG4gIGlmIChpZHggPT09IC0xKSByZXR1cm4gaW5wdXQ7XG4gIGlmIChpbnB1dFtpZHggLSAxXSA9PT0gJ1xcXFwnKSByZXR1cm4gZXhwb3J0cy5lc2NhcGVMYXN0KGlucHV0LCBjaGFyLCBpZHggLSAxKTtcbiAgcmV0dXJuIGAke2lucHV0LnNsaWNlKDAsIGlkeCl9XFxcXCR7aW5wdXQuc2xpY2UoaWR4KX1gO1xufTtcblxuZXhwb3J0cy5yZW1vdmVQcmVmaXggPSAoaW5wdXQsIHN0YXRlID0ge30pID0+IHtcbiAgbGV0IG91dHB1dCA9IGlucHV0O1xuICBpZiAob3V0cHV0LnN0YXJ0c1dpdGgoJy4vJykpIHtcbiAgICBvdXRwdXQgPSBvdXRwdXQuc2xpY2UoMik7XG4gICAgc3RhdGUucHJlZml4ID0gJy4vJztcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuZXhwb3J0cy53cmFwT3V0cHV0ID0gKGlucHV0LCBzdGF0ZSA9IHt9LCBvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgcHJlcGVuZCA9IG9wdGlvbnMuY29udGFpbnMgPyAnJyA6ICdeJztcbiAgY29uc3QgYXBwZW5kID0gb3B0aW9ucy5jb250YWlucyA/ICcnIDogJyQnO1xuXG4gIGxldCBvdXRwdXQgPSBgJHtwcmVwZW5kfSg/OiR7aW5wdXR9KSR7YXBwZW5kfWA7XG4gIGlmIChzdGF0ZS5uZWdhdGVkID09PSB0cnVlKSB7XG4gICAgb3V0cHV0ID0gYCg/Ol4oPyEke291dHB1dH0pLiokKWA7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3Qge1xuICBDSEFSX0FTVEVSSVNLLCAgICAgICAgICAgICAvKiAqICovXG4gIENIQVJfQVQsICAgICAgICAgICAgICAgICAgIC8qIEAgKi9cbiAgQ0hBUl9CQUNLV0FSRF9TTEFTSCwgICAgICAgLyogXFwgKi9cbiAgQ0hBUl9DT01NQSwgICAgICAgICAgICAgICAgLyogLCAqL1xuICBDSEFSX0RPVCwgICAgICAgICAgICAgICAgICAvKiAuICovXG4gIENIQVJfRVhDTEFNQVRJT05fTUFSSywgICAgIC8qICEgKi9cbiAgQ0hBUl9GT1JXQVJEX1NMQVNILCAgICAgICAgLyogLyAqL1xuICBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UsICAgICAvKiB7ICovXG4gIENIQVJfTEVGVF9QQVJFTlRIRVNFUywgICAgIC8qICggKi9cbiAgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VULCAgLyogWyAqL1xuICBDSEFSX1BMVVMsICAgICAgICAgICAgICAgICAvKiArICovXG4gIENIQVJfUVVFU1RJT05fTUFSSywgICAgICAgIC8qID8gKi9cbiAgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSwgICAgLyogfSAqL1xuICBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTLCAgICAvKiApICovXG4gIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQgIC8qIF0gKi9cbn0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5jb25zdCBpc1BhdGhTZXBhcmF0b3IgPSBjb2RlID0+IHtcbiAgcmV0dXJuIGNvZGUgPT09IENIQVJfRk9SV0FSRF9TTEFTSCB8fCBjb2RlID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIO1xufTtcblxuY29uc3QgZGVwdGggPSB0b2tlbiA9PiB7XG4gIGlmICh0b2tlbi5pc1ByZWZpeCAhPT0gdHJ1ZSkge1xuICAgIHRva2VuLmRlcHRoID0gdG9rZW4uaXNHbG9ic3RhciA/IEluZmluaXR5IDogMTtcbiAgfVxufTtcblxuLyoqXG4gKiBRdWlja2x5IHNjYW5zIGEgZ2xvYiBwYXR0ZXJuIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGEgaGFuZGZ1bCBvZlxuICogdXNlZnVsIHByb3BlcnRpZXMsIGxpa2UgYGlzR2xvYmAsIGBwYXRoYCAodGhlIGxlYWRpbmcgbm9uLWdsb2IsIGlmIGl0IGV4aXN0cyksXG4gKiBgZ2xvYmAgKHRoZSBhY3R1YWwgcGF0dGVybiksIGFuZCBgbmVnYXRlZGAgKHRydWUgaWYgdGhlIHBhdGggc3RhcnRzIHdpdGggYCFgKS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcG0gPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIGNvbnNvbGUubG9nKHBtLnNjYW4oJ2Zvby9iYXIvKi5qcycpKTtcbiAqIHsgaXNHbG9iOiB0cnVlLCBpbnB1dDogJ2Zvby9iYXIvKi5qcycsIGJhc2U6ICdmb28vYmFyJywgZ2xvYjogJyouanMnIH1cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggdG9rZW5zIGFuZCByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5jb25zdCBzY2FuID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGNvbnN0IGxlbmd0aCA9IGlucHV0Lmxlbmd0aCAtIDE7XG4gIGNvbnN0IHNjYW5Ub0VuZCA9IG9wdHMucGFydHMgPT09IHRydWUgfHwgb3B0cy5zY2FuVG9FbmQgPT09IHRydWU7XG4gIGNvbnN0IHNsYXNoZXMgPSBbXTtcbiAgY29uc3QgdG9rZW5zID0gW107XG4gIGNvbnN0IHBhcnRzID0gW107XG5cbiAgbGV0IHN0ciA9IGlucHV0O1xuICBsZXQgaW5kZXggPSAtMTtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGxhc3RJbmRleCA9IDA7XG4gIGxldCBpc0JyYWNlID0gZmFsc2U7XG4gIGxldCBpc0JyYWNrZXQgPSBmYWxzZTtcbiAgbGV0IGlzR2xvYiA9IGZhbHNlO1xuICBsZXQgaXNFeHRnbG9iID0gZmFsc2U7XG4gIGxldCBpc0dsb2JzdGFyID0gZmFsc2U7XG4gIGxldCBicmFjZUVzY2FwZWQgPSBmYWxzZTtcbiAgbGV0IGJhY2tzbGFzaGVzID0gZmFsc2U7XG4gIGxldCBuZWdhdGVkID0gZmFsc2U7XG4gIGxldCBmaW5pc2hlZCA9IGZhbHNlO1xuICBsZXQgYnJhY2VzID0gMDtcbiAgbGV0IHByZXY7XG4gIGxldCBjb2RlO1xuICBsZXQgdG9rZW4gPSB7IHZhbHVlOiAnJywgZGVwdGg6IDAsIGlzR2xvYjogZmFsc2UgfTtcblxuICBjb25zdCBlb3MgPSAoKSA9PiBpbmRleCA+PSBsZW5ndGg7XG4gIGNvbnN0IHBlZWsgPSAoKSA9PiBzdHIuY2hhckNvZGVBdChpbmRleCArIDEpO1xuICBjb25zdCBhZHZhbmNlID0gKCkgPT4ge1xuICAgIHByZXYgPSBjb2RlO1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4KTtcbiAgfTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjb2RlID0gYWR2YW5jZSgpO1xuICAgIGxldCBuZXh0O1xuXG4gICAgaWYgKGNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgIGJhY2tzbGFzaGVzID0gdG9rZW4uYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgY29kZSA9IGFkdmFuY2UoKTtcblxuICAgICAgaWYgKGNvZGUgPT09IENIQVJfTEVGVF9DVVJMWV9CUkFDRSkge1xuICAgICAgICBicmFjZUVzY2FwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGJyYWNlRXNjYXBlZCA9PT0gdHJ1ZSB8fCBjb2RlID09PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgIGJyYWNlcysrO1xuXG4gICAgICB3aGlsZSAoZW9zKCkgIT09IHRydWUgJiYgKGNvZGUgPSBhZHZhbmNlKCkpKSB7XG4gICAgICAgIGlmIChjb2RlID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgYmFja3NsYXNoZXMgPSB0b2tlbi5iYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICAgICAgYWR2YW5jZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfTEVGVF9DVVJMWV9CUkFDRSkge1xuICAgICAgICAgIGJyYWNlcysrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJyYWNlRXNjYXBlZCAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0RPVCAmJiAoY29kZSA9IGFkdmFuY2UoKSkgPT09IENIQVJfRE9UKSB7XG4gICAgICAgICAgaXNCcmFjZSA9IHRva2VuLmlzQnJhY2UgPSB0cnVlO1xuICAgICAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYnJhY2VFc2NhcGVkICE9PSB0cnVlICYmIGNvZGUgPT09IENIQVJfQ09NTUEpIHtcbiAgICAgICAgICBpc0JyYWNlID0gdG9rZW4uaXNCcmFjZSA9IHRydWU7XG4gICAgICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2RlID09PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNFKSB7XG4gICAgICAgICAgYnJhY2VzLS07XG5cbiAgICAgICAgICBpZiAoYnJhY2VzID09PSAwKSB7XG4gICAgICAgICAgICBicmFjZUVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlzQnJhY2UgPSB0b2tlbi5pc0JyYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9GT1JXQVJEX1NMQVNIKSB7XG4gICAgICBzbGFzaGVzLnB1c2goaW5kZXgpO1xuICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgdG9rZW4gPSB7IHZhbHVlOiAnJywgZGVwdGg6IDAsIGlzR2xvYjogZmFsc2UgfTtcblxuICAgICAgaWYgKGZpbmlzaGVkID09PSB0cnVlKSBjb250aW51ZTtcbiAgICAgIGlmIChwcmV2ID09PSBDSEFSX0RPVCAmJiBpbmRleCA9PT0gKHN0YXJ0ICsgMSkpIHtcbiAgICAgICAgc3RhcnQgKz0gMjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChvcHRzLm5vZXh0ICE9PSB0cnVlKSB7XG4gICAgICBjb25zdCBpc0V4dGdsb2JDaGFyID0gY29kZSA9PT0gQ0hBUl9QTFVTXG4gICAgICAgIHx8IGNvZGUgPT09IENIQVJfQVRcbiAgICAgICAgfHwgY29kZSA9PT0gQ0hBUl9BU1RFUklTS1xuICAgICAgICB8fCBjb2RlID09PSBDSEFSX1FVRVNUSU9OX01BUktcbiAgICAgICAgfHwgY29kZSA9PT0gQ0hBUl9FWENMQU1BVElPTl9NQVJLO1xuXG4gICAgICBpZiAoaXNFeHRnbG9iQ2hhciA9PT0gdHJ1ZSAmJiBwZWVrKCkgPT09IENIQVJfTEVGVF9QQVJFTlRIRVNFUykge1xuICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICBpc0V4dGdsb2IgPSB0b2tlbi5pc0V4dGdsb2IgPSB0cnVlO1xuICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHdoaWxlIChlb3MoKSAhPT0gdHJ1ZSAmJiAoY29kZSA9IGFkdmFuY2UoKSkpIHtcbiAgICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0JBQ0tXQVJEX1NMQVNIKSB7XG4gICAgICAgICAgICAgIGJhY2tzbGFzaGVzID0gdG9rZW4uYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgICBjb2RlID0gYWR2YW5jZSgpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfUklHSFRfUEFSRU5USEVTRVMpIHtcbiAgICAgICAgICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IENIQVJfQVNURVJJU0spIHtcbiAgICAgIGlmIChwcmV2ID09PSBDSEFSX0FTVEVSSVNLKSBpc0dsb2JzdGFyID0gdG9rZW4uaXNHbG9ic3RhciA9IHRydWU7XG4gICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgZmluaXNoZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IENIQVJfUVVFU1RJT05fTUFSSykge1xuICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgIHdoaWxlIChlb3MoKSAhPT0gdHJ1ZSAmJiAobmV4dCA9IGFkdmFuY2UoKSkpIHtcbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICBiYWNrc2xhc2hlcyA9IHRva2VuLmJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgICAgICBhZHZhbmNlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCA9PT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgICAgIGlzQnJhY2tldCA9IHRva2VuLmlzQnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0cy5ub25lZ2F0ZSAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0VYQ0xBTUFUSU9OX01BUksgJiYgaW5kZXggPT09IHN0YXJ0KSB7XG4gICAgICBuZWdhdGVkID0gdG9rZW4ubmVnYXRlZCA9IHRydWU7XG4gICAgICBzdGFydCsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubm9wYXJlbiAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgIHdoaWxlIChlb3MoKSAhPT0gdHJ1ZSAmJiAoY29kZSA9IGFkdmFuY2UoKSkpIHtcbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICBiYWNrc2xhc2hlcyA9IHRva2VuLmJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgICAgICBjb2RlID0gYWR2YW5jZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfUklHSFRfUEFSRU5USEVTRVMpIHtcbiAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0dsb2IgPT09IHRydWUpIHtcbiAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHNjYW5Ub0VuZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdHMubm9leHQgPT09IHRydWUpIHtcbiAgICBpc0V4dGdsb2IgPSBmYWxzZTtcbiAgICBpc0dsb2IgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBiYXNlID0gc3RyO1xuICBsZXQgcHJlZml4ID0gJyc7XG4gIGxldCBnbG9iID0gJyc7XG5cbiAgaWYgKHN0YXJ0ID4gMCkge1xuICAgIHByZWZpeCA9IHN0ci5zbGljZSgwLCBzdGFydCk7XG4gICAgc3RyID0gc3RyLnNsaWNlKHN0YXJ0KTtcbiAgICBsYXN0SW5kZXggLT0gc3RhcnQ7XG4gIH1cblxuICBpZiAoYmFzZSAmJiBpc0dsb2IgPT09IHRydWUgJiYgbGFzdEluZGV4ID4gMCkge1xuICAgIGJhc2UgPSBzdHIuc2xpY2UoMCwgbGFzdEluZGV4KTtcbiAgICBnbG9iID0gc3RyLnNsaWNlKGxhc3RJbmRleCk7XG4gIH0gZWxzZSBpZiAoaXNHbG9iID09PSB0cnVlKSB7XG4gICAgYmFzZSA9ICcnO1xuICAgIGdsb2IgPSBzdHI7XG4gIH0gZWxzZSB7XG4gICAgYmFzZSA9IHN0cjtcbiAgfVxuXG4gIGlmIChiYXNlICYmIGJhc2UgIT09ICcnICYmIGJhc2UgIT09ICcvJyAmJiBiYXNlICE9PSBzdHIpIHtcbiAgICBpZiAoaXNQYXRoU2VwYXJhdG9yKGJhc2UuY2hhckNvZGVBdChiYXNlLmxlbmd0aCAtIDEpKSkge1xuICAgICAgYmFzZSA9IGJhc2Uuc2xpY2UoMCwgLTEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLnVuZXNjYXBlID09PSB0cnVlKSB7XG4gICAgaWYgKGdsb2IpIGdsb2IgPSB1dGlscy5yZW1vdmVCYWNrc2xhc2hlcyhnbG9iKTtcblxuICAgIGlmIChiYXNlICYmIGJhY2tzbGFzaGVzID09PSB0cnVlKSB7XG4gICAgICBiYXNlID0gdXRpbHMucmVtb3ZlQmFja3NsYXNoZXMoYmFzZSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgcHJlZml4LFxuICAgIGlucHV0LFxuICAgIHN0YXJ0LFxuICAgIGJhc2UsXG4gICAgZ2xvYixcbiAgICBpc0JyYWNlLFxuICAgIGlzQnJhY2tldCxcbiAgICBpc0dsb2IsXG4gICAgaXNFeHRnbG9iLFxuICAgIGlzR2xvYnN0YXIsXG4gICAgbmVnYXRlZFxuICB9O1xuXG4gIGlmIChvcHRzLnRva2VucyA9PT0gdHJ1ZSkge1xuICAgIHN0YXRlLm1heERlcHRoID0gMDtcbiAgICBpZiAoIWlzUGF0aFNlcGFyYXRvcihjb2RlKSkge1xuICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgIH1cbiAgICBzdGF0ZS50b2tlbnMgPSB0b2tlbnM7XG4gIH1cblxuICBpZiAob3B0cy5wYXJ0cyA9PT0gdHJ1ZSB8fCBvcHRzLnRva2VucyA9PT0gdHJ1ZSkge1xuICAgIGxldCBwcmV2SW5kZXg7XG5cbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzbGFzaGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgIGNvbnN0IG4gPSBwcmV2SW5kZXggPyBwcmV2SW5kZXggKyAxIDogc3RhcnQ7XG4gICAgICBjb25zdCBpID0gc2xhc2hlc1tpZHhdO1xuICAgICAgY29uc3QgdmFsdWUgPSBpbnB1dC5zbGljZShuLCBpKTtcbiAgICAgIGlmIChvcHRzLnRva2Vucykge1xuICAgICAgICBpZiAoaWR4ID09PSAwICYmIHN0YXJ0ICE9PSAwKSB7XG4gICAgICAgICAgdG9rZW5zW2lkeF0uaXNQcmVmaXggPSB0cnVlO1xuICAgICAgICAgIHRva2Vuc1tpZHhdLnZhbHVlID0gcHJlZml4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vuc1tpZHhdLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZGVwdGgodG9rZW5zW2lkeF0pO1xuICAgICAgICBzdGF0ZS5tYXhEZXB0aCArPSB0b2tlbnNbaWR4XS5kZXB0aDtcbiAgICAgIH1cbiAgICAgIGlmIChpZHggIT09IDAgfHwgdmFsdWUgIT09ICcnKSB7XG4gICAgICAgIHBhcnRzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgICAgcHJldkluZGV4ID0gaTtcbiAgICB9XG5cbiAgICBpZiAocHJldkluZGV4ICYmIHByZXZJbmRleCArIDEgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5wdXQuc2xpY2UocHJldkluZGV4ICsgMSk7XG4gICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcblxuICAgICAgaWYgKG9wdHMudG9rZW5zKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZGVwdGgodG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXSk7XG4gICAgICAgIHN0YXRlLm1heERlcHRoICs9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0uZGVwdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGUuc2xhc2hlcyA9IHNsYXNoZXM7XG4gICAgc3RhdGUucGFydHMgPSBwYXJ0cztcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc2NhbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vKipcbiAqIENvbnN0YW50c1xuICovXG5cbmNvbnN0IHtcbiAgTUFYX0xFTkdUSCxcbiAgUE9TSVhfUkVHRVhfU09VUkNFLFxuICBSRUdFWF9OT05fU1BFQ0lBTF9DSEFSUyxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSU19CQUNLUkVGLFxuICBSRVBMQUNFTUVOVFNcbn0gPSBjb25zdGFudHM7XG5cbi8qKlxuICogSGVscGVyc1xuICovXG5cbmNvbnN0IGV4cGFuZFJhbmdlID0gKGFyZ3MsIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmV4cGFuZFJhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZXhwYW5kUmFuZ2UoLi4uYXJncywgb3B0aW9ucyk7XG4gIH1cblxuICBhcmdzLnNvcnQoKTtcbiAgY29uc3QgdmFsdWUgPSBgWyR7YXJncy5qb2luKCctJyl9XWA7XG5cbiAgdHJ5IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3ICovXG4gICAgbmV3IFJlZ0V4cCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgcmV0dXJuIGFyZ3MubWFwKHYgPT4gdXRpbHMuZXNjYXBlUmVnZXgodikpLmpvaW4oJy4uJyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgbWVzc2FnZSBmb3IgYSBzeW50YXggZXJyb3JcbiAqL1xuXG5jb25zdCBzeW50YXhFcnJvciA9ICh0eXBlLCBjaGFyKSA9PiB7XG4gIHJldHVybiBgTWlzc2luZyAke3R5cGV9OiBcIiR7Y2hhcn1cIiAtIHVzZSBcIlxcXFxcXFxcJHtjaGFyfVwiIHRvIG1hdGNoIGxpdGVyYWwgY2hhcmFjdGVyc2A7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBpbnB1dCBzdHJpbmcuXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuY29uc3QgcGFyc2UgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xuICB9XG5cbiAgaW5wdXQgPSBSRVBMQUNFTUVOVFNbaW5wdXRdIHx8IGlucHV0O1xuXG4gIGNvbnN0IG9wdHMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgY29uc3QgbWF4ID0gdHlwZW9mIG9wdHMubWF4TGVuZ3RoID09PSAnbnVtYmVyJyA/IE1hdGgubWluKE1BWF9MRU5HVEgsIG9wdHMubWF4TGVuZ3RoKSA6IE1BWF9MRU5HVEg7XG5cbiAgbGV0IGxlbiA9IGlucHV0Lmxlbmd0aDtcbiAgaWYgKGxlbiA+IG1heCkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgSW5wdXQgbGVuZ3RoOiAke2xlbn0sIGV4Y2VlZHMgbWF4aW11bSBhbGxvd2VkIGxlbmd0aDogJHttYXh9YCk7XG4gIH1cblxuICBjb25zdCBib3MgPSB7IHR5cGU6ICdib3MnLCB2YWx1ZTogJycsIG91dHB1dDogb3B0cy5wcmVwZW5kIHx8ICcnIH07XG4gIGNvbnN0IHRva2VucyA9IFtib3NdO1xuXG4gIGNvbnN0IGNhcHR1cmUgPSBvcHRzLmNhcHR1cmUgPyAnJyA6ICc/Oic7XG4gIGNvbnN0IHdpbjMyID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpO1xuXG4gIC8vIGNyZWF0ZSBjb25zdGFudHMgYmFzZWQgb24gcGxhdGZvcm0sIGZvciB3aW5kb3dzIG9yIHBvc2l4XG4gIGNvbnN0IFBMQVRGT1JNX0NIQVJTID0gY29uc3RhbnRzLmdsb2JDaGFycyh3aW4zMik7XG4gIGNvbnN0IEVYVEdMT0JfQ0hBUlMgPSBjb25zdGFudHMuZXh0Z2xvYkNoYXJzKFBMQVRGT1JNX0NIQVJTKTtcblxuICBjb25zdCB7XG4gICAgRE9UX0xJVEVSQUwsXG4gICAgUExVU19MSVRFUkFMLFxuICAgIFNMQVNIX0xJVEVSQUwsXG4gICAgT05FX0NIQVIsXG4gICAgRE9UU19TTEFTSCxcbiAgICBOT19ET1QsXG4gICAgTk9fRE9UX1NMQVNILFxuICAgIE5PX0RPVFNfU0xBU0gsXG4gICAgUU1BUkssXG4gICAgUU1BUktfTk9fRE9ULFxuICAgIFNUQVIsXG4gICAgU1RBUlRfQU5DSE9SXG4gIH0gPSBQTEFURk9STV9DSEFSUztcblxuICBjb25zdCBnbG9ic3RhciA9IChvcHRzKSA9PiB7XG4gICAgcmV0dXJuIGAoJHtjYXB0dXJlfSg/Oig/ISR7U1RBUlRfQU5DSE9SfSR7b3B0cy5kb3QgPyBET1RTX1NMQVNIIDogRE9UX0xJVEVSQUx9KS4pKj8pYDtcbiAgfTtcblxuICBjb25zdCBub2RvdCA9IG9wdHMuZG90ID8gJycgOiBOT19ET1Q7XG4gIGNvbnN0IHFtYXJrTm9Eb3QgPSBvcHRzLmRvdCA/IFFNQVJLIDogUU1BUktfTk9fRE9UO1xuICBsZXQgc3RhciA9IG9wdHMuYmFzaCA9PT0gdHJ1ZSA/IGdsb2JzdGFyKG9wdHMpIDogU1RBUjtcblxuICBpZiAob3B0cy5jYXB0dXJlKSB7XG4gICAgc3RhciA9IGAoJHtzdGFyfSlgO1xuICB9XG5cbiAgLy8gbWluaW1hdGNoIG9wdGlvbnMgc3VwcG9ydFxuICBpZiAodHlwZW9mIG9wdHMubm9leHQgPT09ICdib29sZWFuJykge1xuICAgIG9wdHMubm9leHRnbG9iID0gb3B0cy5ub2V4dDtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIGlucHV0LFxuICAgIGluZGV4OiAtMSxcbiAgICBzdGFydDogMCxcbiAgICBkb3Q6IG9wdHMuZG90ID09PSB0cnVlLFxuICAgIGNvbnN1bWVkOiAnJyxcbiAgICBvdXRwdXQ6ICcnLFxuICAgIHByZWZpeDogJycsXG4gICAgYmFja3RyYWNrOiBmYWxzZSxcbiAgICBuZWdhdGVkOiBmYWxzZSxcbiAgICBicmFja2V0czogMCxcbiAgICBicmFjZXM6IDAsXG4gICAgcGFyZW5zOiAwLFxuICAgIHF1b3RlczogMCxcbiAgICBnbG9ic3RhcjogZmFsc2UsXG4gICAgdG9rZW5zXG4gIH07XG5cbiAgaW5wdXQgPSB1dGlscy5yZW1vdmVQcmVmaXgoaW5wdXQsIHN0YXRlKTtcbiAgbGVuID0gaW5wdXQubGVuZ3RoO1xuXG4gIGNvbnN0IGV4dGdsb2JzID0gW107XG4gIGNvbnN0IGJyYWNlcyA9IFtdO1xuICBjb25zdCBzdGFjayA9IFtdO1xuICBsZXQgcHJldiA9IGJvcztcbiAgbGV0IHZhbHVlO1xuXG4gIC8qKlxuICAgKiBUb2tlbml6aW5nIGhlbHBlcnNcbiAgICovXG5cbiAgY29uc3QgZW9zID0gKCkgPT4gc3RhdGUuaW5kZXggPT09IGxlbiAtIDE7XG4gIGNvbnN0IHBlZWsgPSBzdGF0ZS5wZWVrID0gKG4gPSAxKSA9PiBpbnB1dFtzdGF0ZS5pbmRleCArIG5dO1xuICBjb25zdCBhZHZhbmNlID0gc3RhdGUuYWR2YW5jZSA9ICgpID0+IGlucHV0Wysrc3RhdGUuaW5kZXhdO1xuICBjb25zdCByZW1haW5pbmcgPSAoKSA9PiBpbnB1dC5zbGljZShzdGF0ZS5pbmRleCArIDEpO1xuICBjb25zdCBjb25zdW1lID0gKHZhbHVlID0gJycsIG51bSA9IDApID0+IHtcbiAgICBzdGF0ZS5jb25zdW1lZCArPSB2YWx1ZTtcbiAgICBzdGF0ZS5pbmRleCArPSBudW07XG4gIH07XG4gIGNvbnN0IGFwcGVuZCA9IHRva2VuID0+IHtcbiAgICBzdGF0ZS5vdXRwdXQgKz0gdG9rZW4ub3V0cHV0ICE9IG51bGwgPyB0b2tlbi5vdXRwdXQgOiB0b2tlbi52YWx1ZTtcbiAgICBjb25zdW1lKHRva2VuLnZhbHVlKTtcbiAgfTtcblxuICBjb25zdCBuZWdhdGUgPSAoKSA9PiB7XG4gICAgbGV0IGNvdW50ID0gMTtcblxuICAgIHdoaWxlIChwZWVrKCkgPT09ICchJyAmJiAocGVlaygyKSAhPT0gJygnIHx8IHBlZWsoMykgPT09ICc/JykpIHtcbiAgICAgIGFkdmFuY2UoKTtcbiAgICAgIHN0YXRlLnN0YXJ0Kys7XG4gICAgICBjb3VudCsrO1xuICAgIH1cblxuICAgIGlmIChjb3VudCAlIDIgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGF0ZS5uZWdhdGVkID0gdHJ1ZTtcbiAgICBzdGF0ZS5zdGFydCsrO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIGNvbnN0IGluY3JlbWVudCA9IHR5cGUgPT4ge1xuICAgIHN0YXRlW3R5cGVdKys7XG4gICAgc3RhY2sucHVzaCh0eXBlKTtcbiAgfTtcblxuICBjb25zdCBkZWNyZW1lbnQgPSB0eXBlID0+IHtcbiAgICBzdGF0ZVt0eXBlXS0tO1xuICAgIHN0YWNrLnBvcCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQdXNoIHRva2VucyBvbnRvIHRoZSB0b2tlbnMgYXJyYXkuIFRoaXMgaGVscGVyIHNwZWVkcyB1cFxuICAgKiB0b2tlbml6aW5nIGJ5IDEpIGhlbHBpbmcgdXMgYXZvaWQgYmFja3RyYWNraW5nIGFzIG11Y2ggYXMgcG9zc2libGUsXG4gICAqIGFuZCAyKSBoZWxwaW5nIHVzIGF2b2lkIGNyZWF0aW5nIGV4dHJhIHRva2VucyB3aGVuIGNvbnNlY3V0aXZlXG4gICAqIGNoYXJhY3RlcnMgYXJlIHBsYWluIHRleHQuIFRoaXMgaW1wcm92ZXMgcGVyZm9ybWFuY2UgYW5kIHNpbXBsaWZpZXNcbiAgICogbG9va2JlaGluZHMuXG4gICAqL1xuXG4gIGNvbnN0IHB1c2ggPSB0b2sgPT4ge1xuICAgIGlmIChwcmV2LnR5cGUgPT09ICdnbG9ic3RhcicpIHtcbiAgICAgIGNvbnN0IGlzQnJhY2UgPSBzdGF0ZS5icmFjZXMgPiAwICYmICh0b2sudHlwZSA9PT0gJ2NvbW1hJyB8fCB0b2sudHlwZSA9PT0gJ2JyYWNlJyk7XG4gICAgICBjb25zdCBpc0V4dGdsb2IgPSB0b2suZXh0Z2xvYiA9PT0gdHJ1ZSB8fCAoZXh0Z2xvYnMubGVuZ3RoICYmICh0b2sudHlwZSA9PT0gJ3BpcGUnIHx8IHRvay50eXBlID09PSAncGFyZW4nKSk7XG5cbiAgICAgIGlmICh0b2sudHlwZSAhPT0gJ3NsYXNoJyAmJiB0b2sudHlwZSAhPT0gJ3BhcmVuJyAmJiAhaXNCcmFjZSAmJiAhaXNFeHRnbG9iKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9IHN0YXRlLm91dHB1dC5zbGljZSgwLCAtcHJldi5vdXRwdXQubGVuZ3RoKTtcbiAgICAgICAgcHJldi50eXBlID0gJ3N0YXInO1xuICAgICAgICBwcmV2LnZhbHVlID0gJyonO1xuICAgICAgICBwcmV2Lm91dHB1dCA9IHN0YXI7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBwcmV2Lm91dHB1dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0Z2xvYnMubGVuZ3RoICYmIHRvay50eXBlICE9PSAncGFyZW4nICYmICFFWFRHTE9CX0NIQVJTW3Rvay52YWx1ZV0pIHtcbiAgICAgIGV4dGdsb2JzW2V4dGdsb2JzLmxlbmd0aCAtIDFdLmlubmVyICs9IHRvay52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodG9rLnZhbHVlIHx8IHRvay5vdXRwdXQpIGFwcGVuZCh0b2spO1xuICAgIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gJ3RleHQnICYmIHRvay50eXBlID09PSAndGV4dCcpIHtcbiAgICAgIHByZXYudmFsdWUgKz0gdG9rLnZhbHVlO1xuICAgICAgcHJldi5vdXRwdXQgPSAocHJldi5vdXRwdXQgfHwgJycpICsgdG9rLnZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRvay5wcmV2ID0gcHJldjtcbiAgICB0b2tlbnMucHVzaCh0b2spO1xuICAgIHByZXYgPSB0b2s7XG4gIH07XG5cbiAgY29uc3QgZXh0Z2xvYk9wZW4gPSAodHlwZSwgdmFsdWUpID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IHsgLi4uRVhUR0xPQl9DSEFSU1t2YWx1ZV0sIGNvbmRpdGlvbnM6IDEsIGlubmVyOiAnJyB9O1xuXG4gICAgdG9rZW4ucHJldiA9IHByZXY7XG4gICAgdG9rZW4ucGFyZW5zID0gc3RhdGUucGFyZW5zO1xuICAgIHRva2VuLm91dHB1dCA9IHN0YXRlLm91dHB1dDtcbiAgICBjb25zdCBvdXRwdXQgPSAob3B0cy5jYXB0dXJlID8gJygnIDogJycpICsgdG9rZW4ub3BlbjtcblxuICAgIGluY3JlbWVudCgncGFyZW5zJyk7XG5cblxuICAgIHB1c2goeyB0eXBlLCB2YWx1ZSwgb3V0cHV0OiBzdGF0ZS5vdXRwdXQgPyAnJyA6IE9ORV9DSEFSIH0pO1xuICAgIHB1c2goeyB0eXBlOiAncGFyZW4nLCBleHRnbG9iOiB0cnVlLCB2YWx1ZTogYWR2YW5jZSgpLCBvdXRwdXQgfSk7XG4gICAgZXh0Z2xvYnMucHVzaCh0b2tlbik7XG4gIH07XG5cbiAgY29uc3QgZXh0Z2xvYkNsb3NlID0gdG9rZW4gPT4ge1xuICAgIGxldCBvdXRwdXQgPSB0b2tlbi5jbG9zZSArIChvcHRzLmNhcHR1cmUgPyAnKScgOiAnJyk7XG5cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ25lZ2F0ZScpIHtcbiAgICAgIGxldCBleHRnbG9iU3RhciA9IHN0YXI7XG5cbiAgICAgIGlmICh0b2tlbi5pbm5lciAmJiB0b2tlbi5pbm5lci5sZW5ndGggPiAxICYmIHRva2VuLmlubmVyLmluY2x1ZGVzKCcvJykpIHtcbiAgICAgICAgZXh0Z2xvYlN0YXIgPSBnbG9ic3RhcihvcHRzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4dGdsb2JTdGFyICE9PSBzdGFyIHx8IGVvcygpIHx8IC9eXFwpKyQvLnRlc3QocmVtYWluaW5nKCkpKSB7XG4gICAgICAgIG91dHB1dCA9IHRva2VuLmNsb3NlID0gYCkkKSkke2V4dGdsb2JTdGFyfWA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5wcmV2LnR5cGUgPT09ICdib3MnICYmIGVvcygpKSB7XG4gICAgICAgIHN0YXRlLm5lZ2F0ZWRFeHRnbG9iID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdXNoKHsgdHlwZTogJ3BhcmVuJywgZXh0Z2xvYjogdHJ1ZSwgdmFsdWUsIG91dHB1dCB9KTtcbiAgICBkZWNyZW1lbnQoJ3BhcmVucycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGYXN0IHBhdGhzXG4gICAqL1xuXG4gIGlmIChvcHRzLmZhc3RwYXRocyAhPT0gZmFsc2UgJiYgIS8oXlsqIV18Wy8oKVtcXF17fVwiXSkvLnRlc3QoaW5wdXQpKSB7XG4gICAgbGV0IGJhY2tzbGFzaGVzID0gZmFsc2U7XG5cbiAgICBsZXQgb3V0cHV0ID0gaW5wdXQucmVwbGFjZShSRUdFWF9TUEVDSUFMX0NIQVJTX0JBQ0tSRUYsIChtLCBlc2MsIGNoYXJzLCBmaXJzdCwgcmVzdCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChmaXJzdCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG07XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdCA9PT0gJz8nKSB7XG4gICAgICAgIGlmIChlc2MpIHtcbiAgICAgICAgICByZXR1cm4gZXNjICsgZmlyc3QgKyAocmVzdCA/IFFNQVJLLnJlcGVhdChyZXN0Lmxlbmd0aCkgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHFtYXJrTm9Eb3QgKyAocmVzdCA/IFFNQVJLLnJlcGVhdChyZXN0Lmxlbmd0aCkgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFFNQVJLLnJlcGVhdChjaGFycy5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3QgPT09ICcuJykge1xuICAgICAgICByZXR1cm4gRE9UX0xJVEVSQUwucmVwZWF0KGNoYXJzLmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdCA9PT0gJyonKSB7XG4gICAgICAgIGlmIChlc2MpIHtcbiAgICAgICAgICByZXR1cm4gZXNjICsgZmlyc3QgKyAocmVzdCA/IHN0YXIgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXNjID8gbSA6IGBcXFxcJHttfWA7XG4gICAgfSk7XG5cbiAgICBpZiAoYmFja3NsYXNoZXMgPT09IHRydWUpIHtcbiAgICAgIGlmIChvcHRzLnVuZXNjYXBlID09PSB0cnVlKSB7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9cXFxcKy9nLCBtID0+IHtcbiAgICAgICAgICByZXR1cm4gbS5sZW5ndGggJSAyID09PSAwID8gJ1xcXFxcXFxcJyA6IChtID8gJ1xcXFwnIDogJycpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3V0cHV0ID09PSBpbnB1dCAmJiBvcHRzLmNvbnRhaW5zID09PSB0cnVlKSB7XG4gICAgICBzdGF0ZS5vdXRwdXQgPSBpbnB1dDtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICBzdGF0ZS5vdXRwdXQgPSB1dGlscy53cmFwT3V0cHV0KG91dHB1dCwgc3RhdGUsIG9wdGlvbnMpO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2tlbml6ZSBpbnB1dCB1bnRpbCB3ZSByZWFjaCBlbmQtb2Ytc3RyaW5nXG4gICAqL1xuXG4gIHdoaWxlICghZW9zKCkpIHtcbiAgICB2YWx1ZSA9IGFkdmFuY2UoKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gJ1xcdTAwMDAnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVkIGNoYXJhY3RlcnNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ1xcXFwnKSB7XG4gICAgICBjb25zdCBuZXh0ID0gcGVlaygpO1xuXG4gICAgICBpZiAobmV4dCA9PT0gJy8nICYmIG9wdHMuYmFzaCAhPT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHQgPT09ICcuJyB8fCBuZXh0ID09PSAnOycpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghbmV4dCkge1xuICAgICAgICB2YWx1ZSArPSAnXFxcXCc7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gY29sbGFwc2Ugc2xhc2hlcyB0byByZWR1Y2UgcG90ZW50aWFsIGZvciBleHBsb2l0c1xuICAgICAgY29uc3QgbWF0Y2ggPSAvXlxcXFwrLy5leGVjKHJlbWFpbmluZygpKTtcbiAgICAgIGxldCBzbGFzaGVzID0gMDtcblxuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzBdLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgc2xhc2hlcyA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgc3RhdGUuaW5kZXggKz0gc2xhc2hlcztcbiAgICAgICAgaWYgKHNsYXNoZXMgJSAyICE9PSAwKSB7XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcXFwnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLnVuZXNjYXBlID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlID0gYWR2YW5jZSgpIHx8ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgKz0gYWR2YW5jZSgpIHx8ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuYnJhY2tldHMgPT09IDApIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIGluc2lkZSBhIHJlZ2V4IGNoYXJhY3RlciBjbGFzcywgY29udGludWVcbiAgICAgKiB1bnRpbCB3ZSByZWFjaCB0aGUgY2xvc2luZyBicmFja2V0LlxuICAgICAqL1xuXG4gICAgaWYgKHN0YXRlLmJyYWNrZXRzID4gMCAmJiAodmFsdWUgIT09ICddJyB8fCBwcmV2LnZhbHVlID09PSAnWycgfHwgcHJldi52YWx1ZSA9PT0gJ1teJykpIHtcbiAgICAgIGlmIChvcHRzLnBvc2l4ICE9PSBmYWxzZSAmJiB2YWx1ZSA9PT0gJzonKSB7XG4gICAgICAgIGNvbnN0IGlubmVyID0gcHJldi52YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgaWYgKGlubmVyLmluY2x1ZGVzKCdbJykpIHtcbiAgICAgICAgICBwcmV2LnBvc2l4ID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChpbm5lci5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSBwcmV2LnZhbHVlLmxhc3RJbmRleE9mKCdbJyk7XG4gICAgICAgICAgICBjb25zdCBwcmUgPSBwcmV2LnZhbHVlLnNsaWNlKDAsIGlkeCk7XG4gICAgICAgICAgICBjb25zdCByZXN0ID0gcHJldi52YWx1ZS5zbGljZShpZHggKyAyKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l4ID0gUE9TSVhfUkVHRVhfU09VUkNFW3Jlc3RdO1xuICAgICAgICAgICAgaWYgKHBvc2l4KSB7XG4gICAgICAgICAgICAgIHByZXYudmFsdWUgPSBwcmUgKyBwb3NpeDtcbiAgICAgICAgICAgICAgc3RhdGUuYmFja3RyYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYWR2YW5jZSgpO1xuXG4gICAgICAgICAgICAgIGlmICghYm9zLm91dHB1dCAmJiB0b2tlbnMuaW5kZXhPZihwcmV2KSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGJvcy5vdXRwdXQgPSBPTkVfQ0hBUjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCh2YWx1ZSA9PT0gJ1snICYmIHBlZWsoKSAhPT0gJzonKSB8fCAodmFsdWUgPT09ICctJyAmJiBwZWVrKCkgPT09ICddJykpIHtcbiAgICAgICAgdmFsdWUgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlID09PSAnXScgJiYgKHByZXYudmFsdWUgPT09ICdbJyB8fCBwcmV2LnZhbHVlID09PSAnW14nKSkge1xuICAgICAgICB2YWx1ZSA9IGBcXFxcJHt2YWx1ZX1gO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5wb3NpeCA9PT0gdHJ1ZSAmJiB2YWx1ZSA9PT0gJyEnICYmIHByZXYudmFsdWUgPT09ICdbJykge1xuICAgICAgICB2YWx1ZSA9ICdeJztcbiAgICAgIH1cblxuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgIGFwcGVuZCh7IHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgd2UncmUgaW5zaWRlIGEgcXVvdGVkIHN0cmluZywgY29udGludWVcbiAgICAgKiB1bnRpbCB3ZSByZWFjaCB0aGUgY2xvc2luZyBkb3VibGUgcXVvdGUuXG4gICAgICovXG5cbiAgICBpZiAoc3RhdGUucXVvdGVzID09PSAxICYmIHZhbHVlICE9PSAnXCInKSB7XG4gICAgICB2YWx1ZSA9IHV0aWxzLmVzY2FwZVJlZ2V4KHZhbHVlKTtcbiAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICBhcHBlbmQoeyB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERvdWJsZSBxdW90ZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ1wiJykge1xuICAgICAgc3RhdGUucXVvdGVzID0gc3RhdGUucXVvdGVzID09PSAxID8gMCA6IDE7XG4gICAgICBpZiAob3B0cy5rZWVwUXVvdGVzID09PSB0cnVlKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyZW50aGVzZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJygnKSB7XG4gICAgICBpbmNyZW1lbnQoJ3BhcmVucycpO1xuICAgICAgcHVzaCh7IHR5cGU6ICdwYXJlbicsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSAnKScpIHtcbiAgICAgIGlmIChzdGF0ZS5wYXJlbnMgPT09IDAgJiYgb3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3ludGF4RXJyb3IoJ29wZW5pbmcnLCAnKCcpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXh0Z2xvYiA9IGV4dGdsb2JzW2V4dGdsb2JzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGV4dGdsb2IgJiYgc3RhdGUucGFyZW5zID09PSBleHRnbG9iLnBhcmVucyArIDEpIHtcbiAgICAgICAgZXh0Z2xvYkNsb3NlKGV4dGdsb2JzLnBvcCgpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAncGFyZW4nLCB2YWx1ZSwgb3V0cHV0OiBzdGF0ZS5wYXJlbnMgPyAnKScgOiAnXFxcXCknIH0pO1xuICAgICAgZGVjcmVtZW50KCdwYXJlbnMnKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNxdWFyZSBicmFja2V0c1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnWycpIHtcbiAgICAgIGlmIChvcHRzLm5vYnJhY2tldCA9PT0gdHJ1ZSB8fCAhcmVtYWluaW5nKCkuaW5jbHVkZXMoJ10nKSkge1xuICAgICAgICBpZiAob3B0cy5ub2JyYWNrZXQgIT09IHRydWUgJiYgb3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignY2xvc2luZycsICddJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluY3JlbWVudCgnYnJhY2tldHMnKTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdicmFja2V0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09ICddJykge1xuICAgICAgaWYgKG9wdHMubm9icmFja2V0ID09PSB0cnVlIHx8IChwcmV2ICYmIHByZXYudHlwZSA9PT0gJ2JyYWNrZXQnICYmIHByZXYudmFsdWUubGVuZ3RoID09PSAxKSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSwgb3V0cHV0OiBgXFxcXCR7dmFsdWV9YCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5icmFja2V0cyA9PT0gMCkge1xuICAgICAgICBpZiAob3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignb3BlbmluZycsICdbJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUsIG91dHB1dDogYFxcXFwke3ZhbHVlfWAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBkZWNyZW1lbnQoJ2JyYWNrZXRzJyk7XG5cbiAgICAgIGNvbnN0IHByZXZWYWx1ZSA9IHByZXYudmFsdWUuc2xpY2UoMSk7XG4gICAgICBpZiAocHJldi5wb3NpeCAhPT0gdHJ1ZSAmJiBwcmV2VmFsdWVbMF0gPT09ICdeJyAmJiAhcHJldlZhbHVlLmluY2x1ZGVzKCcvJykpIHtcbiAgICAgICAgdmFsdWUgPSBgLyR7dmFsdWV9YDtcbiAgICAgIH1cblxuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgIGFwcGVuZCh7IHZhbHVlIH0pO1xuXG4gICAgICAvLyB3aGVuIGxpdGVyYWwgYnJhY2tldHMgYXJlIGV4cGxpY2l0bHkgZGlzYWJsZWRcbiAgICAgIC8vIGFzc3VtZSB3ZSBzaG91bGQgbWF0Y2ggd2l0aCBhIHJlZ2V4IGNoYXJhY3RlciBjbGFzc1xuICAgICAgaWYgKG9wdHMubGl0ZXJhbEJyYWNrZXRzID09PSBmYWxzZSB8fCB1dGlscy5oYXNSZWdleENoYXJzKHByZXZWYWx1ZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVzY2FwZWQgPSB1dGlscy5lc2NhcGVSZWdleChwcmV2LnZhbHVlKTtcbiAgICAgIHN0YXRlLm91dHB1dCA9IHN0YXRlLm91dHB1dC5zbGljZSgwLCAtcHJldi52YWx1ZS5sZW5ndGgpO1xuXG4gICAgICAvLyB3aGVuIGxpdGVyYWwgYnJhY2tldHMgYXJlIGV4cGxpY2l0bHkgZW5hYmxlZFxuICAgICAgLy8gYXNzdW1lIHdlIHNob3VsZCBlc2NhcGUgdGhlIGJyYWNrZXRzIHRvIG1hdGNoIGxpdGVyYWwgY2hhcmFjdGVyc1xuICAgICAgaWYgKG9wdHMubGl0ZXJhbEJyYWNrZXRzID09PSB0cnVlKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBlc2NhcGVkO1xuICAgICAgICBwcmV2LnZhbHVlID0gZXNjYXBlZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHdoZW4gdGhlIHVzZXIgc3BlY2lmaWVzIG5vdGhpbmcsIHRyeSB0byBtYXRjaCBib3RoXG4gICAgICBwcmV2LnZhbHVlID0gYCgke2NhcHR1cmV9JHtlc2NhcGVkfXwke3ByZXYudmFsdWV9KWA7XG4gICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJldi52YWx1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJyYWNlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAneycgJiYgb3B0cy5ub2JyYWNlICE9PSB0cnVlKSB7XG4gICAgICBpbmNyZW1lbnQoJ2JyYWNlcycpO1xuXG4gICAgICBjb25zdCBvcGVuID0ge1xuICAgICAgICB0eXBlOiAnYnJhY2UnLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb3V0cHV0OiAnKCcsXG4gICAgICAgIG91dHB1dEluZGV4OiBzdGF0ZS5vdXRwdXQubGVuZ3RoLFxuICAgICAgICB0b2tlbnNJbmRleDogc3RhdGUudG9rZW5zLmxlbmd0aFxuICAgICAgfTtcblxuICAgICAgYnJhY2VzLnB1c2gob3Blbik7XG4gICAgICBwdXNoKG9wZW4pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSAnfScpIHtcbiAgICAgIGNvbnN0IGJyYWNlID0gYnJhY2VzW2JyYWNlcy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKG9wdHMubm9icmFjZSA9PT0gdHJ1ZSB8fCAhYnJhY2UpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUsIG91dHB1dDogdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgb3V0cHV0ID0gJyknO1xuXG4gICAgICBpZiAoYnJhY2UuZG90cyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBhcnIgPSB0b2tlbnMuc2xpY2UoKTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdG9rZW5zLnBvcCgpO1xuICAgICAgICAgIGlmIChhcnJbaV0udHlwZSA9PT0gJ2JyYWNlJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhcnJbaV0udHlwZSAhPT0gJ2RvdHMnKSB7XG4gICAgICAgICAgICByYW5nZS51bnNoaWZ0KGFycltpXS52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0ID0gZXhwYW5kUmFuZ2UocmFuZ2UsIG9wdHMpO1xuICAgICAgICBzdGF0ZS5iYWNrdHJhY2sgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJhY2UuY29tbWEgIT09IHRydWUgJiYgYnJhY2UuZG90cyAhPT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBvdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgYnJhY2Uub3V0cHV0SW5kZXgpO1xuICAgICAgICBjb25zdCB0b2tzID0gc3RhdGUudG9rZW5zLnNsaWNlKGJyYWNlLnRva2Vuc0luZGV4KTtcbiAgICAgICAgYnJhY2UudmFsdWUgPSBicmFjZS5vdXRwdXQgPSAnXFxcXHsnO1xuICAgICAgICB2YWx1ZSA9IG91dHB1dCA9IGBcXFxcfWA7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9IG91dDtcbiAgICAgICAgZm9yIChjb25zdCB0IG9mIHRva3MpIHtcbiAgICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gKHQub3V0cHV0IHx8IHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnYnJhY2UnLCB2YWx1ZSwgb3V0cHV0IH0pO1xuICAgICAgZGVjcmVtZW50KCdicmFjZXMnKTtcbiAgICAgIGJyYWNlcy5wb3AoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBpcGVzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICd8Jykge1xuICAgICAgaWYgKGV4dGdsb2JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZXh0Z2xvYnNbZXh0Z2xvYnMubGVuZ3RoIC0gMV0uY29uZGl0aW9ucysrO1xuICAgICAgfVxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21tYXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJywnKSB7XG4gICAgICBsZXQgb3V0cHV0ID0gdmFsdWU7XG5cbiAgICAgIGNvbnN0IGJyYWNlID0gYnJhY2VzW2JyYWNlcy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChicmFjZSAmJiBzdGFja1tzdGFjay5sZW5ndGggLSAxXSA9PT0gJ2JyYWNlcycpIHtcbiAgICAgICAgYnJhY2UuY29tbWEgPSB0cnVlO1xuICAgICAgICBvdXRwdXQgPSAnfCc7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnY29tbWEnLCB2YWx1ZSwgb3V0cHV0IH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2xhc2hlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnLycpIHtcbiAgICAgIC8vIGlmIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGdsb2IgaXMgXCIuL1wiLCBhZHZhbmNlIHRoZSBzdGFydFxuICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgaW5kZXgsIGFuZCBkb24ndCBhZGQgdGhlIFwiLi9cIiBjaGFyYWN0ZXJzXG4gICAgICAvLyB0byB0aGUgc3RhdGUuIFRoaXMgZ3JlYXRseSBzaW1wbGlmaWVzIGxvb2tiZWhpbmRzIHdoZW5cbiAgICAgIC8vIGNoZWNraW5nIGZvciBCT1MgY2hhcmFjdGVycyBsaWtlIFwiIVwiIGFuZCBcIi5cIiAobm90IFwiLi9cIilcbiAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdkb3QnICYmIHN0YXRlLmluZGV4ID09PSBzdGF0ZS5zdGFydCArIDEpIHtcbiAgICAgICAgc3RhdGUuc3RhcnQgPSBzdGF0ZS5pbmRleCArIDE7XG4gICAgICAgIHN0YXRlLmNvbnN1bWVkID0gJyc7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9ICcnO1xuICAgICAgICB0b2tlbnMucG9wKCk7XG4gICAgICAgIHByZXYgPSBib3M7IC8vIHJlc2V0IFwicHJldlwiIHRvIHRoZSBmaXJzdCB0b2tlblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdzbGFzaCcsIHZhbHVlLCBvdXRwdXQ6IFNMQVNIX0xJVEVSQUwgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3RzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICcuJykge1xuICAgICAgaWYgKHN0YXRlLmJyYWNlcyA+IDAgJiYgcHJldi50eXBlID09PSAnZG90Jykge1xuICAgICAgICBpZiAocHJldi52YWx1ZSA9PT0gJy4nKSBwcmV2Lm91dHB1dCA9IERPVF9MSVRFUkFMO1xuICAgICAgICBjb25zdCBicmFjZSA9IGJyYWNlc1ticmFjZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHByZXYudHlwZSA9ICdkb3RzJztcbiAgICAgICAgcHJldi5vdXRwdXQgKz0gdmFsdWU7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIGJyYWNlLmRvdHMgPSB0cnVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChzdGF0ZS5icmFjZXMgKyBzdGF0ZS5wYXJlbnMpID09PSAwICYmIHByZXYudHlwZSAhPT0gJ2JvcycgJiYgcHJldi50eXBlICE9PSAnc2xhc2gnKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlLCBvdXRwdXQ6IERPVF9MSVRFUkFMIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdkb3QnLCB2YWx1ZSwgb3V0cHV0OiBET1RfTElURVJBTCB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFF1ZXN0aW9uIG1hcmtzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICc/Jykge1xuICAgICAgY29uc3QgaXNHcm91cCA9IHByZXYgJiYgcHJldi52YWx1ZSA9PT0gJygnO1xuICAgICAgaWYgKCFpc0dyb3VwICYmIG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIHBlZWsoKSA9PT0gJygnICYmIHBlZWsoMikgIT09ICc/Jykge1xuICAgICAgICBleHRnbG9iT3BlbigncW1hcmsnLCB2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldiAmJiBwcmV2LnR5cGUgPT09ICdwYXJlbicpIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHBlZWsoKTtcbiAgICAgICAgbGV0IG91dHB1dCA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSAnPCcgJiYgIXV0aWxzLnN1cHBvcnRzTG9va2JlaGluZHMoKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm9kZS5qcyB2MTAgb3IgaGlnaGVyIGlzIHJlcXVpcmVkIGZvciByZWdleCBsb29rYmVoaW5kcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChwcmV2LnZhbHVlID09PSAnKCcgJiYgIS9bIT08Ol0vLnRlc3QobmV4dCkpIHx8IChuZXh0ID09PSAnPCcgJiYgIS88KFshPV18XFx3Kz4pLy50ZXN0KHJlbWFpbmluZygpKSkpIHtcbiAgICAgICAgICBvdXRwdXQgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlLCBvdXRwdXQgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy5kb3QgIT09IHRydWUgJiYgKHByZXYudHlwZSA9PT0gJ3NsYXNoJyB8fCBwcmV2LnR5cGUgPT09ICdib3MnKSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3FtYXJrJywgdmFsdWUsIG91dHB1dDogUU1BUktfTk9fRE9UIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdxbWFyaycsIHZhbHVlLCBvdXRwdXQ6IFFNQVJLIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhjbGFtYXRpb25cbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJyEnKSB7XG4gICAgICBpZiAob3B0cy5ub2V4dGdsb2IgIT09IHRydWUgJiYgcGVlaygpID09PSAnKCcpIHtcbiAgICAgICAgaWYgKHBlZWsoMikgIT09ICc/JyB8fCAhL1shPTw6XS8udGVzdChwZWVrKDMpKSkge1xuICAgICAgICAgIGV4dGdsb2JPcGVuKCduZWdhdGUnLCB2YWx1ZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdHMubm9uZWdhdGUgIT09IHRydWUgJiYgc3RhdGUuaW5kZXggPT09IDApIHtcbiAgICAgICAgbmVnYXRlKCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsdXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJysnKSB7XG4gICAgICBpZiAob3B0cy5ub2V4dGdsb2IgIT09IHRydWUgJiYgcGVlaygpID09PSAnKCcgJiYgcGVlaygyKSAhPT0gJz8nKSB7XG4gICAgICAgIGV4dGdsb2JPcGVuKCdwbHVzJywgdmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChwcmV2ICYmIHByZXYudmFsdWUgPT09ICcoJykgfHwgb3B0cy5yZWdleCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdwbHVzJywgdmFsdWUsIG91dHB1dDogUExVU19MSVRFUkFMIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKChwcmV2ICYmIChwcmV2LnR5cGUgPT09ICdicmFja2V0JyB8fCBwcmV2LnR5cGUgPT09ICdwYXJlbicgfHwgcHJldi50eXBlID09PSAnYnJhY2UnKSkgfHwgc3RhdGUucGFyZW5zID4gMCkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3BsdXMnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAncGx1cycsIHZhbHVlOiBQTFVTX0xJVEVSQUwgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGFpbiB0ZXh0XG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICdAJykge1xuICAgICAgaWYgKG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIHBlZWsoKSA9PT0gJygnICYmIHBlZWsoMikgIT09ICc/Jykge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ2F0JywgZXh0Z2xvYjogdHJ1ZSwgdmFsdWUsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsYWluIHRleHRcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSAhPT0gJyonKSB7XG4gICAgICBpZiAodmFsdWUgPT09ICckJyB8fCB2YWx1ZSA9PT0gJ14nKSB7XG4gICAgICAgIHZhbHVlID0gYFxcXFwke3ZhbHVlfWA7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1hdGNoID0gUkVHRVhfTk9OX1NQRUNJQUxfQ0hBUlMuZXhlYyhyZW1haW5pbmcoKSk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdmFsdWUgKz0gbWF0Y2hbMF07XG4gICAgICAgIHN0YXRlLmluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFyc1xuICAgICAqL1xuXG4gICAgaWYgKHByZXYgJiYgKHByZXYudHlwZSA9PT0gJ2dsb2JzdGFyJyB8fCBwcmV2LnN0YXIgPT09IHRydWUpKSB7XG4gICAgICBwcmV2LnR5cGUgPSAnc3Rhcic7XG4gICAgICBwcmV2LnN0YXIgPSB0cnVlO1xuICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgIHByZXYub3V0cHV0ID0gc3RhcjtcbiAgICAgIHN0YXRlLmJhY2t0cmFjayA9IHRydWU7XG4gICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICBjb25zdW1lKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCByZXN0ID0gcmVtYWluaW5nKCk7XG4gICAgaWYgKG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIC9eXFwoW14/XS8udGVzdChyZXN0KSkge1xuICAgICAgZXh0Z2xvYk9wZW4oJ3N0YXInLCB2YWx1ZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAocHJldi50eXBlID09PSAnc3RhcicpIHtcbiAgICAgIGlmIChvcHRzLm5vZ2xvYnN0YXIgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmlvciA9IHByZXYucHJldjtcbiAgICAgIGNvbnN0IGJlZm9yZSA9IHByaW9yLnByZXY7XG4gICAgICBjb25zdCBpc1N0YXJ0ID0gcHJpb3IudHlwZSA9PT0gJ3NsYXNoJyB8fCBwcmlvci50eXBlID09PSAnYm9zJztcbiAgICAgIGNvbnN0IGFmdGVyU3RhciA9IGJlZm9yZSAmJiAoYmVmb3JlLnR5cGUgPT09ICdzdGFyJyB8fCBiZWZvcmUudHlwZSA9PT0gJ2dsb2JzdGFyJyk7XG5cbiAgICAgIGlmIChvcHRzLmJhc2ggPT09IHRydWUgJiYgKCFpc1N0YXJ0IHx8IChyZXN0WzBdICYmIHJlc3RbMF0gIT09ICcvJykpKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAnc3RhcicsIHZhbHVlLCBvdXRwdXQ6ICcnIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXNCcmFjZSA9IHN0YXRlLmJyYWNlcyA+IDAgJiYgKHByaW9yLnR5cGUgPT09ICdjb21tYScgfHwgcHJpb3IudHlwZSA9PT0gJ2JyYWNlJyk7XG4gICAgICBjb25zdCBpc0V4dGdsb2IgPSBleHRnbG9icy5sZW5ndGggJiYgKHByaW9yLnR5cGUgPT09ICdwaXBlJyB8fCBwcmlvci50eXBlID09PSAncGFyZW4nKTtcbiAgICAgIGlmICghaXNTdGFydCAmJiBwcmlvci50eXBlICE9PSAncGFyZW4nICYmICFpc0JyYWNlICYmICFpc0V4dGdsb2IpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdzdGFyJywgdmFsdWUsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBzdHJpcCBjb25zZWN1dGl2ZSBgLyoqL2BcbiAgICAgIHdoaWxlIChyZXN0LnNsaWNlKDAsIDMpID09PSAnLyoqJykge1xuICAgICAgICBjb25zdCBhZnRlciA9IGlucHV0W3N0YXRlLmluZGV4ICsgNF07XG4gICAgICAgIGlmIChhZnRlciAmJiBhZnRlciAhPT0gJy8nKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoMyk7XG4gICAgICAgIGNvbnN1bWUoJy8qKicsIDMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ2JvcycgJiYgZW9zKCkpIHtcbiAgICAgICAgcHJldi50eXBlID0gJ2dsb2JzdGFyJztcbiAgICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgICAgcHJldi5vdXRwdXQgPSBnbG9ic3RhcihvcHRzKTtcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gcHJldi5vdXRwdXQ7XG4gICAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ3NsYXNoJyAmJiBwcmlvci5wcmV2LnR5cGUgIT09ICdib3MnICYmICFhZnRlclN0YXIgJiYgZW9zKCkpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIC0ocHJpb3Iub3V0cHV0ICsgcHJldi5vdXRwdXQpLmxlbmd0aCk7XG4gICAgICAgIHByaW9yLm91dHB1dCA9IGAoPzoke3ByaW9yLm91dHB1dH1gO1xuXG4gICAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICAgIHByZXYub3V0cHV0ID0gZ2xvYnN0YXIob3B0cykgKyAob3B0cy5zdHJpY3RTbGFzaGVzID8gJyknIDogJ3wkKScpO1xuICAgICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBwcmlvci5vdXRwdXQgKyBwcmV2Lm91dHB1dDtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ3NsYXNoJyAmJiBwcmlvci5wcmV2LnR5cGUgIT09ICdib3MnICYmIHJlc3RbMF0gPT09ICcvJykge1xuICAgICAgICBjb25zdCBlbmQgPSByZXN0WzFdICE9PSB2b2lkIDAgPyAnfCQnIDogJyc7XG5cbiAgICAgICAgc3RhdGUub3V0cHV0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIC0ocHJpb3Iub3V0cHV0ICsgcHJldi5vdXRwdXQpLmxlbmd0aCk7XG4gICAgICAgIHByaW9yLm91dHB1dCA9IGAoPzoke3ByaW9yLm91dHB1dH1gO1xuXG4gICAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICAgIHByZXYub3V0cHV0ID0gYCR7Z2xvYnN0YXIob3B0cyl9JHtTTEFTSF9MSVRFUkFMfXwke1NMQVNIX0xJVEVSQUx9JHtlbmR9KWA7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG5cbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IHByaW9yLm91dHB1dCArIHByZXYub3V0cHV0O1xuICAgICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG5cbiAgICAgICAgY29uc3VtZSh2YWx1ZSArIGFkdmFuY2UoKSk7XG5cbiAgICAgICAgcHVzaCh7IHR5cGU6ICdzbGFzaCcsIHZhbHVlOiAnLycsIG91dHB1dDogJycgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJpb3IudHlwZSA9PT0gJ2JvcycgJiYgcmVzdFswXSA9PT0gJy8nKSB7XG4gICAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIHByZXYub3V0cHV0ID0gYCg/Ol58JHtTTEFTSF9MSVRFUkFMfXwke2dsb2JzdGFyKG9wdHMpfSR7U0xBU0hfTElURVJBTH0pYDtcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gcHJldi5vdXRwdXQ7XG4gICAgICAgIHN0YXRlLmdsb2JzdGFyID0gdHJ1ZTtcbiAgICAgICAgY29uc3VtZSh2YWx1ZSArIGFkdmFuY2UoKSk7XG4gICAgICAgIHB1c2goeyB0eXBlOiAnc2xhc2gnLCB2YWx1ZTogJy8nLCBvdXRwdXQ6ICcnIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlIHNpbmdsZSBzdGFyIGZyb20gb3V0cHV0XG4gICAgICBzdGF0ZS5vdXRwdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgLXByZXYub3V0cHV0Lmxlbmd0aCk7XG5cbiAgICAgIC8vIHJlc2V0IHByZXZpb3VzIHRva2VuIHRvIGdsb2JzdGFyXG4gICAgICBwcmV2LnR5cGUgPSAnZ2xvYnN0YXInO1xuICAgICAgcHJldi5vdXRwdXQgPSBnbG9ic3RhcihvcHRzKTtcbiAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG5cbiAgICAgIC8vIHJlc2V0IG91dHB1dCB3aXRoIGdsb2JzdGFyXG4gICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJldi5vdXRwdXQ7XG4gICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICBjb25zdW1lKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0geyB0eXBlOiAnc3RhcicsIHZhbHVlLCBvdXRwdXQ6IHN0YXIgfTtcblxuICAgIGlmIChvcHRzLmJhc2ggPT09IHRydWUpIHtcbiAgICAgIHRva2VuLm91dHB1dCA9ICcuKj8nO1xuICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ2JvcycgfHwgcHJldi50eXBlID09PSAnc2xhc2gnKSB7XG4gICAgICAgIHRva2VuLm91dHB1dCA9IG5vZG90ICsgdG9rZW4ub3V0cHV0O1xuICAgICAgfVxuICAgICAgcHVzaCh0b2tlbik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAocHJldiAmJiAocHJldi50eXBlID09PSAnYnJhY2tldCcgfHwgcHJldi50eXBlID09PSAncGFyZW4nKSAmJiBvcHRzLnJlZ2V4ID09PSB0cnVlKSB7XG4gICAgICB0b2tlbi5vdXRwdXQgPSB2YWx1ZTtcbiAgICAgIHB1c2godG9rZW4pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmluZGV4ID09PSBzdGF0ZS5zdGFydCB8fCBwcmV2LnR5cGUgPT09ICdzbGFzaCcgfHwgcHJldi50eXBlID09PSAnZG90Jykge1xuICAgICAgaWYgKHByZXYudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IE5PX0RPVF9TTEFTSDtcbiAgICAgICAgcHJldi5vdXRwdXQgKz0gTk9fRE9UX1NMQVNIO1xuXG4gICAgICB9IGVsc2UgaWYgKG9wdHMuZG90ID09PSB0cnVlKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBOT19ET1RTX1NMQVNIO1xuICAgICAgICBwcmV2Lm91dHB1dCArPSBOT19ET1RTX1NMQVNIO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gbm9kb3Q7XG4gICAgICAgIHByZXYub3V0cHV0ICs9IG5vZG90O1xuICAgICAgfVxuXG4gICAgICBpZiAocGVlaygpICE9PSAnKicpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IE9ORV9DSEFSO1xuICAgICAgICBwcmV2Lm91dHB1dCArPSBPTkVfQ0hBUjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdXNoKHRva2VuKTtcbiAgfVxuXG4gIHdoaWxlIChzdGF0ZS5icmFja2V0cyA+IDApIHtcbiAgICBpZiAob3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdjbG9zaW5nJywgJ10nKSk7XG4gICAgc3RhdGUub3V0cHV0ID0gdXRpbHMuZXNjYXBlTGFzdChzdGF0ZS5vdXRwdXQsICdbJyk7XG4gICAgZGVjcmVtZW50KCdicmFja2V0cycpO1xuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBhcmVucyA+IDApIHtcbiAgICBpZiAob3B0cy5zdHJpY3RCcmFja2V0cyA9PT0gdHJ1ZSkgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdjbG9zaW5nJywgJyknKSk7XG4gICAgc3RhdGUub3V0cHV0ID0gdXRpbHMuZXNjYXBlTGFzdChzdGF0ZS5vdXRwdXQsICcoJyk7XG4gICAgZGVjcmVtZW50KCdwYXJlbnMnKTtcbiAgfVxuXG4gIHdoaWxlIChzdGF0ZS5icmFjZXMgPiAwKSB7XG4gICAgaWYgKG9wdHMuc3RyaWN0QnJhY2tldHMgPT09IHRydWUpIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignY2xvc2luZycsICd9JykpO1xuICAgIHN0YXRlLm91dHB1dCA9IHV0aWxzLmVzY2FwZUxhc3Qoc3RhdGUub3V0cHV0LCAneycpO1xuICAgIGRlY3JlbWVudCgnYnJhY2VzJyk7XG4gIH1cblxuICBpZiAob3B0cy5zdHJpY3RTbGFzaGVzICE9PSB0cnVlICYmIChwcmV2LnR5cGUgPT09ICdzdGFyJyB8fCBwcmV2LnR5cGUgPT09ICdicmFja2V0JykpIHtcbiAgICBwdXNoKHsgdHlwZTogJ21heWJlX3NsYXNoJywgdmFsdWU6ICcnLCBvdXRwdXQ6IGAke1NMQVNIX0xJVEVSQUx9P2AgfSk7XG4gIH1cblxuICAvLyByZWJ1aWxkIHRoZSBvdXRwdXQgaWYgd2UgaGFkIHRvIGJhY2t0cmFjayBhdCBhbnkgcG9pbnRcbiAgaWYgKHN0YXRlLmJhY2t0cmFjayA9PT0gdHJ1ZSkge1xuICAgIHN0YXRlLm91dHB1dCA9ICcnO1xuXG4gICAgZm9yIChjb25zdCB0b2tlbiBvZiBzdGF0ZS50b2tlbnMpIHtcbiAgICAgIHN0YXRlLm91dHB1dCArPSB0b2tlbi5vdXRwdXQgIT0gbnVsbCA/IHRva2VuLm91dHB1dCA6IHRva2VuLnZhbHVlO1xuXG4gICAgICBpZiAodG9rZW4uc3VmZml4KSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSB0b2tlbi5zdWZmaXg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxuLyoqXG4gKiBGYXN0IHBhdGhzIGZvciBjcmVhdGluZyByZWd1bGFyIGV4cHJlc3Npb25zIGZvciBjb21tb24gZ2xvYiBwYXR0ZXJucy5cbiAqIFRoaXMgY2FuIHNpZ25pZmljYW50bHkgc3BlZWQgdXAgcHJvY2Vzc2luZyBhbmQgaGFzIHZlcnkgbGl0dGxlIGRvd25zaWRlXG4gKiBpbXBhY3Qgd2hlbiBub25lIG9mIHRoZSBmYXN0IHBhdGhzIG1hdGNoLlxuICovXG5cbnBhcnNlLmZhc3RwYXRocyA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBvcHRzID0geyAuLi5vcHRpb25zIH07XG4gIGNvbnN0IG1heCA9IHR5cGVvZiBvcHRzLm1heExlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1pbihNQVhfTEVOR1RILCBvcHRzLm1heExlbmd0aCkgOiBNQVhfTEVOR1RIO1xuICBjb25zdCBsZW4gPSBpbnB1dC5sZW5ndGg7XG4gIGlmIChsZW4gPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYElucHV0IGxlbmd0aDogJHtsZW59LCBleGNlZWRzIG1heGltdW0gYWxsb3dlZCBsZW5ndGg6ICR7bWF4fWApO1xuICB9XG5cbiAgaW5wdXQgPSBSRVBMQUNFTUVOVFNbaW5wdXRdIHx8IGlucHV0O1xuICBjb25zdCB3aW4zMiA9IHV0aWxzLmlzV2luZG93cyhvcHRpb25zKTtcblxuICAvLyBjcmVhdGUgY29uc3RhbnRzIGJhc2VkIG9uIHBsYXRmb3JtLCBmb3Igd2luZG93cyBvciBwb3NpeFxuICBjb25zdCB7XG4gICAgRE9UX0xJVEVSQUwsXG4gICAgU0xBU0hfTElURVJBTCxcbiAgICBPTkVfQ0hBUixcbiAgICBET1RTX1NMQVNILFxuICAgIE5PX0RPVCxcbiAgICBOT19ET1RTLFxuICAgIE5PX0RPVFNfU0xBU0gsXG4gICAgU1RBUixcbiAgICBTVEFSVF9BTkNIT1JcbiAgfSA9IGNvbnN0YW50cy5nbG9iQ2hhcnMod2luMzIpO1xuXG4gIGNvbnN0IG5vZG90ID0gb3B0cy5kb3QgPyBOT19ET1RTIDogTk9fRE9UO1xuICBjb25zdCBzbGFzaERvdCA9IG9wdHMuZG90ID8gTk9fRE9UU19TTEFTSCA6IE5PX0RPVDtcbiAgY29uc3QgY2FwdHVyZSA9IG9wdHMuY2FwdHVyZSA/ICcnIDogJz86JztcbiAgY29uc3Qgc3RhdGUgPSB7IG5lZ2F0ZWQ6IGZhbHNlLCBwcmVmaXg6ICcnIH07XG4gIGxldCBzdGFyID0gb3B0cy5iYXNoID09PSB0cnVlID8gJy4qPycgOiBTVEFSO1xuXG4gIGlmIChvcHRzLmNhcHR1cmUpIHtcbiAgICBzdGFyID0gYCgke3N0YXJ9KWA7XG4gIH1cblxuICBjb25zdCBnbG9ic3RhciA9IChvcHRzKSA9PiB7XG4gICAgaWYgKG9wdHMubm9nbG9ic3RhciA9PT0gdHJ1ZSkgcmV0dXJuIHN0YXI7XG4gICAgcmV0dXJuIGAoJHtjYXB0dXJlfSg/Oig/ISR7U1RBUlRfQU5DSE9SfSR7b3B0cy5kb3QgPyBET1RTX1NMQVNIIDogRE9UX0xJVEVSQUx9KS4pKj8pYDtcbiAgfTtcblxuICBjb25zdCBjcmVhdGUgPSBzdHIgPT4ge1xuICAgIHN3aXRjaCAoc3RyKSB7XG4gICAgICBjYXNlICcqJzpcbiAgICAgICAgcmV0dXJuIGAke25vZG90fSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJy4qJzpcbiAgICAgICAgcmV0dXJuIGAke0RPVF9MSVRFUkFMfSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyouKic6XG4gICAgICAgIHJldHVybiBgJHtub2RvdH0ke3N0YXJ9JHtET1RfTElURVJBTH0ke09ORV9DSEFSfSR7c3Rhcn1gO1xuXG4gICAgICBjYXNlICcqLyonOlxuICAgICAgICByZXR1cm4gYCR7bm9kb3R9JHtzdGFyfSR7U0xBU0hfTElURVJBTH0ke09ORV9DSEFSfSR7c2xhc2hEb3R9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyoqJzpcbiAgICAgICAgcmV0dXJuIG5vZG90ICsgZ2xvYnN0YXIob3B0cyk7XG5cbiAgICAgIGNhc2UgJyoqLyonOlxuICAgICAgICByZXR1cm4gYCg/OiR7bm9kb3R9JHtnbG9ic3RhcihvcHRzKX0ke1NMQVNIX0xJVEVSQUx9KT8ke3NsYXNoRG90fSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyoqLyouKic6XG4gICAgICAgIHJldHVybiBgKD86JHtub2RvdH0ke2dsb2JzdGFyKG9wdHMpfSR7U0xBU0hfTElURVJBTH0pPyR7c2xhc2hEb3R9JHtzdGFyfSR7RE9UX0xJVEVSQUx9JHtPTkVfQ0hBUn0ke3N0YXJ9YDtcblxuICAgICAgY2FzZSAnKiovLionOlxuICAgICAgICByZXR1cm4gYCg/OiR7bm9kb3R9JHtnbG9ic3RhcihvcHRzKX0ke1NMQVNIX0xJVEVSQUx9KT8ke0RPVF9MSVRFUkFMfSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSAvXiguKj8pXFwuKFxcdyspJC8uZXhlYyhzdHIpO1xuICAgICAgICBpZiAoIW1hdGNoKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc291cmNlID0gY3JlYXRlKG1hdGNoWzFdKTtcbiAgICAgICAgaWYgKCFzb3VyY2UpIHJldHVybjtcblxuICAgICAgICByZXR1cm4gc291cmNlICsgRE9UX0xJVEVSQUwgKyBtYXRjaFsyXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb3V0cHV0ID0gdXRpbHMucmVtb3ZlUHJlZml4KGlucHV0LCBzdGF0ZSk7XG4gIGxldCBzb3VyY2UgPSBjcmVhdGUob3V0cHV0KTtcblxuICBpZiAoc291cmNlICYmIG9wdHMuc3RyaWN0U2xhc2hlcyAhPT0gdHJ1ZSkge1xuICAgIHNvdXJjZSArPSBgJHtTTEFTSF9MSVRFUkFMfT9gO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBzY2FuID0gcmVxdWlyZSgnLi9zY2FuJyk7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IGlzT2JqZWN0ID0gdmFsID0+IHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWwpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRjaGVyIGZ1bmN0aW9uIGZyb20gb25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucy4gVGhlXG4gKiByZXR1cm5lZCBmdW5jdGlvbiB0YWtlcyBhIHN0cmluZyB0byBtYXRjaCBhcyBpdHMgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgaXMgYSBtYXRjaC4gVGhlIHJldHVybmVkIG1hdGNoZXJcbiAqIGZ1bmN0aW9uIGFsc28gdGFrZXMgYSBib29sZWFuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdGhhdCwgd2hlbiB0cnVlLFxuICogcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaChnbG9iWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IGlzTWF0Y2ggPSBwaWNvbWF0Y2goJyouISgqYSknKTtcbiAqIGNvbnNvbGUubG9nKGlzTWF0Y2goJ2EuYScpKTsgLy89PiBmYWxzZVxuICogY29uc29sZS5sb2coaXNNYXRjaCgnYS5iJykpOyAvLz0+IHRydWVcbiAqIGBgYFxuICogQG5hbWUgcGljb21hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYGdsb2JzYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zLlxuICogQHBhcmFtIHtPYmplY3Q9fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0Z1bmN0aW9uPX0gUmV0dXJucyBhIG1hdGNoZXIgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmNvbnN0IHBpY29tYXRjaCA9IChnbG9iLCBvcHRpb25zLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGdsb2IpKSB7XG4gICAgY29uc3QgZm5zID0gZ2xvYi5tYXAoaW5wdXQgPT4gcGljb21hdGNoKGlucHV0LCBvcHRpb25zLCByZXR1cm5TdGF0ZSkpO1xuICAgIGNvbnN0IGFycmF5TWF0Y2hlciA9IHN0ciA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGlzTWF0Y2ggb2YgZm5zKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gaXNNYXRjaChzdHIpO1xuICAgICAgICBpZiAoc3RhdGUpIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheU1hdGNoZXI7XG4gIH1cblxuICBjb25zdCBpc1N0YXRlID0gaXNPYmplY3QoZ2xvYikgJiYgZ2xvYi50b2tlbnMgJiYgZ2xvYi5pbnB1dDtcblxuICBpZiAoZ2xvYiA9PT0gJycgfHwgKHR5cGVvZiBnbG9iICE9PSAnc3RyaW5nJyAmJiAhaXNTdGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBwYXR0ZXJuIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHBvc2l4ID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpO1xuICBjb25zdCByZWdleCA9IGlzU3RhdGVcbiAgICA/IHBpY29tYXRjaC5jb21waWxlUmUoZ2xvYiwgb3B0aW9ucylcbiAgICA6IHBpY29tYXRjaC5tYWtlUmUoZ2xvYiwgb3B0aW9ucywgZmFsc2UsIHRydWUpO1xuXG4gIGNvbnN0IHN0YXRlID0gcmVnZXguc3RhdGU7XG4gIGRlbGV0ZSByZWdleC5zdGF0ZTtcblxuICBsZXQgaXNJZ25vcmVkID0gKCkgPT4gZmFsc2U7XG4gIGlmIChvcHRzLmlnbm9yZSkge1xuICAgIGNvbnN0IGlnbm9yZU9wdHMgPSB7IC4uLm9wdGlvbnMsIGlnbm9yZTogbnVsbCwgb25NYXRjaDogbnVsbCwgb25SZXN1bHQ6IG51bGwgfTtcbiAgICBpc0lnbm9yZWQgPSBwaWNvbWF0Y2gob3B0cy5pZ25vcmUsIGlnbm9yZU9wdHMsIHJldHVyblN0YXRlKTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZXIgPSAoaW5wdXQsIHJldHVybk9iamVjdCA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgeyBpc01hdGNoLCBtYXRjaCwgb3V0cHV0IH0gPSBwaWNvbWF0Y2gudGVzdChpbnB1dCwgcmVnZXgsIG9wdGlvbnMsIHsgZ2xvYiwgcG9zaXggfSk7XG4gICAgY29uc3QgcmVzdWx0ID0geyBnbG9iLCBzdGF0ZSwgcmVnZXgsIHBvc2l4LCBpbnB1dCwgb3V0cHV0LCBtYXRjaCwgaXNNYXRjaCB9O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRzLm9uUmVzdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRzLm9uUmVzdWx0KHJlc3VsdCk7XG4gICAgfVxuXG4gICAgaWYgKGlzTWF0Y2ggPT09IGZhbHNlKSB7XG4gICAgICByZXN1bHQuaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJldHVybk9iamVjdCA/IHJlc3VsdCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc0lnbm9yZWQoaW5wdXQpKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdHMub25JZ25vcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3B0cy5vbklnbm9yZShyZXN1bHQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXR1cm5PYmplY3QgPyByZXN1bHQgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMub25NYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0cy5vbk1hdGNoKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5PYmplY3QgPyByZXN1bHQgOiB0cnVlO1xuICB9O1xuXG4gIGlmIChyZXR1cm5TdGF0ZSkge1xuICAgIG1hdGNoZXIuc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVyO1xufTtcblxuLyoqXG4gKiBUZXN0IGBpbnB1dGAgd2l0aCB0aGUgZ2l2ZW4gYHJlZ2V4YC4gVGhpcyBpcyB1c2VkIGJ5IHRoZSBtYWluXG4gKiBgcGljb21hdGNoKClgIGZ1bmN0aW9uIHRvIHRlc3QgdGhlIGlucHV0IHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2gudGVzdChpbnB1dCwgcmVnZXhbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cocGljb21hdGNoLnRlc3QoJ2Zvby9iYXInLCAvXig/OihbXi9dKj8pXFwvKFteL10qPykpJC8pKTtcbiAqIC8vIHsgaXNNYXRjaDogdHJ1ZSwgbWF0Y2g6IFsgJ2Zvby8nLCAnZm9vJywgJ2JhcicgXSwgb3V0cHV0OiAnZm9vL2JhcicgfVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7UmVnRXhwfSBgcmVnZXhgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggbWF0Y2hpbmcgaW5mby5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLnRlc3QgPSAoaW5wdXQsIHJlZ2V4LCBvcHRpb25zLCB7IGdsb2IsIHBvc2l4IH0gPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGlucHV0IHRvIGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBpZiAoaW5wdXQgPT09ICcnKSB7XG4gICAgcmV0dXJuIHsgaXNNYXRjaDogZmFsc2UsIG91dHB1dDogJycgfTtcbiAgfVxuXG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBmb3JtYXQgPSBvcHRzLmZvcm1hdCB8fCAocG9zaXggPyB1dGlscy50b1Bvc2l4U2xhc2hlcyA6IG51bGwpO1xuICBsZXQgbWF0Y2ggPSBpbnB1dCA9PT0gZ2xvYjtcbiAgbGV0IG91dHB1dCA9IChtYXRjaCAmJiBmb3JtYXQpID8gZm9ybWF0KGlucHV0KSA6IGlucHV0O1xuXG4gIGlmIChtYXRjaCA9PT0gZmFsc2UpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXQgPyBmb3JtYXQoaW5wdXQpIDogaW5wdXQ7XG4gICAgbWF0Y2ggPSBvdXRwdXQgPT09IGdsb2I7XG4gIH1cblxuICBpZiAobWF0Y2ggPT09IGZhbHNlIHx8IG9wdHMuY2FwdHVyZSA9PT0gdHJ1ZSkge1xuICAgIGlmIChvcHRzLm1hdGNoQmFzZSA9PT0gdHJ1ZSB8fCBvcHRzLmJhc2VuYW1lID09PSB0cnVlKSB7XG4gICAgICBtYXRjaCA9IHBpY29tYXRjaC5tYXRjaEJhc2UoaW5wdXQsIHJlZ2V4LCBvcHRpb25zLCBwb3NpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoID0gcmVnZXguZXhlYyhvdXRwdXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGlzTWF0Y2g6IEJvb2xlYW4obWF0Y2gpLCBtYXRjaCwgb3V0cHV0IH07XG59O1xuXG4vKipcbiAqIE1hdGNoIHRoZSBiYXNlbmFtZSBvZiBhIGZpbGVwYXRoLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC5tYXRjaEJhc2UoaW5wdXQsIGdsb2JbLCBvcHRpb25zXSk7XG4gKiBjb25zb2xlLmxvZyhwaWNvbWF0Y2gubWF0Y2hCYXNlKCdmb28vYmFyLmpzJywgJyouanMnKTsgLy8gdHJ1ZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gYGdsb2JgIEdsb2IgcGF0dGVybiBvciByZWdleCBjcmVhdGVkIGJ5IFsubWFrZVJlXSgjbWFrZVJlKS5cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5tYXRjaEJhc2UgPSAoaW5wdXQsIGdsb2IsIG9wdGlvbnMsIHBvc2l4ID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gZ2xvYiBpbnN0YW5jZW9mIFJlZ0V4cCA/IGdsb2IgOiBwaWNvbWF0Y2gubWFrZVJlKGdsb2IsIG9wdGlvbnMpO1xuICByZXR1cm4gcmVnZXgudGVzdChwYXRoLmJhc2VuYW1lKGlucHV0KSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiAqKmFueSoqIG9mIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuc2AgbWF0Y2ggdGhlIHNwZWNpZmllZCBgc3RyaW5nYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2guaXNNYXRjaChzdHJpbmcsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5pc01hdGNoKCdhLmEnLCBbJ2IuKicsICcqLmEnXSkpOyAvLz0+IHRydWVcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5pc01hdGNoKCdhLmEnLCAnYi4qJykpOyAvLz0+IGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBzdHIgVGhlIHN0cmluZyB0byB0ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBhdHRlcm5zIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpLlxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwYXR0ZXJucyBtYXRjaCBgc3RyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2guaXNNYXRjaCA9IChzdHIsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiBwaWNvbWF0Y2gocGF0dGVybnMsIG9wdGlvbnMpKHN0cik7XG5cbi8qKlxuICogUGFyc2UgYSBnbG9iIHBhdHRlcm4gdG8gY3JlYXRlIHRoZSBzb3VyY2Ugc3RyaW5nIGZvciBhIHJlZ3VsYXJcbiAqIGV4cHJlc3Npb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogY29uc3QgcmVzdWx0ID0gcGljb21hdGNoLnBhcnNlKHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmBcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB1c2VmdWwgcHJvcGVydGllcyBhbmQgb3V0cHV0IHRvIGJlIHVzZWQgYXMgYSByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2gucGFyc2UgPSAocGF0dGVybiwgb3B0aW9ucykgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkgcmV0dXJuIHBhdHRlcm4ubWFwKHAgPT4gcGljb21hdGNoLnBhcnNlKHAsIG9wdGlvbnMpKTtcbiAgcmV0dXJuIHBhcnNlKHBhdHRlcm4sIHsgLi4ub3B0aW9ucywgZmFzdHBhdGhzOiBmYWxzZSB9KTtcbn07XG5cbi8qKlxuICogU2NhbiBhIGdsb2IgcGF0dGVybiB0byBzZXBhcmF0ZSB0aGUgcGF0dGVybiBpbnRvIHNlZ21lbnRzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC5zY2FuKGlucHV0Wywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IHBpY29tYXRjaC5zY2FuKCchLi9mb28vKi5qcycpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTtcbiAqIHsgcHJlZml4OiAnIS4vJyxcbiAqICAgaW5wdXQ6ICchLi9mb28vKi5qcycsXG4gKiAgIHN0YXJ0OiAzLFxuICogICBiYXNlOiAnZm9vJyxcbiAqICAgZ2xvYjogJyouanMnLFxuICogICBpc0JyYWNlOiBmYWxzZSxcbiAqICAgaXNCcmFja2V0OiBmYWxzZSxcbiAqICAgaXNHbG9iOiB0cnVlLFxuICogICBpc0V4dGdsb2I6IGZhbHNlLFxuICogICBpc0dsb2JzdGFyOiBmYWxzZSxcbiAqICAgbmVnYXRlZDogdHJ1ZSB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIEdsb2IgcGF0dGVybiB0byBzY2FuLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5zY2FuID0gKGlucHV0LCBvcHRpb25zKSA9PiBzY2FuKGlucHV0LCBvcHRpb25zKTtcblxuLyoqXG4gKiBDcmVhdGUgYSByZWd1bGFyIGV4cHJlc3Npb24gZnJvbSBhIGdsb2IgcGF0dGVybi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2gubWFrZVJlKGlucHV0Wywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5tYWtlUmUoJyouanMnKSk7XG4gKiAvLz0+IC9eKD86KD8hXFwuKSg/PS4pW14vXSo/XFwuanMpJC9cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBpbnB1dGAgQSBnbG9iIHBhdHRlcm4gdG8gY29udmVydCB0byByZWdleC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge1JlZ0V4cH0gUmV0dXJucyBhIHJlZ2V4IGNyZWF0ZWQgZnJvbSB0aGUgZ2l2ZW4gcGF0dGVybi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLmNvbXBpbGVSZSA9IChwYXJzZWQsIG9wdGlvbnMsIHJldHVybk91dHB1dCA9IGZhbHNlLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmIChyZXR1cm5PdXRwdXQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gcGFyc2VkLm91dHB1dDtcbiAgfVxuXG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBwcmVwZW5kID0gb3B0cy5jb250YWlucyA/ICcnIDogJ14nO1xuICBjb25zdCBhcHBlbmQgPSBvcHRzLmNvbnRhaW5zID8gJycgOiAnJCc7XG5cbiAgbGV0IHNvdXJjZSA9IGAke3ByZXBlbmR9KD86JHtwYXJzZWQub3V0cHV0fSkke2FwcGVuZH1gO1xuICBpZiAocGFyc2VkICYmIHBhcnNlZC5uZWdhdGVkID09PSB0cnVlKSB7XG4gICAgc291cmNlID0gYF4oPyEke3NvdXJjZX0pLiokYDtcbiAgfVxuXG4gIGNvbnN0IHJlZ2V4ID0gcGljb21hdGNoLnRvUmVnZXgoc291cmNlLCBvcHRpb25zKTtcbiAgaWYgKHJldHVyblN0YXRlID09PSB0cnVlKSB7XG4gICAgcmVnZXguc3RhdGUgPSBwYXJzZWQ7XG4gIH1cblxuICByZXR1cm4gcmVnZXg7XG59O1xuXG5waWNvbWF0Y2gubWFrZVJlID0gKGlucHV0LCBvcHRpb25zLCByZXR1cm5PdXRwdXQgPSBmYWxzZSwgcmV0dXJuU3RhdGUgPSBmYWxzZSkgPT4ge1xuICBpZiAoIWlucHV0IHx8IHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgfVxuXG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgcGFyc2VkID0geyBuZWdhdGVkOiBmYWxzZSwgZmFzdHBhdGhzOiB0cnVlIH07XG4gIGxldCBwcmVmaXggPSAnJztcbiAgbGV0IG91dHB1dDtcblxuICBpZiAoaW5wdXQuc3RhcnRzV2l0aCgnLi8nKSkge1xuICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMik7XG4gICAgcHJlZml4ID0gcGFyc2VkLnByZWZpeCA9ICcuLyc7XG4gIH1cblxuICBpZiAob3B0cy5mYXN0cGF0aHMgIT09IGZhbHNlICYmIChpbnB1dFswXSA9PT0gJy4nIHx8IGlucHV0WzBdID09PSAnKicpKSB7XG4gICAgb3V0cHV0ID0gcGFyc2UuZmFzdHBhdGhzKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChvdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHBhcnNlZCA9IHBhcnNlKGlucHV0LCBvcHRpb25zKTtcbiAgICBwYXJzZWQucHJlZml4ID0gcHJlZml4ICsgKHBhcnNlZC5wcmVmaXggfHwgJycpO1xuICB9IGVsc2Uge1xuICAgIHBhcnNlZC5vdXRwdXQgPSBvdXRwdXQ7XG4gIH1cblxuICByZXR1cm4gcGljb21hdGNoLmNvbXBpbGVSZShwYXJzZWQsIG9wdGlvbnMsIHJldHVybk91dHB1dCwgcmV0dXJuU3RhdGUpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSByZWd1bGFyIGV4cHJlc3Npb24gZnJvbSB0aGUgZ2l2ZW4gcmVnZXggc291cmNlIHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2gudG9SZWdleChzb3VyY2VbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc3QgeyBvdXRwdXQgfSA9IHBpY29tYXRjaC5wYXJzZSgnKi5qcycpO1xuICogY29uc29sZS5sb2cocGljb21hdGNoLnRvUmVnZXgob3V0cHV0KSk7XG4gKiAvLz0+IC9eKD86KD8hXFwuKSg/PS4pW14vXSo/XFwuanMpJC9cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzb3VyY2VgIFJlZ3VsYXIgZXhwcmVzc2lvbiBzb3VyY2Ugc3RyaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7UmVnRXhwfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2gudG9SZWdleCA9IChzb3VyY2UsIG9wdGlvbnMpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcHRzID0gb3B0aW9ucyB8fCB7fTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzb3VyY2UsIG9wdHMuZmxhZ3MgfHwgKG9wdHMubm9jYXNlID8gJ2knIDogJycpKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1ZyA9PT0gdHJ1ZSkgdGhyb3cgZXJyO1xuICAgIHJldHVybiAvJF4vO1xuICB9XG59O1xuXG4vKipcbiAqIFBpY29tYXRjaCBjb25zdGFudHMuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxucGljb21hdGNoLmNvbnN0YW50cyA9IGNvbnN0YW50cztcblxuLyoqXG4gKiBFeHBvc2UgXCJwaWNvbWF0Y2hcIlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcGljb21hdGNoO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG5jb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgncGljb21hdGNoL2xpYi91dGlscycpO1xuY29uc3QgaXNFbXB0eVN0cmluZyA9IHZhbCA9PiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiAodmFsID09PSAnJyB8fCB2YWwgPT09ICcuLycpO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc3RyaW5ncyB0aGF0IG1hdGNoIG9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0obGlzdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0oWydhLmpzJywgJ2EudHh0J10sIFsnKi5qcyddKSk7XG4gKiAvLz0+IFsgJ2EuanMnIF1cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXk8c3RyaW5nPn0gbGlzdCBMaXN0IG9mIHN0cmluZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheTxzdHJpbmc+fSBwYXR0ZXJucyBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucylcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIG1hdGNoZXNcbiAqIEBzdW1tYXJ5IGZhbHNlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmNvbnN0IG1pY3JvbWF0Y2ggPSAobGlzdCwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHtcbiAgcGF0dGVybnMgPSBbXS5jb25jYXQocGF0dGVybnMpO1xuICBsaXN0ID0gW10uY29uY2F0KGxpc3QpO1xuXG4gIGxldCBvbWl0ID0gbmV3IFNldCgpO1xuICBsZXQga2VlcCA9IG5ldyBTZXQoKTtcbiAgbGV0IGl0ZW1zID0gbmV3IFNldCgpO1xuICBsZXQgbmVnYXRpdmVzID0gMDtcblxuICBsZXQgb25SZXN1bHQgPSBzdGF0ZSA9PiB7XG4gICAgaXRlbXMuYWRkKHN0YXRlLm91dHB1dCk7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vblJlc3VsdCkge1xuICAgICAgb3B0aW9ucy5vblJlc3VsdChzdGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybnMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaXNNYXRjaCA9IHBpY29tYXRjaChTdHJpbmcocGF0dGVybnNbaV0pLCB7IC4uLm9wdGlvbnMsIG9uUmVzdWx0IH0sIHRydWUpO1xuICAgIGxldCBuZWdhdGVkID0gaXNNYXRjaC5zdGF0ZS5uZWdhdGVkIHx8IGlzTWF0Y2guc3RhdGUubmVnYXRlZEV4dGdsb2I7XG4gICAgaWYgKG5lZ2F0ZWQpIG5lZ2F0aXZlcysrO1xuXG4gICAgZm9yIChsZXQgaXRlbSBvZiBsaXN0KSB7XG4gICAgICBsZXQgbWF0Y2hlZCA9IGlzTWF0Y2goaXRlbSwgdHJ1ZSk7XG5cbiAgICAgIGxldCBtYXRjaCA9IG5lZ2F0ZWQgPyAhbWF0Y2hlZC5pc01hdGNoIDogbWF0Y2hlZC5pc01hdGNoO1xuICAgICAgaWYgKCFtYXRjaCkgY29udGludWU7XG5cbiAgICAgIGlmIChuZWdhdGVkKSB7XG4gICAgICAgIG9taXQuYWRkKG1hdGNoZWQub3V0cHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9taXQuZGVsZXRlKG1hdGNoZWQub3V0cHV0KTtcbiAgICAgICAga2VlcC5hZGQobWF0Y2hlZC5vdXRwdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQgPSBuZWdhdGl2ZXMgPT09IHBhdHRlcm5zLmxlbmd0aCA/IFsuLi5pdGVtc10gOiBbLi4ua2VlcF07XG4gIGxldCBtYXRjaGVzID0gcmVzdWx0LmZpbHRlcihpdGVtID0+ICFvbWl0LmhhcyhpdGVtKSk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgbWF0Y2hlcy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAob3B0aW9ucy5mYWlsZ2xvYiA9PT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBtYXRjaGVzIGZvdW5kIGZvciBcIiR7cGF0dGVybnMuam9pbignLCAnKX1cImApO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm5vbnVsbCA9PT0gdHJ1ZSB8fCBvcHRpb25zLm51bGxnbG9iID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy51bmVzY2FwZSA/IHBhdHRlcm5zLm1hcChwID0+IHAucmVwbGFjZSgvXFxcXC9nLCAnJykpIDogcGF0dGVybnM7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59O1xuXG4vKipcbiAqIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gKi9cblxubWljcm9tYXRjaC5tYXRjaCA9IG1pY3JvbWF0Y2g7XG5cbi8qKlxuICogUmV0dXJucyBhIG1hdGNoZXIgZnVuY3Rpb24gZnJvbSB0aGUgZ2l2ZW4gZ2xvYiBgcGF0dGVybmAgYW5kIGBvcHRpb25zYC5cbiAqIFRoZSByZXR1cm5lZCBmdW5jdGlvbiB0YWtlcyBhIHN0cmluZyB0byBtYXRjaCBhcyBpdHMgb25seSBhcmd1bWVudCBhbmQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgc3RyaW5nIGlzIGEgbWF0Y2guXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0ubWF0Y2hlcihwYXR0ZXJuWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IGlzTWF0Y2ggPSBtbS5tYXRjaGVyKCcqLiEoKmEpJyk7XG4gKiBjb25zb2xlLmxvZyhpc01hdGNoKCdhLmEnKSk7IC8vPT4gZmFsc2VcbiAqIGNvbnNvbGUubG9nKGlzTWF0Y2goJ2EuYicpKTsgLy89PiB0cnVlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgR2xvYiBwYXR0ZXJuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gUmV0dXJucyBhIG1hdGNoZXIgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2gubWF0Y2hlciA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiBwaWNvbWF0Y2gocGF0dGVybiwgb3B0aW9ucyk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmICoqYW55Kiogb2YgdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5zYCBtYXRjaCB0aGUgc3BlY2lmaWVkIGBzdHJpbmdgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmlzTWF0Y2goc3RyaW5nLCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5pc01hdGNoKCdhLmEnLCBbJ2IuKicsICcqLmEnXSkpOyAvLz0+IHRydWVcbiAqIGNvbnNvbGUubG9nKG1tLmlzTWF0Y2goJ2EuYScsICdiLionKSk7IC8vPT4gZmFsc2VcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHRlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gcGF0dGVybnMgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYW55IHBhdHRlcm5zIG1hdGNoIGBzdHJgXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guaXNNYXRjaCA9IChzdHIsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiBwaWNvbWF0Y2gocGF0dGVybnMsIG9wdGlvbnMpKHN0cik7XG5cbi8qKlxuICogQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAqL1xuXG5taWNyb21hdGNoLmFueSA9IG1pY3JvbWF0Y2guaXNNYXRjaDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBzdHJpbmdzIHRoYXQgXyoqZG8gbm90IG1hdGNoIGFueSoqXyBvZiB0aGUgZ2l2ZW4gYHBhdHRlcm5zYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5ub3QobGlzdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0ubm90KFsnYS5hJywgJ2IuYicsICdjLmMnXSwgJyouYScpKTtcbiAqIC8vPT4gWydiLmInLCAnYy5jJ11cbiAqIGBgYFxuICogQHBhcmFtIHtBcnJheX0gYGxpc3RgIEFycmF5IG9mIHN0cmluZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm4gdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtBcnJheX0gUmV0dXJucyBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgKipkbyBub3QgbWF0Y2gqKiB0aGUgZ2l2ZW4gcGF0dGVybnMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2gubm90ID0gKGxpc3QsIHBhdHRlcm5zLCBvcHRpb25zID0ge30pID0+IHtcbiAgcGF0dGVybnMgPSBbXS5jb25jYXQocGF0dGVybnMpLm1hcChTdHJpbmcpO1xuICBsZXQgcmVzdWx0ID0gbmV3IFNldCgpO1xuICBsZXQgaXRlbXMgPSBbXTtcblxuICBsZXQgb25SZXN1bHQgPSBzdGF0ZSA9PiB7XG4gICAgaWYgKG9wdGlvbnMub25SZXN1bHQpIG9wdGlvbnMub25SZXN1bHQoc3RhdGUpO1xuICAgIGl0ZW1zLnB1c2goc3RhdGUub3V0cHV0KTtcbiAgfTtcblxuICBsZXQgbWF0Y2hlcyA9IG1pY3JvbWF0Y2gobGlzdCwgcGF0dGVybnMsIHsgLi4ub3B0aW9ucywgb25SZXN1bHQgfSk7XG5cbiAgZm9yIChsZXQgaXRlbSBvZiBpdGVtcykge1xuICAgIGlmICghbWF0Y2hlcy5pbmNsdWRlcyhpdGVtKSkge1xuICAgICAgcmVzdWx0LmFkZChpdGVtKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFsuLi5yZXN1bHRdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGBzdHJpbmdgIGNvbnRhaW5zIHRoZSBnaXZlbiBwYXR0ZXJuLiBTaW1pbGFyXG4gKiB0byBbLmlzTWF0Y2hdKCNpc01hdGNoKSBidXQgdGhlIHBhdHRlcm4gY2FuIG1hdGNoIGFueSBwYXJ0IG9mIHRoZSBzdHJpbmcuXG4gKlxuICogYGBganNcbiAqIHZhciBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmNvbnRhaW5zKHN0cmluZywgcGF0dGVyblssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5jb250YWlucygnYWEvYmIvY2MnLCAnKmInKSk7XG4gKiAvLz0+IHRydWVcbiAqIGNvbnNvbGUubG9nKG1tLmNvbnRhaW5zKCdhYS9iYi9jYycsICcqZCcpKTtcbiAqIC8vPT4gZmFsc2VcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBzdHJgIFRoZSBzdHJpbmcgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBHbG9iIHBhdHRlcm4gdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHBhdHRlciBtYXRjaGVzIGFueSBwYXJ0IG9mIGBzdHJgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmNvbnRhaW5zID0gKHN0ciwgcGF0dGVybiwgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBhIHN0cmluZzogXCIke3V0aWwuaW5zcGVjdChzdHIpfVwiYCk7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnNvbWUocCA9PiBtaWNyb21hdGNoLmNvbnRhaW5zKHN0ciwgcCwgb3B0aW9ucykpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIGlmIChpc0VtcHR5U3RyaW5nKHN0cikgfHwgaXNFbXB0eVN0cmluZyhwYXR0ZXJuKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzdHIuaW5jbHVkZXMocGF0dGVybikgfHwgKHN0ci5zdGFydHNXaXRoKCcuLycpICYmIHN0ci5zbGljZSgyKS5pbmNsdWRlcyhwYXR0ZXJuKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaWNyb21hdGNoLmlzTWF0Y2goc3RyLCBwYXR0ZXJuLCB7IC4uLm9wdGlvbnMsIGNvbnRhaW5zOiB0cnVlIH0pO1xufTtcblxuLyoqXG4gKiBGaWx0ZXIgdGhlIGtleXMgb2YgdGhlIGdpdmVuIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBgZ2xvYmAgcGF0dGVyblxuICogYW5kIGBvcHRpb25zYC4gRG9lcyBub3QgYXR0ZW1wdCB0byBtYXRjaCBuZXN0ZWQga2V5cy4gSWYgeW91IG5lZWQgdGhpcyBmZWF0dXJlLFxuICogdXNlIFtnbG9iLW9iamVjdF1bXSBpbnN0ZWFkLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLm1hdGNoS2V5cyhvYmplY3QsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IG9iaiA9IHsgYWE6ICdhJywgYWI6ICdiJywgYWM6ICdjJyB9O1xuICogY29uc29sZS5sb2cobW0ubWF0Y2hLZXlzKG9iaiwgJypiJykpO1xuICogLy89PiB7IGFiOiAnYicgfVxuICogYGBgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9iamVjdGAgVGhlIG9iamVjdCB3aXRoIGtleXMgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBvbmx5IGtleXMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gcGF0dGVybnMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2gubWF0Y2hLZXlzID0gKG9iaiwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHtcbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIGxldCBrZXlzID0gbWljcm9tYXRjaChPYmplY3Qua2V5cyhvYmopLCBwYXR0ZXJucywgb3B0aW9ucyk7XG4gIGxldCByZXMgPSB7fTtcbiAgZm9yIChsZXQga2V5IG9mIGtleXMpIHJlc1trZXldID0gb2JqW2tleV07XG4gIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBzb21lIG9mIHRoZSBzdHJpbmdzIGluIHRoZSBnaXZlbiBgbGlzdGAgbWF0Y2ggYW55IG9mIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuc2AuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0uc29tZShsaXN0LCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5zb21lKFsnZm9vLmpzJywgJ2Jhci5qcyddLCBbJyouanMnLCAnIWZvby5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKiBjb25zb2xlLmxvZyhtbS5zb21lKFsnZm9vLmpzJ10sIFsnKi5qcycsICchZm9vLmpzJ10pKTtcbiAqIC8vIGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgbGlzdGAgVGhlIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzIHRvIHRlc3QuIFJldHVybnMgYXMgc29vbiBhcyB0aGUgZmlyc3QgbWF0Y2ggaXMgZm91bmQuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwYXR0ZXJucyBtYXRjaCBgc3RyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLnNvbWUgPSAobGlzdCwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHtcbiAgbGV0IGl0ZW1zID0gW10uY29uY2F0KGxpc3QpO1xuXG4gIGZvciAobGV0IHBhdHRlcm4gb2YgW10uY29uY2F0KHBhdHRlcm5zKSkge1xuICAgIGxldCBpc01hdGNoID0gcGljb21hdGNoKFN0cmluZyhwYXR0ZXJuKSwgb3B0aW9ucyk7XG4gICAgaWYgKGl0ZW1zLnNvbWUoaXRlbSA9PiBpc01hdGNoKGl0ZW0pKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGV2ZXJ5IHN0cmluZyBpbiB0aGUgZ2l2ZW4gYGxpc3RgIG1hdGNoZXNcbiAqIGFueSBvZiB0aGUgZ2l2ZW4gZ2xvYiBgcGF0dGVybnNgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLmV2ZXJ5KGxpc3QsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLmV2ZXJ5KCdmb28uanMnLCBbJ2Zvby5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKiBjb25zb2xlLmxvZyhtbS5ldmVyeShbJ2Zvby5qcycsICdiYXIuanMnXSwgWycqLmpzJ10pKTtcbiAqIC8vIHRydWVcbiAqIGNvbnNvbGUubG9nKG1tLmV2ZXJ5KFsnZm9vLmpzJywgJ2Jhci5qcyddLCBbJyouanMnLCAnIWZvby5qcyddKSk7XG4gKiAvLyBmYWxzZVxuICogY29uc29sZS5sb2cobW0uZXZlcnkoWydmb28uanMnXSwgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gZmFsc2VcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBsaXN0YCBUaGUgc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ3MgdG8gdGVzdC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYW55IHBhdHRlcm5zIG1hdGNoIGBzdHJgXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guZXZlcnkgPSAobGlzdCwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHtcbiAgbGV0IGl0ZW1zID0gW10uY29uY2F0KGxpc3QpO1xuXG4gIGZvciAobGV0IHBhdHRlcm4gb2YgW10uY29uY2F0KHBhdHRlcm5zKSkge1xuICAgIGxldCBpc01hdGNoID0gcGljb21hdGNoKFN0cmluZyhwYXR0ZXJuKSwgb3B0aW9ucyk7XG4gICAgaWYgKCFpdGVtcy5ldmVyeShpdGVtID0+IGlzTWF0Y2goaXRlbSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgKiphbGwqKiBvZiB0aGUgZ2l2ZW4gYHBhdHRlcm5zYCBtYXRjaFxuICogdGhlIHNwZWNpZmllZCBzdHJpbmcuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0uYWxsKHN0cmluZywgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uYWxsKCdmb28uanMnLCBbJ2Zvby5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKlxuICogY29uc29sZS5sb2cobW0uYWxsKCdmb28uanMnLCBbJyouanMnLCAnIWZvby5qcyddKSk7XG4gKiAvLyBmYWxzZVxuICpcbiAqIGNvbnNvbGUubG9nKG1tLmFsbCgnZm9vLmpzJywgWycqLmpzJywgJ2Zvby5qcyddKSk7XG4gKiAvLyB0cnVlXG4gKlxuICogY29uc29sZS5sb2cobW0uYWxsKCdmb28uanMnLCBbJyouanMnLCAnZionLCAnKm8qJywgJypvLmpzJ10pKTtcbiAqIC8vIHRydWVcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBzdHJgIFRoZSBzdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYW55IHBhdHRlcm5zIG1hdGNoIGBzdHJgXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guYWxsID0gKHN0ciwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgYSBzdHJpbmc6IFwiJHt1dGlsLmluc3BlY3Qoc3RyKX1cImApO1xuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChwYXR0ZXJucykuZXZlcnkocCA9PiBwaWNvbWF0Y2gocCwgb3B0aW9ucykoc3RyKSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgbWF0Y2hlcyBjYXB0dXJlZCBieSBgcGF0dGVybmAgaW4gYHN0cmluZywgb3IgYG51bGxgIGlmIHRoZSBwYXR0ZXJuIGRpZCBub3QgbWF0Y2guXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0uY2FwdHVyZShwYXR0ZXJuLCBzdHJpbmdbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uY2FwdHVyZSgndGVzdC8qLmpzJywgJ3Rlc3QvZm9vLmpzJykpO1xuICogLy89PiBbJ2ZvbyddXG4gKiBjb25zb2xlLmxvZyhtbS5jYXB0dXJlKCd0ZXN0LyouanMnLCAnZm9vL2Jhci5jc3MnKSk7XG4gKiAvLz0+IG51bGxcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBnbG9iYCBHbG9iIHBhdHRlcm4gdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIFN0cmluZyB0byBtYXRjaFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgYW4gYXJyYXkgb2YgY2FwdHVyZXMgaWYgdGhlIGlucHV0IG1hdGNoZXMgdGhlIGdsb2IgcGF0dGVybiwgb3RoZXJ3aXNlIGBudWxsYC5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5jYXB0dXJlID0gKGdsb2IsIGlucHV0LCBvcHRpb25zKSA9PiB7XG4gIGxldCBwb3NpeCA9IHV0aWxzLmlzV2luZG93cyhvcHRpb25zKTtcbiAgbGV0IHJlZ2V4ID0gcGljb21hdGNoLm1ha2VSZShTdHJpbmcoZ2xvYiksIHsgLi4ub3B0aW9ucywgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgbGV0IG1hdGNoID0gcmVnZXguZXhlYyhwb3NpeCA/IHV0aWxzLnRvUG9zaXhTbGFzaGVzKGlucHV0KSA6IGlucHV0KTtcblxuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4gbWF0Y2guc2xpY2UoMSkubWFwKHYgPT4gdiA9PT0gdm9pZCAwID8gJycgOiB2KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGUgYSByZWd1bGFyIGV4cHJlc3Npb24gZnJvbSB0aGUgZ2l2ZW4gZ2xvYiBgcGF0dGVybmAuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0ubWFrZVJlKHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0ubWFrZVJlKCcqLmpzJykpO1xuICogLy89PiAvXig/OihcXC5bXFxcXFxcL10pPyg/IVxcLikoPz0uKVteXFwvXSo/XFwuanMpJC9cbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYCBBIGdsb2IgcGF0dGVybiB0byBjb252ZXJ0IHRvIHJlZ2V4LlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7UmVnRXhwfSBSZXR1cm5zIGEgcmVnZXggY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiBwYXR0ZXJuLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLm1ha2VSZSA9ICguLi5hcmdzKSA9PiBwaWNvbWF0Y2gubWFrZVJlKC4uLmFyZ3MpO1xuXG4vKipcbiAqIFNjYW4gYSBnbG9iIHBhdHRlcm4gdG8gc2VwYXJhdGUgdGhlIHBhdHRlcm4gaW50byBzZWdtZW50cy4gVXNlZFxuICogYnkgdGhlIFtzcGxpdF0oI3NwbGl0KSBtZXRob2QuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogY29uc3Qgc3RhdGUgPSBtbS5zY2FuKHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmBcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLnNjYW4gPSAoLi4uYXJncykgPT4gcGljb21hdGNoLnNjYW4oLi4uYXJncyk7XG5cbi8qKlxuICogUGFyc2UgYSBnbG9iIHBhdHRlcm4gdG8gY3JlYXRlIHRoZSBzb3VyY2Ugc3RyaW5nIGZvciBhIHJlZ3VsYXJcbiAqIGV4cHJlc3Npb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogY29uc3Qgc3RhdGUgPSBtbShwYXR0ZXJuWywgb3B0aW9uc10pO1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGdsb2JgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggdXNlZnVsIHByb3BlcnRpZXMgYW5kIG91dHB1dCB0byBiZSB1c2VkIGFzIHJlZ2V4IHNvdXJjZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2gucGFyc2UgPSAocGF0dGVybnMsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHJlcyA9IFtdO1xuICBmb3IgKGxldCBwYXR0ZXJuIG9mIFtdLmNvbmNhdChwYXR0ZXJucyB8fCBbXSkpIHtcbiAgICBmb3IgKGxldCBzdHIgb2YgYnJhY2VzKFN0cmluZyhwYXR0ZXJuKSwgb3B0aW9ucykpIHtcbiAgICAgIHJlcy5wdXNoKHBpY29tYXRjaC5wYXJzZShzdHIsIG9wdGlvbnMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogUHJvY2VzcyB0aGUgZ2l2ZW4gYnJhY2UgYHBhdHRlcm5gLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB7IGJyYWNlcyB9ID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogY29uc29sZS5sb2coYnJhY2VzKCdmb28ve2EsYixjfS9iYXInKSk7XG4gKiAvLz0+IFsgJ2Zvby8oYXxifGMpL2JhcicgXVxuICpcbiAqIGNvbnNvbGUubG9nKGJyYWNlcygnZm9vL3thLGIsY30vYmFyJywgeyBleHBhbmQ6IHRydWUgfSkpO1xuICogLy89PiBbICdmb28vYS9iYXInLCAnZm9vL2IvYmFyJywgJ2Zvby9jL2JhcicgXVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHBhdHRlcm5gIFN0cmluZyB3aXRoIGJyYWNlIHBhdHRlcm4gdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgQW55IFtvcHRpb25zXSgjb3B0aW9ucykgdG8gY2hhbmdlIGhvdyBleHBhbnNpb24gaXMgcGVyZm9ybWVkLiBTZWUgdGhlIFticmFjZXNdW10gbGlicmFyeSBmb3IgYWxsIGF2YWlsYWJsZSBvcHRpb25zLlxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guYnJhY2VzID0gKHBhdHRlcm4sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgaWYgKChvcHRpb25zICYmIG9wdGlvbnMubm9icmFjZSA9PT0gdHJ1ZSkgfHwgIS9cXHsuKlxcfS8udGVzdChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBbcGF0dGVybl07XG4gIH1cbiAgcmV0dXJuIGJyYWNlcyhwYXR0ZXJuLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogRXhwYW5kIGJyYWNlc1xuICovXG5cbm1pY3JvbWF0Y2guYnJhY2VFeHBhbmQgPSAocGF0dGVybiwgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xuICByZXR1cm4gbWljcm9tYXRjaC5icmFjZXMocGF0dGVybiwgeyAuLi5vcHRpb25zLCBleHBhbmQ6IHRydWUgfSk7XG59O1xuXG4vKipcbiAqIEV4cG9zZSBtaWNyb21hdGNoXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBtaWNyb21hdGNoO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBnbG9iUGFyZW50ID0gcmVxdWlyZShcImdsb2ItcGFyZW50XCIpO1xyXG5jb25zdCBtaWNyb21hdGNoID0gcmVxdWlyZShcIm1pY3JvbWF0Y2hcIik7XHJcbmNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoXCJwaWNvbWF0Y2hcIik7XHJcbmNvbnN0IEdMT0JTVEFSID0gJyoqJztcclxuY29uc3QgRVNDQVBFX1NZTUJPTCA9ICdcXFxcJztcclxuY29uc3QgQ09NTU9OX0dMT0JfU1lNQk9MU19SRSA9IC9bKj9dfF4hLztcclxuY29uc3QgUkVHRVhfQ0hBUkFDVEVSX0NMQVNTX1NZTUJPTFNfUkUgPSAvXFxbLipdLztcclxuY29uc3QgUkVHRVhfR1JPVVBfU1lNQk9MU19SRSA9IC8oPzpefFteISorP0BdKVxcKC4qXFx8LipcXCkvO1xyXG5jb25zdCBHTE9CX0VYVEVOU0lPTl9TWU1CT0xTX1JFID0gL1shKis/QF1cXCguKlxcKS87XHJcbmNvbnN0IEJSQUNFX0VYUEFOU0lPTlNfU1lNQk9MU19SRSA9IC97LiooPzosfFxcLlxcLikuKn0vO1xyXG5mdW5jdGlvbiBpc1N0YXRpY1BhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICByZXR1cm4gIWlzRHluYW1pY1BhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyk7XHJcbn1cclxuZXhwb3J0cy5pc1N0YXRpY1BhdHRlcm4gPSBpc1N0YXRpY1BhdHRlcm47XHJcbmZ1bmN0aW9uIGlzRHluYW1pY1BhdHRlcm4ocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdGhlIGBjYXNlU2Vuc2l0aXZlTWF0Y2hgIG9wdGlvbiBpcyBkaXNhYmxlZCwgYWxsIHBhdHRlcm5zIG11c3QgYmUgbWFya2VkIGFzIGR5bmFtaWMsIGJlY2F1c2Ugd2UgY2Fubm90IGNoZWNrXHJcbiAgICAgKiBmaWxlcGF0aCBkaXJlY3RseSAod2l0aG91dCByZWFkIGRpcmVjdG9yeSkuXHJcbiAgICAgKi9cclxuICAgIGlmIChvcHRpb25zLmNhc2VTZW5zaXRpdmVNYXRjaCA9PT0gZmFsc2UgfHwgcGF0dGVybi5pbmNsdWRlcyhFU0NBUEVfU1lNQk9MKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKENPTU1PTl9HTE9CX1NZTUJPTFNfUkUudGVzdChwYXR0ZXJuKSB8fCBSRUdFWF9DSEFSQUNURVJfQ0xBU1NfU1lNQk9MU19SRS50ZXN0KHBhdHRlcm4pIHx8IFJFR0VYX0dST1VQX1NZTUJPTFNfUkUudGVzdChwYXR0ZXJuKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuZXh0Z2xvYiAhPT0gZmFsc2UgJiYgR0xPQl9FWFRFTlNJT05fU1lNQk9MU19SRS50ZXN0KHBhdHRlcm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5icmFjZUV4cGFuc2lvbiAhPT0gZmFsc2UgJiYgQlJBQ0VfRVhQQU5TSU9OU19TWU1CT0xTX1JFLnRlc3QocGF0dGVybikpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnRzLmlzRHluYW1pY1BhdHRlcm4gPSBpc0R5bmFtaWNQYXR0ZXJuO1xyXG5mdW5jdGlvbiBjb252ZXJ0VG9Qb3NpdGl2ZVBhdHRlcm4ocGF0dGVybikge1xyXG4gICAgcmV0dXJuIGlzTmVnYXRpdmVQYXR0ZXJuKHBhdHRlcm4pID8gcGF0dGVybi5zbGljZSgxKSA6IHBhdHRlcm47XHJcbn1cclxuZXhwb3J0cy5jb252ZXJ0VG9Qb3NpdGl2ZVBhdHRlcm4gPSBjb252ZXJ0VG9Qb3NpdGl2ZVBhdHRlcm47XHJcbmZ1bmN0aW9uIGNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybihwYXR0ZXJuKSB7XHJcbiAgICByZXR1cm4gJyEnICsgcGF0dGVybjtcclxufVxyXG5leHBvcnRzLmNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybiA9IGNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybjtcclxuZnVuY3Rpb24gaXNOZWdhdGl2ZVBhdHRlcm4ocGF0dGVybikge1xyXG4gICAgcmV0dXJuIHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpICYmIHBhdHRlcm5bMV0gIT09ICcoJztcclxufVxyXG5leHBvcnRzLmlzTmVnYXRpdmVQYXR0ZXJuID0gaXNOZWdhdGl2ZVBhdHRlcm47XHJcbmZ1bmN0aW9uIGlzUG9zaXRpdmVQYXR0ZXJuKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiAhaXNOZWdhdGl2ZVBhdHRlcm4ocGF0dGVybik7XHJcbn1cclxuZXhwb3J0cy5pc1Bvc2l0aXZlUGF0dGVybiA9IGlzUG9zaXRpdmVQYXR0ZXJuO1xyXG5mdW5jdGlvbiBnZXROZWdhdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMuZmlsdGVyKGlzTmVnYXRpdmVQYXR0ZXJuKTtcclxufVxyXG5leHBvcnRzLmdldE5lZ2F0aXZlUGF0dGVybnMgPSBnZXROZWdhdGl2ZVBhdHRlcm5zO1xyXG5mdW5jdGlvbiBnZXRQb3NpdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMuZmlsdGVyKGlzUG9zaXRpdmVQYXR0ZXJuKTtcclxufVxyXG5leHBvcnRzLmdldFBvc2l0aXZlUGF0dGVybnMgPSBnZXRQb3NpdGl2ZVBhdHRlcm5zO1xyXG5mdW5jdGlvbiBnZXRCYXNlRGlyZWN0b3J5KHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBnbG9iUGFyZW50KHBhdHRlcm4sIHsgZmxpcEJhY2tzbGFzaGVzOiBmYWxzZSB9KTtcclxufVxyXG5leHBvcnRzLmdldEJhc2VEaXJlY3RvcnkgPSBnZXRCYXNlRGlyZWN0b3J5O1xyXG5mdW5jdGlvbiBoYXNHbG9iU3RhcihwYXR0ZXJuKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybi5pbmNsdWRlcyhHTE9CU1RBUik7XHJcbn1cclxuZXhwb3J0cy5oYXNHbG9iU3RhciA9IGhhc0dsb2JTdGFyO1xyXG5mdW5jdGlvbiBlbmRzV2l0aFNsYXNoR2xvYlN0YXIocGF0dGVybikge1xyXG4gICAgcmV0dXJuIHBhdHRlcm4uZW5kc1dpdGgoJy8nICsgR0xPQlNUQVIpO1xyXG59XHJcbmV4cG9ydHMuZW5kc1dpdGhTbGFzaEdsb2JTdGFyID0gZW5kc1dpdGhTbGFzaEdsb2JTdGFyO1xyXG5mdW5jdGlvbiBpc0FmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybihwYXR0ZXJuKSB7XHJcbiAgICBjb25zdCBiYXNlbmFtZSA9IHBhdGguYmFzZW5hbWUocGF0dGVybik7XHJcbiAgICByZXR1cm4gZW5kc1dpdGhTbGFzaEdsb2JTdGFyKHBhdHRlcm4pIHx8IGlzU3RhdGljUGF0dGVybihiYXNlbmFtZSk7XHJcbn1cclxuZXhwb3J0cy5pc0FmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybiA9IGlzQWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJuO1xyXG5mdW5jdGlvbiBleHBhbmRQYXR0ZXJuc1dpdGhCcmFjZUV4cGFuc2lvbihwYXR0ZXJucykge1xyXG4gICAgcmV0dXJuIHBhdHRlcm5zLnJlZHVjZSgoY29sbGVjdGlvbiwgcGF0dGVybikgPT4ge1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbmNhdChleHBhbmRCcmFjZUV4cGFuc2lvbihwYXR0ZXJuKSk7XHJcbiAgICB9LCBbXSk7XHJcbn1cclxuZXhwb3J0cy5leHBhbmRQYXR0ZXJuc1dpdGhCcmFjZUV4cGFuc2lvbiA9IGV4cGFuZFBhdHRlcm5zV2l0aEJyYWNlRXhwYW5zaW9uO1xyXG5mdW5jdGlvbiBleHBhbmRCcmFjZUV4cGFuc2lvbihwYXR0ZXJuKSB7XHJcbiAgICByZXR1cm4gbWljcm9tYXRjaC5icmFjZXMocGF0dGVybiwge1xyXG4gICAgICAgIGV4cGFuZDogdHJ1ZSxcclxuICAgICAgICBub2R1cGVzOiB0cnVlXHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmV4cGFuZEJyYWNlRXhwYW5zaW9uID0gZXhwYW5kQnJhY2VFeHBhbnNpb247XHJcbmZ1bmN0aW9uIGdldFBhdHRlcm5QYXJ0cyhwYXR0ZXJuLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBpbmZvID0gcGljb21hdGNoLnNjYW4ocGF0dGVybiwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBwYXJ0czogdHJ1ZSB9KSk7XHJcbiAgICAvLyBTZWUgbWljcm9tYXRjaC9waWNvbWF0Y2gjNTggZm9yIG1vcmUgZGV0YWlsc1xyXG4gICAgaWYgKGluZm8ucGFydHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIFtwYXR0ZXJuXTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbmZvLnBhcnRzO1xyXG59XHJcbmV4cG9ydHMuZ2V0UGF0dGVyblBhcnRzID0gZ2V0UGF0dGVyblBhcnRzO1xyXG5mdW5jdGlvbiBtYWtlUmUocGF0dGVybiwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG1pY3JvbWF0Y2gubWFrZVJlKHBhdHRlcm4sIG9wdGlvbnMpO1xyXG59XHJcbmV4cG9ydHMubWFrZVJlID0gbWFrZVJlO1xyXG5mdW5jdGlvbiBjb252ZXJ0UGF0dGVybnNUb1JlKHBhdHRlcm5zLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMubWFwKChwYXR0ZXJuKSA9PiBtYWtlUmUocGF0dGVybiwgb3B0aW9ucykpO1xyXG59XHJcbmV4cG9ydHMuY29udmVydFBhdHRlcm5zVG9SZSA9IGNvbnZlcnRQYXR0ZXJuc1RvUmU7XHJcbmZ1bmN0aW9uIG1hdGNoQW55KGVudHJ5LCBwYXR0ZXJuc1JlKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnNSZS5zb21lKChwYXR0ZXJuUmUpID0+IHBhdHRlcm5SZS50ZXN0KGVudHJ5KSk7XHJcbn1cclxuZXhwb3J0cy5tYXRjaEFueSA9IG1hdGNoQW55O1xyXG4iLCIndXNlIHN0cmljdCdcbi8qXG4gKiBtZXJnZTJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWFtYml0aW9uL21lcmdlMlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE2IFRlYW1iaXRpb25cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJylcbmNvbnN0IFBhc3NUaHJvdWdoID0gU3RyZWFtLlBhc3NUaHJvdWdoXG5jb25zdCBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlMlxuXG5mdW5jdGlvbiBtZXJnZTIgKCkge1xuICBjb25zdCBzdHJlYW1zUXVldWUgPSBbXVxuICBsZXQgbWVyZ2luZyA9IGZhbHNlXG4gIGNvbnN0IGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgbGV0IG9wdGlvbnMgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV1cblxuICBpZiAob3B0aW9ucyAmJiAhQXJyYXkuaXNBcnJheShvcHRpb25zKSAmJiBvcHRpb25zLnBpcGUgPT0gbnVsbCkgYXJncy5wb3AoKVxuICBlbHNlIG9wdGlvbnMgPSB7fVxuXG4gIGNvbnN0IGRvRW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIGlmIChvcHRpb25zLm9iamVjdE1vZGUgPT0gbnVsbCkgb3B0aW9ucy5vYmplY3RNb2RlID0gdHJ1ZVxuICBpZiAob3B0aW9ucy5oaWdoV2F0ZXJNYXJrID09IG51bGwpIG9wdGlvbnMuaGlnaFdhdGVyTWFyayA9IDY0ICogMTAyNFxuICBjb25zdCBtZXJnZWRTdHJlYW0gPSBQYXNzVGhyb3VnaChvcHRpb25zKVxuXG4gIGZ1bmN0aW9uIGFkZFN0cmVhbSAoKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgc3RyZWFtc1F1ZXVlLnB1c2gocGF1c2VTdHJlYW1zKGFyZ3VtZW50c1tpXSwgb3B0aW9ucykpXG4gICAgfVxuICAgIG1lcmdlU3RyZWFtKClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VTdHJlYW0gKCkge1xuICAgIGlmIChtZXJnaW5nKSByZXR1cm5cbiAgICBtZXJnaW5nID0gdHJ1ZVxuXG4gICAgbGV0IHN0cmVhbXMgPSBzdHJlYW1zUXVldWUuc2hpZnQoKVxuICAgIGlmICghc3RyZWFtcykge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbmRTdHJlYW0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHN0cmVhbXMpKSBzdHJlYW1zID0gW3N0cmVhbXNdXG5cbiAgICBsZXQgcGlwZXNDb3VudCA9IHN0cmVhbXMubGVuZ3RoICsgMVxuXG4gICAgZnVuY3Rpb24gbmV4dCAoKSB7XG4gICAgICBpZiAoLS1waXBlc0NvdW50ID4gMCkgcmV0dXJuXG4gICAgICBtZXJnaW5nID0gZmFsc2VcbiAgICAgIG1lcmdlU3RyZWFtKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwaXBlIChzdHJlYW0pIHtcbiAgICAgIGZ1bmN0aW9uIG9uZW5kICgpIHtcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdtZXJnZTJVbnBpcGVFbmQnLCBvbmVuZClcbiAgICAgICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZClcbiAgICAgICAgbmV4dCgpXG4gICAgICB9XG4gICAgICAvLyBza2lwIGVuZGVkIHN0cmVhbVxuICAgICAgaWYgKHN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkKSByZXR1cm4gbmV4dCgpXG5cbiAgICAgIHN0cmVhbS5vbignbWVyZ2UyVW5waXBlRW5kJywgb25lbmQpXG4gICAgICBzdHJlYW0ub24oJ2VuZCcsIG9uZW5kKVxuICAgICAgc3RyZWFtLnBpcGUobWVyZ2VkU3RyZWFtLCB7IGVuZDogZmFsc2UgfSlcbiAgICAgIC8vIGNvbXBhdGlibGUgZm9yIG9sZCBzdHJlYW1cbiAgICAgIHN0cmVhbS5yZXN1bWUoKVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyZWFtcy5sZW5ndGg7IGkrKykgcGlwZShzdHJlYW1zW2ldKVxuXG4gICAgbmV4dCgpXG4gIH1cblxuICBmdW5jdGlvbiBlbmRTdHJlYW0gKCkge1xuICAgIG1lcmdpbmcgPSBmYWxzZVxuICAgIC8vIGVtaXQgJ3F1ZXVlRHJhaW4nIHdoZW4gYWxsIHN0cmVhbXMgbWVyZ2VkLlxuICAgIG1lcmdlZFN0cmVhbS5lbWl0KCdxdWV1ZURyYWluJylcbiAgICByZXR1cm4gZG9FbmQgJiYgbWVyZ2VkU3RyZWFtLmVuZCgpXG4gIH1cblxuICBtZXJnZWRTdHJlYW0uc2V0TWF4TGlzdGVuZXJzKDApXG4gIG1lcmdlZFN0cmVhbS5hZGQgPSBhZGRTdHJlYW1cbiAgbWVyZ2VkU3RyZWFtLm9uKCd1bnBpcGUnLCBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gICAgc3RyZWFtLmVtaXQoJ21lcmdlMlVucGlwZUVuZCcpXG4gIH0pXG5cbiAgaWYgKGFyZ3MubGVuZ3RoKSBhZGRTdHJlYW0uYXBwbHkobnVsbCwgYXJncylcbiAgcmV0dXJuIG1lcmdlZFN0cmVhbVxufVxuXG4vLyBjaGVjayBhbmQgcGF1c2Ugc3RyZWFtcyBmb3IgcGlwZS5cbmZ1bmN0aW9uIHBhdXNlU3RyZWFtcyAoc3RyZWFtcywgb3B0aW9ucykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoc3RyZWFtcykpIHtcbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggb2xkLXN0eWxlIHN0cmVhbXNcbiAgICBpZiAoIXN0cmVhbXMuX3JlYWRhYmxlU3RhdGUgJiYgc3RyZWFtcy5waXBlKSBzdHJlYW1zID0gc3RyZWFtcy5waXBlKFBhc3NUaHJvdWdoKG9wdGlvbnMpKVxuICAgIGlmICghc3RyZWFtcy5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtcy5wYXVzZSB8fCAhc3RyZWFtcy5waXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgcmVhZGFibGUgc3RyZWFtIGNhbiBiZSBtZXJnZWQuJylcbiAgICB9XG4gICAgc3RyZWFtcy5wYXVzZSgpXG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0cmVhbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHN0cmVhbXNbaV0gPSBwYXVzZVN0cmVhbXMoc3RyZWFtc1tpXSwgb3B0aW9ucylcbiAgfVxuICByZXR1cm4gc3RyZWFtc1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgbWVyZ2UyID0gcmVxdWlyZShcIm1lcmdlMlwiKTtcclxuZnVuY3Rpb24gbWVyZ2Uoc3RyZWFtcykge1xyXG4gICAgY29uc3QgbWVyZ2VkU3RyZWFtID0gbWVyZ2UyKHN0cmVhbXMpO1xyXG4gICAgc3RyZWFtcy5mb3JFYWNoKChzdHJlYW0pID0+IHtcclxuICAgICAgICBzdHJlYW0ub25jZSgnZXJyb3InLCAoZXJyb3IpID0+IG1lcmdlZFN0cmVhbS5lbWl0KCdlcnJvcicsIGVycm9yKSk7XHJcbiAgICB9KTtcclxuICAgIG1lcmdlZFN0cmVhbS5vbmNlKCdjbG9zZScsICgpID0+IHByb3BhZ2F0ZUNsb3NlRXZlbnRUb1NvdXJjZXMoc3RyZWFtcykpO1xyXG4gICAgbWVyZ2VkU3RyZWFtLm9uY2UoJ2VuZCcsICgpID0+IHByb3BhZ2F0ZUNsb3NlRXZlbnRUb1NvdXJjZXMoc3RyZWFtcykpO1xyXG4gICAgcmV0dXJuIG1lcmdlZFN0cmVhbTtcclxufVxyXG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XHJcbmZ1bmN0aW9uIHByb3BhZ2F0ZUNsb3NlRXZlbnRUb1NvdXJjZXMoc3RyZWFtcykge1xyXG4gICAgc3RyZWFtcy5mb3JFYWNoKChzdHJlYW0pID0+IHN0cmVhbS5lbWl0KCdjbG9zZScpKTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZyc7XHJcbn1cclxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xyXG5mdW5jdGlvbiBpc0VtcHR5KGlucHV0KSB7XHJcbiAgICByZXR1cm4gaW5wdXQgPT09ICcnO1xyXG59XHJcbmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGFycmF5ID0gcmVxdWlyZShcIi4vYXJyYXlcIik7XHJcbmV4cG9ydHMuYXJyYXkgPSBhcnJheTtcclxuY29uc3QgZXJybm8gPSByZXF1aXJlKFwiLi9lcnJub1wiKTtcclxuZXhwb3J0cy5lcnJubyA9IGVycm5vO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCIuL2ZzXCIpO1xyXG5leHBvcnRzLmZzID0gZnM7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwiLi9wYXRoXCIpO1xyXG5leHBvcnRzLnBhdGggPSBwYXRoO1xyXG5jb25zdCBwYXR0ZXJuID0gcmVxdWlyZShcIi4vcGF0dGVyblwiKTtcclxuZXhwb3J0cy5wYXR0ZXJuID0gcGF0dGVybjtcclxuY29uc3Qgc3RyZWFtID0gcmVxdWlyZShcIi4vc3RyZWFtXCIpO1xyXG5leHBvcnRzLnN0cmVhbSA9IHN0cmVhbTtcclxuY29uc3Qgc3RyaW5nID0gcmVxdWlyZShcIi4vc3RyaW5nXCIpO1xyXG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XHJcbmZ1bmN0aW9uIGdlbmVyYXRlKHBhdHRlcm5zLCBzZXR0aW5ncykge1xyXG4gICAgY29uc3QgcG9zaXRpdmVQYXR0ZXJucyA9IGdldFBvc2l0aXZlUGF0dGVybnMocGF0dGVybnMpO1xyXG4gICAgY29uc3QgbmVnYXRpdmVQYXR0ZXJucyA9IGdldE5lZ2F0aXZlUGF0dGVybnNBc1Bvc2l0aXZlKHBhdHRlcm5zLCBzZXR0aW5ncy5pZ25vcmUpO1xyXG4gICAgY29uc3Qgc3RhdGljUGF0dGVybnMgPSBwb3NpdGl2ZVBhdHRlcm5zLmZpbHRlcigocGF0dGVybikgPT4gdXRpbHMucGF0dGVybi5pc1N0YXRpY1BhdHRlcm4ocGF0dGVybiwgc2V0dGluZ3MpKTtcclxuICAgIGNvbnN0IGR5bmFtaWNQYXR0ZXJucyA9IHBvc2l0aXZlUGF0dGVybnMuZmlsdGVyKChwYXR0ZXJuKSA9PiB1dGlscy5wYXR0ZXJuLmlzRHluYW1pY1BhdHRlcm4ocGF0dGVybiwgc2V0dGluZ3MpKTtcclxuICAgIGNvbnN0IHN0YXRpY1Rhc2tzID0gY29udmVydFBhdHRlcm5zVG9UYXNrcyhzdGF0aWNQYXR0ZXJucywgbmVnYXRpdmVQYXR0ZXJucywgLyogZHluYW1pYyAqLyBmYWxzZSk7XHJcbiAgICBjb25zdCBkeW5hbWljVGFza3MgPSBjb252ZXJ0UGF0dGVybnNUb1Rhc2tzKGR5bmFtaWNQYXR0ZXJucywgbmVnYXRpdmVQYXR0ZXJucywgLyogZHluYW1pYyAqLyB0cnVlKTtcclxuICAgIHJldHVybiBzdGF0aWNUYXNrcy5jb25jYXQoZHluYW1pY1Rhc2tzKTtcclxufVxyXG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XHJcbmZ1bmN0aW9uIGNvbnZlcnRQYXR0ZXJuc1RvVGFza3MocG9zaXRpdmUsIG5lZ2F0aXZlLCBkeW5hbWljKSB7XHJcbiAgICBjb25zdCBwb3NpdGl2ZVBhdHRlcm5zR3JvdXAgPSBncm91cFBhdHRlcm5zQnlCYXNlRGlyZWN0b3J5KHBvc2l0aXZlKTtcclxuICAgIC8vIFdoZW4gd2UgaGF2ZSBhIGdsb2JhbCBncm91cCDigJMgdGhlcmUgaXMgbm8gcmVhc29uIHRvIGRpdmlkZSB0aGUgcGF0dGVybnMgaW50byBpbmRlcGVuZGVudCB0YXNrcy5cclxuICAgIC8vIEluIHRoaXMgY2FzZSwgdGhlIGdsb2JhbCB0YXNrIGNvdmVycyB0aGUgcmVzdC5cclxuICAgIGlmICgnLicgaW4gcG9zaXRpdmVQYXR0ZXJuc0dyb3VwKSB7XHJcbiAgICAgICAgY29uc3QgdGFzayA9IGNvbnZlcnRQYXR0ZXJuR3JvdXBUb1Rhc2soJy4nLCBwb3NpdGl2ZSwgbmVnYXRpdmUsIGR5bmFtaWMpO1xyXG4gICAgICAgIHJldHVybiBbdGFza107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzKHBvc2l0aXZlUGF0dGVybnNHcm91cCwgbmVnYXRpdmUsIGR5bmFtaWMpO1xyXG59XHJcbmV4cG9ydHMuY29udmVydFBhdHRlcm5zVG9UYXNrcyA9IGNvbnZlcnRQYXR0ZXJuc1RvVGFza3M7XHJcbmZ1bmN0aW9uIGdldFBvc2l0aXZlUGF0dGVybnMocGF0dGVybnMpIHtcclxuICAgIHJldHVybiB1dGlscy5wYXR0ZXJuLmdldFBvc2l0aXZlUGF0dGVybnMocGF0dGVybnMpO1xyXG59XHJcbmV4cG9ydHMuZ2V0UG9zaXRpdmVQYXR0ZXJucyA9IGdldFBvc2l0aXZlUGF0dGVybnM7XHJcbmZ1bmN0aW9uIGdldE5lZ2F0aXZlUGF0dGVybnNBc1Bvc2l0aXZlKHBhdHRlcm5zLCBpZ25vcmUpIHtcclxuICAgIGNvbnN0IG5lZ2F0aXZlID0gdXRpbHMucGF0dGVybi5nZXROZWdhdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKS5jb25jYXQoaWdub3JlKTtcclxuICAgIGNvbnN0IHBvc2l0aXZlID0gbmVnYXRpdmUubWFwKHV0aWxzLnBhdHRlcm4uY29udmVydFRvUG9zaXRpdmVQYXR0ZXJuKTtcclxuICAgIHJldHVybiBwb3NpdGl2ZTtcclxufVxyXG5leHBvcnRzLmdldE5lZ2F0aXZlUGF0dGVybnNBc1Bvc2l0aXZlID0gZ2V0TmVnYXRpdmVQYXR0ZXJuc0FzUG9zaXRpdmU7XHJcbmZ1bmN0aW9uIGdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3RvcnkocGF0dGVybnMpIHtcclxuICAgIGNvbnN0IGdyb3VwID0ge307XHJcbiAgICByZXR1cm4gcGF0dGVybnMucmVkdWNlKChjb2xsZWN0aW9uLCBwYXR0ZXJuKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYmFzZSA9IHV0aWxzLnBhdHRlcm4uZ2V0QmFzZURpcmVjdG9yeShwYXR0ZXJuKTtcclxuICAgICAgICBpZiAoYmFzZSBpbiBjb2xsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25bYmFzZV0ucHVzaChwYXR0ZXJuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25bYmFzZV0gPSBbcGF0dGVybl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG4gICAgfSwgZ3JvdXApO1xyXG59XHJcbmV4cG9ydHMuZ3JvdXBQYXR0ZXJuc0J5QmFzZURpcmVjdG9yeSA9IGdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3Rvcnk7XHJcbmZ1bmN0aW9uIGNvbnZlcnRQYXR0ZXJuR3JvdXBzVG9UYXNrcyhwb3NpdGl2ZSwgbmVnYXRpdmUsIGR5bmFtaWMpIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhwb3NpdGl2ZSkubWFwKChiYXNlKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRQYXR0ZXJuR3JvdXBUb1Rhc2soYmFzZSwgcG9zaXRpdmVbYmFzZV0sIG5lZ2F0aXZlLCBkeW5hbWljKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzID0gY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzO1xyXG5mdW5jdGlvbiBjb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrKGJhc2UsIHBvc2l0aXZlLCBuZWdhdGl2ZSwgZHluYW1pYykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkeW5hbWljLFxyXG4gICAgICAgIHBvc2l0aXZlLFxyXG4gICAgICAgIG5lZ2F0aXZlLFxyXG4gICAgICAgIGJhc2UsXHJcbiAgICAgICAgcGF0dGVybnM6IFtdLmNvbmNhdChwb3NpdGl2ZSwgbmVnYXRpdmUubWFwKHV0aWxzLnBhdHRlcm4uY29udmVydFRvTmVnYXRpdmVQYXR0ZXJuKSlcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5jb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrID0gY29udmVydFBhdHRlcm5Hcm91cFRvVGFzaztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gcmVhZChwYXRoLCBzZXR0aW5ncywgY2FsbGJhY2spIHtcclxuICAgIHNldHRpbmdzLmZzLmxzdGF0KHBhdGgsIChsc3RhdEVycm9yLCBsc3RhdCkgPT4ge1xyXG4gICAgICAgIGlmIChsc3RhdEVycm9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBsc3RhdEVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFsc3RhdC5pc1N5bWJvbGljTGluaygpIHx8ICFzZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmspIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIGxzdGF0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0dGluZ3MuZnMuc3RhdChwYXRoLCAoc3RhdEVycm9yLCBzdGF0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0RXJyb3IgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmspIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgc3RhdEVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCBsc3RhdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLm1hcmtTeW1ib2xpY0xpbmspIHtcclxuICAgICAgICAgICAgICAgIHN0YXQuaXNTeW1ib2xpY0xpbmsgPSAoKSA9PiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIHN0YXQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5yZWFkID0gcmVhZDtcclxuZnVuY3Rpb24gY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgZXJyb3IpIHtcclxuICAgIGNhbGxiYWNrKGVycm9yKTtcclxufVxyXG5mdW5jdGlvbiBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCByZXN1bHQpIHtcclxuICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gcmVhZChwYXRoLCBzZXR0aW5ncykge1xyXG4gICAgY29uc3QgbHN0YXQgPSBzZXR0aW5ncy5mcy5sc3RhdFN5bmMocGF0aCk7XHJcbiAgICBpZiAoIWxzdGF0LmlzU3ltYm9saWNMaW5rKCkgfHwgIXNldHRpbmdzLmZvbGxvd1N5bWJvbGljTGluaykge1xyXG4gICAgICAgIHJldHVybiBsc3RhdDtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdCA9IHNldHRpbmdzLmZzLnN0YXRTeW5jKHBhdGgpO1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5tYXJrU3ltYm9saWNMaW5rKSB7XHJcbiAgICAgICAgICAgIHN0YXQuaXNTeW1ib2xpY0xpbmsgPSAoKSA9PiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RhdDtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGlmICghc2V0dGluZ3MudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsc3RhdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5yZWFkID0gcmVhZDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmV4cG9ydHMuRklMRV9TWVNURU1fQURBUFRFUiA9IHtcclxuICAgIGxzdGF0OiBmcy5sc3RhdCxcclxuICAgIHN0YXQ6IGZzLnN0YXQsXHJcbiAgICBsc3RhdFN5bmM6IGZzLmxzdGF0U3luYyxcclxuICAgIHN0YXRTeW5jOiBmcy5zdGF0U3luY1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVGaWxlU3lzdGVtQWRhcHRlcihmc01ldGhvZHMpIHtcclxuICAgIGlmIChmc01ldGhvZHMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVIpLCBmc01ldGhvZHMpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIgPSBjcmVhdGVGaWxlU3lzdGVtQWRhcHRlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiLi9hZGFwdGVycy9mc1wiKTtcclxuY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoX29wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgICAgICB0aGlzLmZvbGxvd1N5bWJvbGljTGluayA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuZm9sbG93U3ltYm9saWNMaW5rLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmZzID0gZnMuY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIodGhpcy5fb3B0aW9ucy5mcyk7XHJcbiAgICAgICAgdGhpcy5tYXJrU3ltYm9saWNMaW5rID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5tYXJrU3ltYm9saWNMaW5rLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmsgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluaywgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0VmFsdWUob3B0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBvcHRpb24gPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogb3B0aW9uO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFNldHRpbmdzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhc3luYyA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9hc3luY1wiKTtcclxuY29uc3Qgc3luYyA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xyXG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XHJcbmV4cG9ydHMuU2V0dGluZ3MgPSBzZXR0aW5nc18xLmRlZmF1bHQ7XHJcbmZ1bmN0aW9uIHN0YXQocGF0aCwgb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gYXN5bmMucmVhZChwYXRoLCBnZXRTZXR0aW5ncygpLCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgYXN5bmMucmVhZChwYXRoLCBnZXRTZXR0aW5ncyhvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spLCBjYWxsYmFjayk7XHJcbn1cclxuZXhwb3J0cy5zdGF0ID0gc3RhdDtcclxuZnVuY3Rpb24gc3RhdFN5bmMocGF0aCwgb3B0aW9uc09yU2V0dGluZ3MpIHtcclxuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3MpO1xyXG4gICAgcmV0dXJuIHN5bmMucmVhZChwYXRoLCBzZXR0aW5ncyk7XHJcbn1cclxuZXhwb3J0cy5zdGF0U3luYyA9IHN0YXRTeW5jO1xyXG5mdW5jdGlvbiBnZXRTZXR0aW5ncyhzZXR0aW5nc09yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBpZiAoc2V0dGluZ3NPck9wdGlvbnMgaW5zdGFuY2VvZiBzZXR0aW5nc18xLmRlZmF1bHQpIHtcclxuICAgICAgICByZXR1cm4gc2V0dGluZ3NPck9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IHNldHRpbmdzXzEuZGVmYXVsdChzZXR0aW5nc09yT3B0aW9ucyk7XHJcbn1cclxuIiwibW9kdWxlLmV4cG9ydHMgPSBydW5QYXJhbGxlbFxuXG5mdW5jdGlvbiBydW5QYXJhbGxlbCAodGFza3MsIGNiKSB7XG4gIHZhciByZXN1bHRzLCBwZW5kaW5nLCBrZXlzXG4gIHZhciBpc1N5bmMgPSB0cnVlXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFza3MpKSB7XG4gICAgcmVzdWx0cyA9IFtdXG4gICAgcGVuZGluZyA9IHRhc2tzLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh0YXNrcylcbiAgICByZXN1bHRzID0ge31cbiAgICBwZW5kaW5nID0ga2V5cy5sZW5ndGhcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKGVycikge1xuICAgIGZ1bmN0aW9uIGVuZCAoKSB7XG4gICAgICBpZiAoY2IpIGNiKGVyciwgcmVzdWx0cylcbiAgICAgIGNiID0gbnVsbFxuICAgIH1cbiAgICBpZiAoaXNTeW5jKSBwcm9jZXNzLm5leHRUaWNrKGVuZClcbiAgICBlbHNlIGVuZCgpXG4gIH1cblxuICBmdW5jdGlvbiBlYWNoIChpLCBlcnIsIHJlc3VsdCkge1xuICAgIHJlc3VsdHNbaV0gPSByZXN1bHRcbiAgICBpZiAoLS1wZW5kaW5nID09PSAwIHx8IGVycikge1xuICAgICAgZG9uZShlcnIpXG4gICAgfVxuICB9XG5cbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgLy8gZW1wdHlcbiAgICBkb25lKG51bGwpXG4gIH0gZWxzZSBpZiAoa2V5cykge1xuICAgIC8vIG9iamVjdFxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB0YXNrc1trZXldKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkgeyBlYWNoKGtleSwgZXJyLCByZXN1bHQpIH0pXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICAvLyBhcnJheVxuICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHRhc2ssIGkpIHtcbiAgICAgIHRhc2soZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7IGVhY2goaSwgZXJyLCByZXN1bHQpIH0pXG4gICAgfSlcbiAgfVxuXG4gIGlzU3luYyA9IGZhbHNlXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBOT0RFX1BST0NFU1NfVkVSU0lPTl9QQVJUUyA9IHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpO1xyXG5jb25zdCBNQUpPUl9WRVJTSU9OID0gcGFyc2VJbnQoTk9ERV9QUk9DRVNTX1ZFUlNJT05fUEFSVFNbMF0sIDEwKTtcclxuY29uc3QgTUlOT1JfVkVSU0lPTiA9IHBhcnNlSW50KE5PREVfUFJPQ0VTU19WRVJTSU9OX1BBUlRTWzFdLCAxMCk7XHJcbmNvbnN0IFNVUFBPUlRFRF9NQUpPUl9WRVJTSU9OID0gMTA7XHJcbmNvbnN0IFNVUFBPUlRFRF9NSU5PUl9WRVJTSU9OID0gMTA7XHJcbmNvbnN0IElTX01BVENIRURfQllfTUFKT1IgPSBNQUpPUl9WRVJTSU9OID4gU1VQUE9SVEVEX01BSk9SX1ZFUlNJT047XHJcbmNvbnN0IElTX01BVENIRURfQllfTUFKT1JfQU5EX01JTk9SID0gTUFKT1JfVkVSU0lPTiA9PT0gU1VQUE9SVEVEX01BSk9SX1ZFUlNJT04gJiYgTUlOT1JfVkVSU0lPTiA+PSBTVVBQT1JURURfTUlOT1JfVkVSU0lPTjtcclxuLyoqXHJcbiAqIElTIGB0cnVlYCBmb3IgTm9kZS5qcyAxMC4xMCBhbmQgZ3JlYXRlci5cclxuICovXHJcbmV4cG9ydHMuSVNfU1VQUE9SVF9SRUFERElSX1dJVEhfRklMRV9UWVBFUyA9IElTX01BVENIRURfQllfTUFKT1IgfHwgSVNfTUFUQ0hFRF9CWV9NQUpPUl9BTkRfTUlOT1I7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNsYXNzIERpcmVudEZyb21TdGF0cyB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBzdGF0cykge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pc0Jsb2NrRGV2aWNlID0gc3RhdHMuaXNCbG9ja0RldmljZS5iaW5kKHN0YXRzKTtcclxuICAgICAgICB0aGlzLmlzQ2hhcmFjdGVyRGV2aWNlID0gc3RhdHMuaXNDaGFyYWN0ZXJEZXZpY2UuYmluZChzdGF0cyk7XHJcbiAgICAgICAgdGhpcy5pc0RpcmVjdG9yeSA9IHN0YXRzLmlzRGlyZWN0b3J5LmJpbmQoc3RhdHMpO1xyXG4gICAgICAgIHRoaXMuaXNGSUZPID0gc3RhdHMuaXNGSUZPLmJpbmQoc3RhdHMpO1xyXG4gICAgICAgIHRoaXMuaXNGaWxlID0gc3RhdHMuaXNGaWxlLmJpbmQoc3RhdHMpO1xyXG4gICAgICAgIHRoaXMuaXNTb2NrZXQgPSBzdGF0cy5pc1NvY2tldC5iaW5kKHN0YXRzKTtcclxuICAgICAgICB0aGlzLmlzU3ltYm9saWNMaW5rID0gc3RhdHMuaXNTeW1ib2xpY0xpbmsuYmluZChzdGF0cyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlRGlyZW50RnJvbVN0YXRzKG5hbWUsIHN0YXRzKSB7XHJcbiAgICByZXR1cm4gbmV3IERpcmVudEZyb21TdGF0cyhuYW1lLCBzdGF0cyk7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVEaXJlbnRGcm9tU3RhdHMgPSBjcmVhdGVEaXJlbnRGcm9tU3RhdHM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZShcIi4vZnNcIik7XHJcbmV4cG9ydHMuZnMgPSBmcztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XHJcbmNvbnN0IHJwbCA9IHJlcXVpcmUoXCJydW4tcGFyYWxsZWxcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcclxuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XHJcbmZ1bmN0aW9uIHJlYWQoZGlyZWN0b3J5LCBzZXR0aW5ncywgY2FsbGJhY2spIHtcclxuICAgIGlmICghc2V0dGluZ3Muc3RhdHMgJiYgY29uc3RhbnRzXzEuSVNfU1VQUE9SVF9SRUFERElSX1dJVEhfRklMRV9UWVBFUykge1xyXG4gICAgICAgIHJldHVybiByZWFkZGlyV2l0aEZpbGVUeXBlcyhkaXJlY3RvcnksIHNldHRpbmdzLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVhZGRpcihkaXJlY3RvcnksIHNldHRpbmdzLCBjYWxsYmFjayk7XHJcbn1cclxuZXhwb3J0cy5yZWFkID0gcmVhZDtcclxuZnVuY3Rpb24gcmVhZGRpcldpdGhGaWxlVHlwZXMoZGlyZWN0b3J5LCBzZXR0aW5ncywgY2FsbGJhY2spIHtcclxuICAgIHNldHRpbmdzLmZzLnJlYWRkaXIoZGlyZWN0b3J5LCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSwgKHJlYWRkaXJFcnJvciwgZGlyZW50cykgPT4ge1xyXG4gICAgICAgIGlmIChyZWFkZGlyRXJyb3IgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIHJlYWRkaXJFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBkaXJlbnRzLm1hcCgoZGlyZW50KSA9PiAoe1xyXG4gICAgICAgICAgICBkaXJlbnQsXHJcbiAgICAgICAgICAgIG5hbWU6IGRpcmVudC5uYW1lLFxyXG4gICAgICAgICAgICBwYXRoOiBgJHtkaXJlY3Rvcnl9JHtzZXR0aW5ncy5wYXRoU2VnbWVudFNlcGFyYXRvcn0ke2RpcmVudC5uYW1lfWBcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCBlbnRyaWVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGFza3MgPSBlbnRyaWVzLm1hcCgoZW50cnkpID0+IG1ha2VScGxUYXNrRW50cnkoZW50cnksIHNldHRpbmdzKSk7XHJcbiAgICAgICAgcnBsKHRhc2tzLCAocnBsRXJyb3IsIHJwbEVudHJpZXMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJwbEVycm9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgcnBsRXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIHJwbEVudHJpZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5yZWFkZGlyV2l0aEZpbGVUeXBlcyA9IHJlYWRkaXJXaXRoRmlsZVR5cGVzO1xyXG5mdW5jdGlvbiBtYWtlUnBsVGFza0VudHJ5KGVudHJ5LCBzZXR0aW5ncykge1xyXG4gICAgcmV0dXJuIChkb25lKSA9PiB7XHJcbiAgICAgICAgaWYgKCFlbnRyeS5kaXJlbnQuaXNTeW1ib2xpY0xpbmsoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9uZShudWxsLCBlbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldHRpbmdzLmZzLnN0YXQoZW50cnkucGF0aCwgKHN0YXRFcnJvciwgc3RhdHMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHN0YXRFcnJvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lKHN0YXRFcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShudWxsLCBlbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZW50cnkuZGlyZW50ID0gdXRpbHMuZnMuY3JlYXRlRGlyZW50RnJvbVN0YXRzKGVudHJ5Lm5hbWUsIHN0YXRzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRvbmUobnVsbCwgZW50cnkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiByZWFkZGlyKGRpcmVjdG9yeSwgc2V0dGluZ3MsIGNhbGxiYWNrKSB7XHJcbiAgICBzZXR0aW5ncy5mcy5yZWFkZGlyKGRpcmVjdG9yeSwgKHJlYWRkaXJFcnJvciwgbmFtZXMpID0+IHtcclxuICAgICAgICBpZiAocmVhZGRpckVycm9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCByZWFkZGlyRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaWxlcGF0aHMgPSBuYW1lcy5tYXAoKG5hbWUpID0+IGAke2RpcmVjdG9yeX0ke3NldHRpbmdzLnBhdGhTZWdtZW50U2VwYXJhdG9yfSR7bmFtZX1gKTtcclxuICAgICAgICBjb25zdCB0YXNrcyA9IGZpbGVwYXRocy5tYXAoKGZpbGVwYXRoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZG9uZSkgPT4gZnNTdGF0LnN0YXQoZmlsZXBhdGgsIHNldHRpbmdzLmZzU3RhdFNldHRpbmdzLCBkb25lKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBycGwodGFza3MsIChycGxFcnJvciwgcmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgICBpZiAocnBsRXJyb3IgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBycGxFcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xyXG4gICAgICAgICAgICBuYW1lcy5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSByZXN1bHRzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogZmlsZXBhdGhzW2luZGV4XSxcclxuICAgICAgICAgICAgICAgICAgICBkaXJlbnQ6IHV0aWxzLmZzLmNyZWF0ZURpcmVudEZyb21TdGF0cyhuYW1lLCBzdGF0cylcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3Muc3RhdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5zdGF0cyA9IHN0YXRzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIGVudHJpZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5yZWFkZGlyID0gcmVhZGRpcjtcclxuZnVuY3Rpb24gY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgZXJyb3IpIHtcclxuICAgIGNhbGxiYWNrKGVycm9yKTtcclxufVxyXG5mdW5jdGlvbiBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCByZXN1bHQpIHtcclxuICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcclxuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XHJcbmZ1bmN0aW9uIHJlYWQoZGlyZWN0b3J5LCBzZXR0aW5ncykge1xyXG4gICAgaWYgKCFzZXR0aW5ncy5zdGF0cyAmJiBjb25zdGFudHNfMS5JU19TVVBQT1JUX1JFQURESVJfV0lUSF9GSUxFX1RZUEVTKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlYWRkaXJXaXRoRmlsZVR5cGVzKGRpcmVjdG9yeSwgc2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlYWRkaXIoZGlyZWN0b3J5LCBzZXR0aW5ncyk7XHJcbn1cclxuZXhwb3J0cy5yZWFkID0gcmVhZDtcclxuZnVuY3Rpb24gcmVhZGRpcldpdGhGaWxlVHlwZXMoZGlyZWN0b3J5LCBzZXR0aW5ncykge1xyXG4gICAgY29uc3QgZGlyZW50cyA9IHNldHRpbmdzLmZzLnJlYWRkaXJTeW5jKGRpcmVjdG9yeSwgeyB3aXRoRmlsZVR5cGVzOiB0cnVlIH0pO1xyXG4gICAgcmV0dXJuIGRpcmVudHMubWFwKChkaXJlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBlbnRyeSA9IHtcclxuICAgICAgICAgICAgZGlyZW50LFxyXG4gICAgICAgICAgICBuYW1lOiBkaXJlbnQubmFtZSxcclxuICAgICAgICAgICAgcGF0aDogYCR7ZGlyZWN0b3J5fSR7c2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3J9JHtkaXJlbnQubmFtZX1gXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoZW50cnkuZGlyZW50LmlzU3ltYm9saWNMaW5rKCkgJiYgc2V0dGluZ3MuZm9sbG93U3ltYm9saWNMaW5rcykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBzZXR0aW5ncy5mcy5zdGF0U3luYyhlbnRyeS5wYXRoKTtcclxuICAgICAgICAgICAgICAgIGVudHJ5LmRpcmVudCA9IHV0aWxzLmZzLmNyZWF0ZURpcmVudEZyb21TdGF0cyhlbnRyeS5uYW1lLCBzdGF0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5yZWFkZGlyV2l0aEZpbGVUeXBlcyA9IHJlYWRkaXJXaXRoRmlsZVR5cGVzO1xyXG5mdW5jdGlvbiByZWFkZGlyKGRpcmVjdG9yeSwgc2V0dGluZ3MpIHtcclxuICAgIGNvbnN0IG5hbWVzID0gc2V0dGluZ3MuZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5KTtcclxuICAgIHJldHVybiBuYW1lcy5tYXAoKG5hbWUpID0+IHtcclxuICAgICAgICBjb25zdCBlbnRyeVBhdGggPSBgJHtkaXJlY3Rvcnl9JHtzZXR0aW5ncy5wYXRoU2VnbWVudFNlcGFyYXRvcn0ke25hbWV9YDtcclxuICAgICAgICBjb25zdCBzdGF0cyA9IGZzU3RhdC5zdGF0U3luYyhlbnRyeVBhdGgsIHNldHRpbmdzLmZzU3RhdFNldHRpbmdzKTtcclxuICAgICAgICBjb25zdCBlbnRyeSA9IHtcclxuICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgcGF0aDogZW50cnlQYXRoLFxyXG4gICAgICAgICAgICBkaXJlbnQ6IHV0aWxzLmZzLmNyZWF0ZURpcmVudEZyb21TdGF0cyhuYW1lLCBzdGF0cylcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5zdGF0cykge1xyXG4gICAgICAgICAgICBlbnRyeS5zdGF0cyA9IHN0YXRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW50cnk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnJlYWRkaXIgPSByZWFkZGlyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuZXhwb3J0cy5GSUxFX1NZU1RFTV9BREFQVEVSID0ge1xyXG4gICAgbHN0YXQ6IGZzLmxzdGF0LFxyXG4gICAgc3RhdDogZnMuc3RhdCxcclxuICAgIGxzdGF0U3luYzogZnMubHN0YXRTeW5jLFxyXG4gICAgc3RhdFN5bmM6IGZzLnN0YXRTeW5jLFxyXG4gICAgcmVhZGRpcjogZnMucmVhZGRpcixcclxuICAgIHJlYWRkaXJTeW5jOiBmcy5yZWFkZGlyU3luY1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVGaWxlU3lzdGVtQWRhcHRlcihmc01ldGhvZHMpIHtcclxuICAgIGlmIChmc01ldGhvZHMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVIpLCBmc01ldGhvZHMpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIgPSBjcmVhdGVGaWxlU3lzdGVtQWRhcHRlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBmc1N0YXQgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc3RhdFwiKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiLi9hZGFwdGVycy9mc1wiKTtcclxuY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoX29wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgICAgICB0aGlzLmZvbGxvd1N5bWJvbGljTGlua3MgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmZvbGxvd1N5bWJvbGljTGlua3MsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmZzID0gZnMuY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIodGhpcy5fb3B0aW9ucy5mcyk7XHJcbiAgICAgICAgdGhpcy5wYXRoU2VnbWVudFNlcGFyYXRvciA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMucGF0aFNlZ21lbnRTZXBhcmF0b3IsIHBhdGguc2VwKTtcclxuICAgICAgICB0aGlzLnN0YXRzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5zdGF0cywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmssIHRydWUpO1xyXG4gICAgICAgIHRoaXMuZnNTdGF0U2V0dGluZ3MgPSBuZXcgZnNTdGF0LlNldHRpbmdzKHtcclxuICAgICAgICAgICAgZm9sbG93U3ltYm9saWNMaW5rOiB0aGlzLmZvbGxvd1N5bWJvbGljTGlua3MsXHJcbiAgICAgICAgICAgIGZzOiB0aGlzLmZzLFxyXG4gICAgICAgICAgICB0aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbms6IHRoaXMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0VmFsdWUob3B0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBvcHRpb24gPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogb3B0aW9uO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFNldHRpbmdzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhc3luYyA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9hc3luY1wiKTtcclxuY29uc3Qgc3luYyA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xyXG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XHJcbmV4cG9ydHMuU2V0dGluZ3MgPSBzZXR0aW5nc18xLmRlZmF1bHQ7XHJcbmZ1bmN0aW9uIHNjYW5kaXIocGF0aCwgb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gYXN5bmMucmVhZChwYXRoLCBnZXRTZXR0aW5ncygpLCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgYXN5bmMucmVhZChwYXRoLCBnZXRTZXR0aW5ncyhvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spLCBjYWxsYmFjayk7XHJcbn1cclxuZXhwb3J0cy5zY2FuZGlyID0gc2NhbmRpcjtcclxuZnVuY3Rpb24gc2NhbmRpclN5bmMocGF0aCwgb3B0aW9uc09yU2V0dGluZ3MpIHtcclxuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3MpO1xyXG4gICAgcmV0dXJuIHN5bmMucmVhZChwYXRoLCBzZXR0aW5ncyk7XHJcbn1cclxuZXhwb3J0cy5zY2FuZGlyU3luYyA9IHNjYW5kaXJTeW5jO1xyXG5mdW5jdGlvbiBnZXRTZXR0aW5ncyhzZXR0aW5nc09yT3B0aW9ucyA9IHt9KSB7XHJcbiAgICBpZiAoc2V0dGluZ3NPck9wdGlvbnMgaW5zdGFuY2VvZiBzZXR0aW5nc18xLmRlZmF1bHQpIHtcclxuICAgICAgICByZXR1cm4gc2V0dGluZ3NPck9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IHNldHRpbmdzXzEuZGVmYXVsdChzZXR0aW5nc09yT3B0aW9ucyk7XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIHJldXNpZnkgKENvbnN0cnVjdG9yKSB7XG4gIHZhciBoZWFkID0gbmV3IENvbnN0cnVjdG9yKClcbiAgdmFyIHRhaWwgPSBoZWFkXG5cbiAgZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICB2YXIgY3VycmVudCA9IGhlYWRcblxuICAgIGlmIChjdXJyZW50Lm5leHQpIHtcbiAgICAgIGhlYWQgPSBjdXJyZW50Lm5leHRcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZCA9IG5ldyBDb25zdHJ1Y3RvcigpXG4gICAgICB0YWlsID0gaGVhZFxuICAgIH1cblxuICAgIGN1cnJlbnQubmV4dCA9IG51bGxcblxuICAgIHJldHVybiBjdXJyZW50XG4gIH1cblxuICBmdW5jdGlvbiByZWxlYXNlIChvYmopIHtcbiAgICB0YWlsLm5leHQgPSBvYmpcbiAgICB0YWlsID0gb2JqXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldDogZ2V0LFxuICAgIHJlbGVhc2U6IHJlbGVhc2VcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJldXNpZnlcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgcmV1c2lmeSA9IHJlcXVpcmUoJ3JldXNpZnknKVxuXG5mdW5jdGlvbiBmYXN0cXVldWUgKGNvbnRleHQsIHdvcmtlciwgY29uY3VycmVuY3kpIHtcbiAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uY3VycmVuY3kgPSB3b3JrZXJcbiAgICB3b3JrZXIgPSBjb250ZXh0XG4gICAgY29udGV4dCA9IG51bGxcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHJldXNpZnkoVGFzaylcbiAgdmFyIHF1ZXVlSGVhZCA9IG51bGxcbiAgdmFyIHF1ZXVlVGFpbCA9IG51bGxcbiAgdmFyIF9ydW5uaW5nID0gMFxuXG4gIHZhciBzZWxmID0ge1xuICAgIHB1c2g6IHB1c2gsXG4gICAgZHJhaW46IG5vb3AsXG4gICAgc2F0dXJhdGVkOiBub29wLFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIGNvbmN1cnJlbmN5OiBjb25jdXJyZW5jeSxcbiAgICBydW5uaW5nOiBydW5uaW5nLFxuICAgIHJlc3VtZTogcmVzdW1lLFxuICAgIGlkbGU6IGlkbGUsXG4gICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgdW5zaGlmdDogdW5zaGlmdCxcbiAgICBlbXB0eTogbm9vcCxcbiAgICBraWxsOiBraWxsLFxuICAgIGtpbGxBbmREcmFpbjoga2lsbEFuZERyYWluXG4gIH1cblxuICByZXR1cm4gc2VsZlxuXG4gIGZ1bmN0aW9uIHJ1bm5pbmcgKCkge1xuICAgIHJldHVybiBfcnVubmluZ1xuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UgKCkge1xuICAgIHNlbGYucGF1c2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHF1ZXVlSGVhZFxuICAgIHZhciBjb3VudGVyID0gMFxuXG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRcbiAgICAgIGNvdW50ZXIrK1xuICAgIH1cblxuICAgIHJldHVybiBjb3VudGVyXG4gIH1cblxuICBmdW5jdGlvbiByZXN1bWUgKCkge1xuICAgIGlmICghc2VsZi5wYXVzZWQpIHJldHVyblxuICAgIHNlbGYucGF1c2VkID0gZmFsc2VcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuY29uY3VycmVuY3k7IGkrKykge1xuICAgICAgX3J1bm5pbmcrK1xuICAgICAgcmVsZWFzZSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaWRsZSAoKSB7XG4gICAgcmV0dXJuIF9ydW5uaW5nID09PSAwICYmIHNlbGYubGVuZ3RoKCkgPT09IDBcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2ggKHZhbHVlLCBkb25lKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBjYWNoZS5nZXQoKVxuXG4gICAgY3VycmVudC5jb250ZXh0ID0gY29udGV4dFxuICAgIGN1cnJlbnQucmVsZWFzZSA9IHJlbGVhc2VcbiAgICBjdXJyZW50LnZhbHVlID0gdmFsdWVcbiAgICBjdXJyZW50LmNhbGxiYWNrID0gZG9uZSB8fCBub29wXG5cbiAgICBpZiAoX3J1bm5pbmcgPT09IHNlbGYuY29uY3VycmVuY3kgfHwgc2VsZi5wYXVzZWQpIHtcbiAgICAgIGlmIChxdWV1ZVRhaWwpIHtcbiAgICAgICAgcXVldWVUYWlsLm5leHQgPSBjdXJyZW50XG4gICAgICAgIHF1ZXVlVGFpbCA9IGN1cnJlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSGVhZCA9IGN1cnJlbnRcbiAgICAgICAgcXVldWVUYWlsID0gY3VycmVudFxuICAgICAgICBzZWxmLnNhdHVyYXRlZCgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9ydW5uaW5nKytcbiAgICAgIHdvcmtlci5jYWxsKGNvbnRleHQsIGN1cnJlbnQudmFsdWUsIGN1cnJlbnQud29ya2VkKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2hpZnQgKHZhbHVlLCBkb25lKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBjYWNoZS5nZXQoKVxuXG4gICAgY3VycmVudC5jb250ZXh0ID0gY29udGV4dFxuICAgIGN1cnJlbnQucmVsZWFzZSA9IHJlbGVhc2VcbiAgICBjdXJyZW50LnZhbHVlID0gdmFsdWVcbiAgICBjdXJyZW50LmNhbGxiYWNrID0gZG9uZSB8fCBub29wXG5cbiAgICBpZiAoX3J1bm5pbmcgPT09IHNlbGYuY29uY3VycmVuY3kgfHwgc2VsZi5wYXVzZWQpIHtcbiAgICAgIGlmIChxdWV1ZUhlYWQpIHtcbiAgICAgICAgY3VycmVudC5uZXh0ID0gcXVldWVIZWFkXG4gICAgICAgIHF1ZXVlSGVhZCA9IGN1cnJlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSGVhZCA9IGN1cnJlbnRcbiAgICAgICAgcXVldWVUYWlsID0gY3VycmVudFxuICAgICAgICBzZWxmLnNhdHVyYXRlZCgpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9ydW5uaW5nKytcbiAgICAgIHdvcmtlci5jYWxsKGNvbnRleHQsIGN1cnJlbnQudmFsdWUsIGN1cnJlbnQud29ya2VkKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbGVhc2UgKGhvbGRlcikge1xuICAgIGlmIChob2xkZXIpIHtcbiAgICAgIGNhY2hlLnJlbGVhc2UoaG9sZGVyKVxuICAgIH1cbiAgICB2YXIgbmV4dCA9IHF1ZXVlSGVhZFxuICAgIGlmIChuZXh0KSB7XG4gICAgICBpZiAoIXNlbGYucGF1c2VkKSB7XG4gICAgICAgIGlmIChxdWV1ZVRhaWwgPT09IHF1ZXVlSGVhZCkge1xuICAgICAgICAgIHF1ZXVlVGFpbCA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUhlYWQgPSBuZXh0Lm5leHRcbiAgICAgICAgbmV4dC5uZXh0ID0gbnVsbFxuICAgICAgICB3b3JrZXIuY2FsbChjb250ZXh0LCBuZXh0LnZhbHVlLCBuZXh0LndvcmtlZClcbiAgICAgICAgaWYgKHF1ZXVlVGFpbCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNlbGYuZW1wdHkoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcnVubmluZy0tXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgtLV9ydW5uaW5nID09PSAwKSB7XG4gICAgICBzZWxmLmRyYWluKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBraWxsICgpIHtcbiAgICBxdWV1ZUhlYWQgPSBudWxsXG4gICAgcXVldWVUYWlsID0gbnVsbFxuICAgIHNlbGYuZHJhaW4gPSBub29wXG4gIH1cblxuICBmdW5jdGlvbiBraWxsQW5kRHJhaW4gKCkge1xuICAgIHF1ZXVlSGVhZCA9IG51bGxcbiAgICBxdWV1ZVRhaWwgPSBudWxsXG4gICAgc2VsZi5kcmFpbigpXG4gICAgc2VsZi5kcmFpbiA9IG5vb3BcbiAgfVxufVxuXG5mdW5jdGlvbiBub29wICgpIHt9XG5cbmZ1bmN0aW9uIFRhc2sgKCkge1xuICB0aGlzLnZhbHVlID0gbnVsbFxuICB0aGlzLmNhbGxiYWNrID0gbm9vcFxuICB0aGlzLm5leHQgPSBudWxsXG4gIHRoaXMucmVsZWFzZSA9IG5vb3BcbiAgdGhpcy5jb250ZXh0ID0gbnVsbFxuXG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHRoaXMud29ya2VkID0gZnVuY3Rpb24gd29ya2VkIChlcnIsIHJlc3VsdCkge1xuICAgIHZhciBjYWxsYmFjayA9IHNlbGYuY2FsbGJhY2tcbiAgICBzZWxmLnZhbHVlID0gbnVsbFxuICAgIHNlbGYuY2FsbGJhY2sgPSBub29wXG4gICAgY2FsbGJhY2suY2FsbChzZWxmLmNvbnRleHQsIGVyciwgcmVzdWx0KVxuICAgIHNlbGYucmVsZWFzZShzZWxmKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmFzdHF1ZXVlXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBpc0ZhdGFsRXJyb3Ioc2V0dGluZ3MsIGVycm9yKSB7XHJcbiAgICBpZiAoc2V0dGluZ3MuZXJyb3JGaWx0ZXIgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiAhc2V0dGluZ3MuZXJyb3JGaWx0ZXIoZXJyb3IpO1xyXG59XHJcbmV4cG9ydHMuaXNGYXRhbEVycm9yID0gaXNGYXRhbEVycm9yO1xyXG5mdW5jdGlvbiBpc0FwcGxpZWRGaWx0ZXIoZmlsdGVyLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZpbHRlciA9PT0gbnVsbCB8fCBmaWx0ZXIodmFsdWUpO1xyXG59XHJcbmV4cG9ydHMuaXNBcHBsaWVkRmlsdGVyID0gaXNBcHBsaWVkRmlsdGVyO1xyXG5mdW5jdGlvbiByZXBsYWNlUGF0aFNlZ21lbnRTZXBhcmF0b3IoZmlsZXBhdGgsIHNlcGFyYXRvcikge1xyXG4gICAgcmV0dXJuIGZpbGVwYXRoLnNwbGl0KC9bXFxcXC9dLykuam9pbihzZXBhcmF0b3IpO1xyXG59XHJcbmV4cG9ydHMucmVwbGFjZVBhdGhTZWdtZW50U2VwYXJhdG9yID0gcmVwbGFjZVBhdGhTZWdtZW50U2VwYXJhdG9yO1xyXG5mdW5jdGlvbiBqb2luUGF0aFNlZ21lbnRzKGEsIGIsIHNlcGFyYXRvcikge1xyXG4gICAgaWYgKGEgPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYSArIHNlcGFyYXRvciArIGI7XHJcbn1cclxuZXhwb3J0cy5qb2luUGF0aFNlZ21lbnRzID0gam9pblBhdGhTZWdtZW50cztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY29tbW9uID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xyXG5jbGFzcyBSZWFkZXIge1xyXG4gICAgY29uc3RydWN0b3IoX3Jvb3QsIF9zZXR0aW5ncykge1xyXG4gICAgICAgIHRoaXMuX3Jvb3QgPSBfcm9vdDtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcclxuICAgICAgICB0aGlzLl9yb290ID0gY29tbW9uLnJlcGxhY2VQYXRoU2VnbWVudFNlcGFyYXRvcihfcm9vdCwgX3NldHRpbmdzLnBhdGhTZWdtZW50U2VwYXJhdG9yKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFkZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcclxuY29uc3QgZnNTY2FuZGlyID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnNjYW5kaXJcIik7XHJcbmNvbnN0IGZhc3RxID0gcmVxdWlyZShcImZhc3RxXCIpO1xyXG5jb25zdCBjb21tb24gPSByZXF1aXJlKFwiLi9jb21tb25cIik7XHJcbmNvbnN0IHJlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xyXG5jbGFzcyBBc3luY1JlYWRlciBleHRlbmRzIHJlYWRlcl8xLmRlZmF1bHQge1xyXG4gICAgY29uc3RydWN0b3IoX3Jvb3QsIF9zZXR0aW5ncykge1xyXG4gICAgICAgIHN1cGVyKF9yb290LCBfc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX3NjYW5kaXIgPSBmc1NjYW5kaXIuc2NhbmRpcjtcclxuICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMuX3F1ZXVlID0gZmFzdHEodGhpcy5fd29ya2VyLmJpbmQodGhpcyksIHRoaXMuX3NldHRpbmdzLmNvbmN1cnJlbmN5KTtcclxuICAgICAgICB0aGlzLl9pc0ZhdGFsRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3F1ZXVlLmRyYWluID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzRmF0YWxFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KCdlbmQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZWFkKCkge1xyXG4gICAgICAgIHRoaXMuX2lzRmF0YWxFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lzRGVzdHJveWVkID0gZmFsc2U7XHJcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcHVzaFRvUXVldWUodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MuYmFzZVBhdGgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyO1xyXG4gICAgfVxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcmVhZGVyIGlzIGFscmVhZHkgZGVzdHJveWVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2lzRGVzdHJveWVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9xdWV1ZS5raWxsQW5kRHJhaW4oKTtcclxuICAgIH1cclxuICAgIG9uRW50cnkoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uKCdlbnRyeScsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIG9uRXJyb3IoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uY2UoJ2Vycm9yJywgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgb25FbmQoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uY2UoJ2VuZCcsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIF9wdXNoVG9RdWV1ZShkaXJlY3RvcnksIGJhc2UpIHtcclxuICAgICAgICBjb25zdCBxdWV1ZUl0ZW0gPSB7IGRpcmVjdG9yeSwgYmFzZSB9O1xyXG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2gocXVldWVJdGVtLCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF93b3JrZXIoaXRlbSwgZG9uZSkge1xyXG4gICAgICAgIHRoaXMuX3NjYW5kaXIoaXRlbS5kaXJlY3RvcnksIHRoaXMuX3NldHRpbmdzLmZzU2NhbmRpclNldHRpbmdzLCAoZXJyb3IsIGVudHJpZXMpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnJvciwgdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUVudHJ5KGVudHJ5LCBpdGVtLmJhc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRvbmUobnVsbCwgdW5kZWZpbmVkKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9oYW5kbGVFcnJvcihlcnJvcikge1xyXG4gICAgICAgIGlmICghY29tbW9uLmlzRmF0YWxFcnJvcih0aGlzLl9zZXR0aW5ncywgZXJyb3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faXNGYXRhbEVycm9yID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9pc0Rlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KCdlcnJvcicsIGVycm9yKTtcclxuICAgIH1cclxuICAgIF9oYW5kbGVFbnRyeShlbnRyeSwgYmFzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Rlc3Ryb3llZCB8fCB0aGlzLl9pc0ZhdGFsRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmdWxscGF0aCA9IGVudHJ5LnBhdGg7XHJcbiAgICAgICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbnRyeS5wYXRoID0gY29tbW9uLmpvaW5QYXRoU2VnbWVudHMoYmFzZSwgZW50cnkubmFtZSwgdGhpcy5fc2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tbW9uLmlzQXBwbGllZEZpbHRlcih0aGlzLl9zZXR0aW5ncy5lbnRyeUZpbHRlciwgZW50cnkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VtaXRFbnRyeShlbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlbnRyeS5kaXJlbnQuaXNEaXJlY3RvcnkoKSAmJiBjb21tb24uaXNBcHBsaWVkRmlsdGVyKHRoaXMuX3NldHRpbmdzLmRlZXBGaWx0ZXIsIGVudHJ5KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wdXNoVG9RdWV1ZShmdWxscGF0aCwgZW50cnkucGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX2VtaXRFbnRyeShlbnRyeSkge1xyXG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdCgnZW50cnknLCBlbnRyeSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gQXN5bmNSZWFkZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9hc3luY1wiKTtcclxuY2xhc3MgQXN5bmNQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfcm9vdCwgX3NldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5fcm9vdCA9IF9yb290O1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBhc3luY18xLmRlZmF1bHQodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBuZXcgU2V0KCk7XHJcbiAgICB9XHJcbiAgICByZWFkKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhZGVyLm9uRXJyb3IoKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9yZWFkZXIub25FbnRyeSgoZW50cnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fc3RvcmFnZS5hZGQoZW50cnkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlci5vbkVuZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIFsuLi50aGlzLl9zdG9yYWdlXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fcmVhZGVyLnJlYWQoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBBc3luY1Byb3ZpZGVyO1xyXG5mdW5jdGlvbiBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnJvcikge1xyXG4gICAgY2FsbGJhY2soZXJyb3IpO1xyXG59XHJcbmZ1bmN0aW9uIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIGVudHJpZXMpIHtcclxuICAgIGNhbGxiYWNrKG51bGwsIGVudHJpZXMpO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcclxuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9yZWFkZXJzL2FzeW5jXCIpO1xyXG5jbGFzcyBTdHJlYW1Qcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfcm9vdCwgX3NldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5fcm9vdCA9IF9yb290O1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBhc3luY18xLmRlZmF1bHQodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgICAgIHRoaXMuX3N0cmVhbSA9IG5ldyBzdHJlYW1fMS5SZWFkYWJsZSh7XHJcbiAgICAgICAgICAgIG9iamVjdE1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlYWQ6ICgpID0+IHsgfSxcclxuICAgICAgICAgICAgZGVzdHJveTogdGhpcy5fcmVhZGVyLmRlc3Ryb3kuYmluZCh0aGlzLl9yZWFkZXIpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZWFkKCkge1xyXG4gICAgICAgIHRoaXMuX3JlYWRlci5vbkVycm9yKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0uZW1pdCgnZXJyb3InLCBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fcmVhZGVyLm9uRW50cnkoKGVudHJ5KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0cmVhbS5wdXNoKGVudHJ5KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9yZWFkZXIub25FbmQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0ucHVzaChudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9yZWFkZXIucmVhZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gU3RyZWFtUHJvdmlkZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGZzU2NhbmRpciA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy5zY2FuZGlyXCIpO1xyXG5jb25zdCBjb21tb24gPSByZXF1aXJlKFwiLi9jb21tb25cIik7XHJcbmNvbnN0IHJlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xyXG5jbGFzcyBTeW5jUmVhZGVyIGV4dGVuZHMgcmVhZGVyXzEuZGVmYXVsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3NjYW5kaXIgPSBmc1NjYW5kaXIuc2NhbmRpclN5bmM7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IG5ldyBTZXQoKTtcclxuICAgICAgICB0aGlzLl9xdWV1ZSA9IG5ldyBTZXQoKTtcclxuICAgIH1cclxuICAgIHJlYWQoKSB7XHJcbiAgICAgICAgdGhpcy5fcHVzaFRvUXVldWUodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MuYmFzZVBhdGgpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZVF1ZXVlKCk7XHJcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLl9zdG9yYWdlXTtcclxuICAgIH1cclxuICAgIF9wdXNoVG9RdWV1ZShkaXJlY3RvcnksIGJhc2UpIHtcclxuICAgICAgICB0aGlzLl9xdWV1ZS5hZGQoeyBkaXJlY3RvcnksIGJhc2UgfSk7XHJcbiAgICB9XHJcbiAgICBfaGFuZGxlUXVldWUoKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuX3F1ZXVlLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURpcmVjdG9yeShpdGVtLmRpcmVjdG9yeSwgaXRlbS5iYXNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfaGFuZGxlRGlyZWN0b3J5KGRpcmVjdG9yeSwgYmFzZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSB0aGlzLl9zY2FuZGlyKGRpcmVjdG9yeSwgdGhpcy5fc2V0dGluZ3MuZnNTY2FuZGlyU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUVudHJ5KGVudHJ5LCBiYXNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9oYW5kbGVFcnJvcihlcnJvcikge1xyXG4gICAgICAgIGlmICghY29tbW9uLmlzRmF0YWxFcnJvcih0aGlzLl9zZXR0aW5ncywgZXJyb3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgICBfaGFuZGxlRW50cnkoZW50cnksIGJhc2UpIHtcclxuICAgICAgICBjb25zdCBmdWxscGF0aCA9IGVudHJ5LnBhdGg7XHJcbiAgICAgICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBlbnRyeS5wYXRoID0gY29tbW9uLmpvaW5QYXRoU2VnbWVudHMoYmFzZSwgZW50cnkubmFtZSwgdGhpcy5fc2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tbW9uLmlzQXBwbGllZEZpbHRlcih0aGlzLl9zZXR0aW5ncy5lbnRyeUZpbHRlciwgZW50cnkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3B1c2hUb1N0b3JhZ2UoZW50cnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW50cnkuZGlyZW50LmlzRGlyZWN0b3J5KCkgJiYgY29tbW9uLmlzQXBwbGllZEZpbHRlcih0aGlzLl9zZXR0aW5ncy5kZWVwRmlsdGVyLCBlbnRyeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fcHVzaFRvUXVldWUoZnVsbHBhdGgsIGVudHJ5LnBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9wdXNoVG9TdG9yYWdlKGVudHJ5KSB7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZS5hZGQoZW50cnkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFN5bmNSZWFkZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHN5bmNfMSA9IHJlcXVpcmUoXCIuLi9yZWFkZXJzL3N5bmNcIik7XHJcbmNsYXNzIFN5bmNQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfcm9vdCwgX3NldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5fcm9vdCA9IF9yb290O1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBzeW5jXzEuZGVmYXVsdCh0aGlzLl9yb290LCB0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICByZWFkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIucmVhZCgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFN5bmNQcm92aWRlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBmc1NjYW5kaXIgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc2NhbmRpclwiKTtcclxuY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoX29wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgICAgICB0aGlzLmJhc2VQYXRoID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5iYXNlUGF0aCwgdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLmNvbmN1cnJlbmN5ID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeSwgSW5maW5pdHkpO1xyXG4gICAgICAgIHRoaXMuZGVlcEZpbHRlciA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuZGVlcEZpbHRlciwgbnVsbCk7XHJcbiAgICAgICAgdGhpcy5lbnRyeUZpbHRlciA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuZW50cnlGaWx0ZXIsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuZXJyb3JGaWx0ZXIgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmVycm9yRmlsdGVyLCBudWxsKTtcclxuICAgICAgICB0aGlzLnBhdGhTZWdtZW50U2VwYXJhdG9yID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5wYXRoU2VnbWVudFNlcGFyYXRvciwgcGF0aC5zZXApO1xyXG4gICAgICAgIHRoaXMuZnNTY2FuZGlyU2V0dGluZ3MgPSBuZXcgZnNTY2FuZGlyLlNldHRpbmdzKHtcclxuICAgICAgICAgICAgZm9sbG93U3ltYm9saWNMaW5rczogdGhpcy5fb3B0aW9ucy5mb2xsb3dTeW1ib2xpY0xpbmtzLFxyXG4gICAgICAgICAgICBmczogdGhpcy5fb3B0aW9ucy5mcyxcclxuICAgICAgICAgICAgcGF0aFNlZ21lbnRTZXBhcmF0b3I6IHRoaXMuX29wdGlvbnMucGF0aFNlZ21lbnRTZXBhcmF0b3IsXHJcbiAgICAgICAgICAgIHN0YXRzOiB0aGlzLl9vcHRpb25zLnN0YXRzLFxyXG4gICAgICAgICAgICB0aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbms6IHRoaXMuX29wdGlvbnMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0VmFsdWUob3B0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBvcHRpb24gPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogb3B0aW9uO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFNldHRpbmdzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhc3luY18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL2FzeW5jXCIpO1xyXG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zdHJlYW1cIik7XHJcbmNvbnN0IHN5bmNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xyXG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XHJcbmV4cG9ydHMuU2V0dGluZ3MgPSBzZXR0aW5nc18xLmRlZmF1bHQ7XHJcbmZ1bmN0aW9uIHdhbGsoZGlyZWN0b3J5LCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHJldHVybiBuZXcgYXN5bmNfMS5kZWZhdWx0KGRpcmVjdG9yeSwgZ2V0U2V0dGluZ3MoKSkucmVhZChvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgbmV3IGFzeW5jXzEuZGVmYXVsdChkaXJlY3RvcnksIGdldFNldHRpbmdzKG9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjaykpLnJlYWQoY2FsbGJhY2spO1xyXG59XHJcbmV4cG9ydHMud2FsayA9IHdhbGs7XHJcbmZ1bmN0aW9uIHdhbGtTeW5jKGRpcmVjdG9yeSwgb3B0aW9uc09yU2V0dGluZ3MpIHtcclxuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3MpO1xyXG4gICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgc3luY18xLmRlZmF1bHQoZGlyZWN0b3J5LCBzZXR0aW5ncyk7XHJcbiAgICByZXR1cm4gcHJvdmlkZXIucmVhZCgpO1xyXG59XHJcbmV4cG9ydHMud2Fsa1N5bmMgPSB3YWxrU3luYztcclxuZnVuY3Rpb24gd2Fsa1N0cmVhbShkaXJlY3RvcnksIG9wdGlvbnNPclNldHRpbmdzKSB7XHJcbiAgICBjb25zdCBzZXR0aW5ncyA9IGdldFNldHRpbmdzKG9wdGlvbnNPclNldHRpbmdzKTtcclxuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IHN0cmVhbV8xLmRlZmF1bHQoZGlyZWN0b3J5LCBzZXR0aW5ncyk7XHJcbiAgICByZXR1cm4gcHJvdmlkZXIucmVhZCgpO1xyXG59XHJcbmV4cG9ydHMud2Fsa1N0cmVhbSA9IHdhbGtTdHJlYW07XHJcbmZ1bmN0aW9uIGdldFNldHRpbmdzKHNldHRpbmdzT3JPcHRpb25zID0ge30pIHtcclxuICAgIGlmIChzZXR0aW5nc09yT3B0aW9ucyBpbnN0YW5jZW9mIHNldHRpbmdzXzEuZGVmYXVsdCkge1xyXG4gICAgICAgIHJldHVybiBzZXR0aW5nc09yT3B0aW9ucztcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgc2V0dGluZ3NfMS5kZWZhdWx0KHNldHRpbmdzT3JPcHRpb25zKTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IGZzU3RhdCA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy5zdGF0XCIpO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcclxuY2xhc3MgUmVhZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncykge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX2ZzU3RhdFNldHRpbmdzID0gbmV3IGZzU3RhdC5TZXR0aW5ncyh7XHJcbiAgICAgICAgICAgIGZvbGxvd1N5bWJvbGljTGluazogdGhpcy5fc2V0dGluZ3MuZm9sbG93U3ltYm9saWNMaW5rcyxcclxuICAgICAgICAgICAgZnM6IHRoaXMuX3NldHRpbmdzLmZzLFxyXG4gICAgICAgICAgICB0aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbms6IHRoaXMuX3NldHRpbmdzLmZvbGxvd1N5bWJvbGljTGlua3NcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9nZXRGdWxsRW50cnlQYXRoKGZpbGVwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZSh0aGlzLl9zZXR0aW5ncy5jd2QsIGZpbGVwYXRoKTtcclxuICAgIH1cclxuICAgIF9tYWtlRW50cnkoc3RhdHMsIHBhdHRlcm4pIHtcclxuICAgICAgICBjb25zdCBlbnRyeSA9IHtcclxuICAgICAgICAgICAgbmFtZTogcGF0dGVybixcclxuICAgICAgICAgICAgcGF0aDogcGF0dGVybixcclxuICAgICAgICAgICAgZGlyZW50OiB1dGlscy5mcy5jcmVhdGVEaXJlbnRGcm9tU3RhdHMocGF0dGVybiwgc3RhdHMpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3Muc3RhdHMpIHtcclxuICAgICAgICAgICAgZW50cnkuc3RhdHMgPSBzdGF0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xyXG4gICAgfVxyXG4gICAgX2lzRmF0YWxFcnJvcihlcnJvcikge1xyXG4gICAgICAgIHJldHVybiAhdXRpbHMuZXJybm8uaXNFbm9lbnRDb2RlRXJyb3IoZXJyb3IpICYmICF0aGlzLl9zZXR0aW5ncy5zdXBwcmVzc0Vycm9ycztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFkZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcclxuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XHJcbmNvbnN0IGZzV2FsayA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy53YWxrXCIpO1xyXG5jb25zdCByZWFkZXJfMSA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxuY2xhc3MgUmVhZGVyU3RyZWFtIGV4dGVuZHMgcmVhZGVyXzEuZGVmYXVsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3dhbGtTdHJlYW0gPSBmc1dhbGsud2Fsa1N0cmVhbTtcclxuICAgICAgICB0aGlzLl9zdGF0ID0gZnNTdGF0LnN0YXQ7XHJcbiAgICB9XHJcbiAgICBkeW5hbWljKHJvb3QsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2Fsa1N0cmVhbShyb290LCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyhwYXR0ZXJucywgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IGZpbGVwYXRocyA9IHBhdHRlcm5zLm1hcCh0aGlzLl9nZXRGdWxsRW50cnlQYXRoLCB0aGlzKTtcclxuICAgICAgICBjb25zdCBzdHJlYW0gPSBuZXcgc3RyZWFtXzEuUGFzc1Rocm91Z2goeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xyXG4gICAgICAgIHN0cmVhbS5fd3JpdGUgPSAoaW5kZXgsIF9lbmMsIGRvbmUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVudHJ5KGZpbGVwYXRoc1tpbmRleF0sIHBhdHRlcm5zW2luZGV4XSwgb3B0aW9ucylcclxuICAgICAgICAgICAgICAgIC50aGVuKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5ICE9PSBudWxsICYmIG9wdGlvbnMuZW50cnlGaWx0ZXIoZW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtLnB1c2goZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBmaWxlcGF0aHMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5lbmQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChkb25lKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN0cmVhbS53cml0ZShpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcclxuICAgIH1cclxuICAgIF9nZXRFbnRyeShmaWxlcGF0aCwgcGF0dGVybiwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTdGF0KGZpbGVwYXRoKVxyXG4gICAgICAgICAgICAudGhlbigoc3RhdHMpID0+IHRoaXMuX21ha2VFbnRyeShzdGF0cywgcGF0dGVybikpXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXJyb3JGaWx0ZXIoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9nZXRTdGF0KGZpbGVwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdChmaWxlcGF0aCwgdGhpcy5fZnNTdGF0U2V0dGluZ3MsIChlcnJvciwgc3RhdHMpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvciA9PT0gbnVsbCA/IHJlc29sdmUoc3RhdHMpIDogcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gUmVhZGVyU3RyZWFtO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcclxuY2xhc3MgTWF0Y2hlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihfcGF0dGVybnMsIF9zZXR0aW5ncywgX21pY3JvbWF0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5fcGF0dGVybnMgPSBfcGF0dGVybnM7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMgPSBfbWljcm9tYXRjaE9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2ZpbGxTdG9yYWdlKCk7XHJcbiAgICB9XHJcbiAgICBfZmlsbFN0b3JhZ2UoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9yaWdpbmFsIHBhdHRlcm4gbWF5IGluY2x1ZGUgYHssKiwqKixhLyp9YCwgd2hpY2ggd2lsbCBsZWFkIHRvIHByb2JsZW1zIHdpdGggbWF0Y2hpbmcgKHVucmVzb2x2ZWQgbGV2ZWwpLlxyXG4gICAgICAgICAqIFNvLCBiZWZvcmUgZXhwYW5kIHBhdHRlcm5zIHdpdGggYnJhY2UgZXhwYW5zaW9uIGludG8gc2VwYXJhdGVkIHBhdHRlcm5zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gdXRpbHMucGF0dGVybi5leHBhbmRQYXR0ZXJuc1dpdGhCcmFjZUV4cGFuc2lvbih0aGlzLl9wYXR0ZXJucyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5fZ2V0UGF0dGVyblNlZ21lbnRzKHBhdHRlcm4pO1xyXG4gICAgICAgICAgICBjb25zdCBzZWN0aW9ucyA9IHRoaXMuX3NwbGl0U2VnbWVudHNJbnRvU2VjdGlvbnMoc2VnbWVudHMpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdG9yYWdlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IHNlY3Rpb25zLmxlbmd0aCA8PSAxLFxyXG4gICAgICAgICAgICAgICAgcGF0dGVybixcclxuICAgICAgICAgICAgICAgIHNlZ21lbnRzLFxyXG4gICAgICAgICAgICAgICAgc2VjdGlvbnNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX2dldFBhdHRlcm5TZWdtZW50cyhwYXR0ZXJuKSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSB1dGlscy5wYXR0ZXJuLmdldFBhdHRlcm5QYXJ0cyhwYXR0ZXJuLCB0aGlzLl9taWNyb21hdGNoT3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLm1hcCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljID0gdXRpbHMucGF0dGVybi5pc0R5bmFtaWNQYXR0ZXJuKHBhcnQsIHRoaXMuX3NldHRpbmdzKTtcclxuICAgICAgICAgICAgaWYgKCFkeW5hbWljKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IHBhcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGR5bmFtaWM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiBwYXJ0LFxyXG4gICAgICAgICAgICAgICAgcGF0dGVyblJlOiB1dGlscy5wYXR0ZXJuLm1ha2VSZShwYXJ0LCB0aGlzLl9taWNyb21hdGNoT3B0aW9ucylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9zcGxpdFNlZ21lbnRzSW50b1NlY3Rpb25zKHNlZ21lbnRzKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLmFycmF5LnNwbGl0V2hlbihzZWdtZW50cywgKHNlZ21lbnQpID0+IHNlZ21lbnQuZHluYW1pYyAmJiB1dGlscy5wYXR0ZXJuLmhhc0dsb2JTdGFyKHNlZ21lbnQucGF0dGVybikpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IE1hdGNoZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG1hdGNoZXJfMSA9IHJlcXVpcmUoXCIuL21hdGNoZXJcIik7XHJcbmNsYXNzIFBhcnRpYWxNYXRjaGVyIGV4dGVuZHMgbWF0Y2hlcl8xLmRlZmF1bHQge1xyXG4gICAgbWF0Y2goZmlsZXBhdGgpIHtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IGZpbGVwYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgY29uc3QgbGV2ZWxzID0gcGFydHMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gdGhpcy5fc3RvcmFnZS5maWx0ZXIoKGluZm8pID0+ICFpbmZvLmNvbXBsZXRlIHx8IGluZm8uc2VnbWVudHMubGVuZ3RoID4gbGV2ZWxzKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbiA9IHBhdHRlcm4uc2VjdGlvbnNbMF07XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBwYXR0ZXJuIGhhcyBhIGdsb2JzdGFyIGFuZCB3ZSBtdXN0IHJlYWQgYWxsIGRpcmVjdG9yaWVzIHVuY29uZGl0aW9uYWxseSxcclxuICAgICAgICAgICAgICogYnV0IG9ubHkgaWYgdGhlIGxldmVsIGhhcyByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGZpcnN0IGdyb3VwLlxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKiBmaXh0dXJlcy97YSxifS8qKlxyXG4gICAgICAgICAgICAgKiAgXiB0cnVlL2ZhbHNlICBeIGFsd2F5cyB0cnVlXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICghcGF0dGVybi5jb21wbGV0ZSAmJiBsZXZlbHMgPiBzZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBwYXJ0cy5ldmVyeSgocGFydCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBwYXR0ZXJuLnNlZ21lbnRzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50LmR5bmFtaWMgJiYgc2VnbWVudC5wYXR0ZXJuUmUudGVzdChwYXJ0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFzZWdtZW50LmR5bmFtaWMgJiYgc2VnbWVudC5wYXR0ZXJuID09PSBwYXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBQYXJ0aWFsTWF0Y2hlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XHJcbmNvbnN0IHBhcnRpYWxfMSA9IHJlcXVpcmUoXCIuLi9tYXRjaGVycy9wYXJ0aWFsXCIpO1xyXG5jbGFzcyBEZWVwRmlsdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncywgX21pY3JvbWF0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMgPSBfbWljcm9tYXRjaE9wdGlvbnM7XHJcbiAgICB9XHJcbiAgICBnZXRGaWx0ZXIoYmFzZVBhdGgsIHBvc2l0aXZlLCBuZWdhdGl2ZSkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoZXIgPSB0aGlzLl9nZXRNYXRjaGVyKHBvc2l0aXZlKTtcclxuICAgICAgICBjb25zdCBuZWdhdGl2ZVJlID0gdGhpcy5fZ2V0TmVnYXRpdmVQYXR0ZXJuc1JlKG5lZ2F0aXZlKTtcclxuICAgICAgICByZXR1cm4gKGVudHJ5KSA9PiB0aGlzLl9maWx0ZXIoYmFzZVBhdGgsIGVudHJ5LCBtYXRjaGVyLCBuZWdhdGl2ZVJlKTtcclxuICAgIH1cclxuICAgIF9nZXRNYXRjaGVyKHBhdHRlcm5zKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBwYXJ0aWFsXzEuZGVmYXVsdChwYXR0ZXJucywgdGhpcy5fc2V0dGluZ3MsIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zKTtcclxuICAgIH1cclxuICAgIF9nZXROZWdhdGl2ZVBhdHRlcm5zUmUocGF0dGVybnMpIHtcclxuICAgICAgICBjb25zdCBhZmZlY3REZXB0aE9mUmVhZGluZ1BhdHRlcm5zID0gcGF0dGVybnMuZmlsdGVyKHV0aWxzLnBhdHRlcm4uaXNBZmZlY3REZXB0aE9mUmVhZGluZ1BhdHRlcm4pO1xyXG4gICAgICAgIHJldHVybiB1dGlscy5wYXR0ZXJuLmNvbnZlcnRQYXR0ZXJuc1RvUmUoYWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJucywgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgX2ZpbHRlcihiYXNlUGF0aCwgZW50cnksIG1hdGNoZXIsIG5lZ2F0aXZlUmUpIHtcclxuICAgICAgICBjb25zdCBkZXB0aCA9IHRoaXMuX2dldEVudHJ5TGV2ZWwoYmFzZVBhdGgsIGVudHJ5LnBhdGgpO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1NraXBwZWRCeURlZXAoZGVwdGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzU2tpcHBlZFN5bWJvbGljTGluayhlbnRyeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaWxlcGF0aCA9IHV0aWxzLnBhdGgucmVtb3ZlTGVhZGluZ0RvdFNlZ21lbnQoZW50cnkucGF0aCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzU2tpcHBlZEJ5UG9zaXRpdmVQYXR0ZXJucyhmaWxlcGF0aCwgbWF0Y2hlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faXNTa2lwcGVkQnlOZWdhdGl2ZVBhdHRlcm5zKGZpbGVwYXRoLCBuZWdhdGl2ZVJlKTtcclxuICAgIH1cclxuICAgIF9pc1NraXBwZWRCeURlZXAoZW50cnlEZXB0aCkge1xyXG4gICAgICAgIHJldHVybiBlbnRyeURlcHRoID49IHRoaXMuX3NldHRpbmdzLmRlZXA7XHJcbiAgICB9XHJcbiAgICBfaXNTa2lwcGVkU3ltYm9saWNMaW5rKGVudHJ5KSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLl9zZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzICYmIGVudHJ5LmRpcmVudC5pc1N5bWJvbGljTGluaygpO1xyXG4gICAgfVxyXG4gICAgX2dldEVudHJ5TGV2ZWwoYmFzZVBhdGgsIGVudHJ5UGF0aCkge1xyXG4gICAgICAgIGNvbnN0IGJhc2VQYXRoRGVwdGggPSBiYXNlUGF0aC5zcGxpdCgnLycpLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBlbnRyeVBhdGhEZXB0aCA9IGVudHJ5UGF0aC5zcGxpdCgnLycpLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gZW50cnlQYXRoRGVwdGggLSAoYmFzZVBhdGggPT09ICcnID8gMCA6IGJhc2VQYXRoRGVwdGgpO1xyXG4gICAgfVxyXG4gICAgX2lzU2tpcHBlZEJ5UG9zaXRpdmVQYXR0ZXJucyhlbnRyeVBhdGgsIG1hdGNoZXIpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuX3NldHRpbmdzLmJhc2VOYW1lTWF0Y2ggJiYgIW1hdGNoZXIubWF0Y2goZW50cnlQYXRoKTtcclxuICAgIH1cclxuICAgIF9pc1NraXBwZWRCeU5lZ2F0aXZlUGF0dGVybnMoZW50cnlQYXRoLCBuZWdhdGl2ZVJlKSB7XHJcbiAgICAgICAgcmV0dXJuICF1dGlscy5wYXR0ZXJuLm1hdGNoQW55KGVudHJ5UGF0aCwgbmVnYXRpdmVSZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gRGVlcEZpbHRlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XHJcbmNsYXNzIEVudHJ5RmlsdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncywgX21pY3JvbWF0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMgPSBfbWljcm9tYXRjaE9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIGdldEZpbHRlcihwb3NpdGl2ZSwgbmVnYXRpdmUpIHtcclxuICAgICAgICBjb25zdCBwb3NpdGl2ZVJlID0gdXRpbHMucGF0dGVybi5jb252ZXJ0UGF0dGVybnNUb1JlKHBvc2l0aXZlLCB0aGlzLl9taWNyb21hdGNoT3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgbmVnYXRpdmVSZSA9IHV0aWxzLnBhdHRlcm4uY29udmVydFBhdHRlcm5zVG9SZShuZWdhdGl2ZSwgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiAoZW50cnkpID0+IHRoaXMuX2ZpbHRlcihlbnRyeSwgcG9zaXRpdmVSZSwgbmVnYXRpdmVSZSk7XHJcbiAgICB9XHJcbiAgICBfZmlsdGVyKGVudHJ5LCBwb3NpdGl2ZVJlLCBuZWdhdGl2ZVJlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLnVuaXF1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNEdXBsaWNhdGVFbnRyeShlbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVJbmRleFJlY29yZChlbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9vbmx5RmlsZUZpbHRlcihlbnRyeSkgfHwgdGhpcy5fb25seURpcmVjdG9yeUZpbHRlcihlbnRyeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5faXNTa2lwcGVkQnlBYnNvbHV0ZU5lZ2F0aXZlUGF0dGVybnMoZW50cnksIG5lZ2F0aXZlUmUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLl9zZXR0aW5ncy5iYXNlTmFtZU1hdGNoID8gZW50cnkubmFtZSA6IGVudHJ5LnBhdGg7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzTWF0Y2hUb1BhdHRlcm5zKGZpbGVwYXRoLCBwb3NpdGl2ZVJlKSAmJiAhdGhpcy5faXNNYXRjaFRvUGF0dGVybnMoZW50cnkucGF0aCwgbmVnYXRpdmVSZSk7XHJcbiAgICB9XHJcbiAgICBfaXNEdXBsaWNhdGVFbnRyeShlbnRyeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4LmhhcyhlbnRyeS5wYXRoKTtcclxuICAgIH1cclxuICAgIF9jcmVhdGVJbmRleFJlY29yZChlbnRyeSkge1xyXG4gICAgICAgIHRoaXMuaW5kZXguc2V0KGVudHJ5LnBhdGgsIHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICBfb25seUZpbGVGaWx0ZXIoZW50cnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3Mub25seUZpbGVzICYmICFlbnRyeS5kaXJlbnQuaXNGaWxlKCk7XHJcbiAgICB9XHJcbiAgICBfb25seURpcmVjdG9yeUZpbHRlcihlbnRyeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5vbmx5RGlyZWN0b3JpZXMgJiYgIWVudHJ5LmRpcmVudC5pc0RpcmVjdG9yeSgpO1xyXG4gICAgfVxyXG4gICAgX2lzU2tpcHBlZEJ5QWJzb2x1dGVOZWdhdGl2ZVBhdHRlcm5zKGVudHJ5LCBuZWdhdGl2ZVJlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5hYnNvbHV0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZ1bGxwYXRoID0gdXRpbHMucGF0aC5tYWtlQWJzb2x1dGUodGhpcy5fc2V0dGluZ3MuY3dkLCBlbnRyeS5wYXRoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNNYXRjaFRvUGF0dGVybnMoZnVsbHBhdGgsIG5lZ2F0aXZlUmUpO1xyXG4gICAgfVxyXG4gICAgX2lzTWF0Y2hUb1BhdHRlcm5zKGVudHJ5UGF0aCwgcGF0dGVybnNSZSkge1xyXG4gICAgICAgIGNvbnN0IGZpbGVwYXRoID0gdXRpbHMucGF0aC5yZW1vdmVMZWFkaW5nRG90U2VnbWVudChlbnRyeVBhdGgpO1xyXG4gICAgICAgIHJldHVybiB1dGlscy5wYXR0ZXJuLm1hdGNoQW55KGZpbGVwYXRoLCBwYXR0ZXJuc1JlKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBFbnRyeUZpbHRlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XHJcbmNsYXNzIEVycm9yRmlsdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncykge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgfVxyXG4gICAgZ2V0RmlsdGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoZXJyb3IpID0+IHRoaXMuX2lzTm9uRmF0YWxFcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbiAgICBfaXNOb25GYXRhbEVycm9yKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLmVycm5vLmlzRW5vZW50Q29kZUVycm9yKGVycm9yKSB8fCB0aGlzLl9zZXR0aW5ncy5zdXBwcmVzc0Vycm9ycztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBFcnJvckZpbHRlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XHJcbmNsYXNzIEVudHJ5VHJhbnNmb3JtZXIge1xyXG4gICAgY29uc3RydWN0b3IoX3NldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XHJcbiAgICB9XHJcbiAgICBnZXRUcmFuc2Zvcm1lcigpIHtcclxuICAgICAgICByZXR1cm4gKGVudHJ5KSA9PiB0aGlzLl90cmFuc2Zvcm0oZW50cnkpO1xyXG4gICAgfVxyXG4gICAgX3RyYW5zZm9ybShlbnRyeSkge1xyXG4gICAgICAgIGxldCBmaWxlcGF0aCA9IGVudHJ5LnBhdGg7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLmFic29sdXRlKSB7XHJcbiAgICAgICAgICAgIGZpbGVwYXRoID0gdXRpbHMucGF0aC5tYWtlQWJzb2x1dGUodGhpcy5fc2V0dGluZ3MuY3dkLCBmaWxlcGF0aCk7XHJcbiAgICAgICAgICAgIGZpbGVwYXRoID0gdXRpbHMucGF0aC51bml4aWZ5KGZpbGVwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLm1hcmtEaXJlY3RvcmllcyAmJiBlbnRyeS5kaXJlbnQuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgICAgICBmaWxlcGF0aCArPSAnLyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5fc2V0dGluZ3Mub2JqZWN0TW9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmlsZXBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGVudHJ5KSwgeyBwYXRoOiBmaWxlcGF0aCB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBFbnRyeVRyYW5zZm9ybWVyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IGRlZXBfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMvZGVlcFwiKTtcclxuY29uc3QgZW50cnlfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMvZW50cnlcIik7XHJcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJzL2Vycm9yXCIpO1xyXG5jb25zdCBlbnRyeV8yID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtZXJzL2VudHJ5XCIpO1xyXG5jbGFzcyBQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcclxuICAgICAgICB0aGlzLmVycm9yRmlsdGVyID0gbmV3IGVycm9yXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5lbnRyeUZpbHRlciA9IG5ldyBlbnRyeV8xLmRlZmF1bHQodGhpcy5fc2V0dGluZ3MsIHRoaXMuX2dldE1pY3JvbWF0Y2hPcHRpb25zKCkpO1xyXG4gICAgICAgIHRoaXMuZGVlcEZpbHRlciA9IG5ldyBkZWVwXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncywgdGhpcy5fZ2V0TWljcm9tYXRjaE9wdGlvbnMoKSk7XHJcbiAgICAgICAgdGhpcy5lbnRyeVRyYW5zZm9ybWVyID0gbmV3IGVudHJ5XzIuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBfZ2V0Um9vdERpcmVjdG9yeSh0YXNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZSh0aGlzLl9zZXR0aW5ncy5jd2QsIHRhc2suYmFzZSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZVBhdGggPSB0YXNrLmJhc2UgPT09ICcuJyA/ICcnIDogdGFzay5iYXNlO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJhc2VQYXRoLFxyXG4gICAgICAgICAgICBwYXRoU2VnbWVudFNlcGFyYXRvcjogJy8nLFxyXG4gICAgICAgICAgICBjb25jdXJyZW5jeTogdGhpcy5fc2V0dGluZ3MuY29uY3VycmVuY3ksXHJcbiAgICAgICAgICAgIGRlZXBGaWx0ZXI6IHRoaXMuZGVlcEZpbHRlci5nZXRGaWx0ZXIoYmFzZVBhdGgsIHRhc2sucG9zaXRpdmUsIHRhc2submVnYXRpdmUpLFxyXG4gICAgICAgICAgICBlbnRyeUZpbHRlcjogdGhpcy5lbnRyeUZpbHRlci5nZXRGaWx0ZXIodGFzay5wb3NpdGl2ZSwgdGFzay5uZWdhdGl2ZSksXHJcbiAgICAgICAgICAgIGVycm9yRmlsdGVyOiB0aGlzLmVycm9yRmlsdGVyLmdldEZpbHRlcigpLFxyXG4gICAgICAgICAgICBmb2xsb3dTeW1ib2xpY0xpbmtzOiB0aGlzLl9zZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzLFxyXG4gICAgICAgICAgICBmczogdGhpcy5fc2V0dGluZ3MuZnMsXHJcbiAgICAgICAgICAgIHN0YXRzOiB0aGlzLl9zZXR0aW5ncy5zdGF0cyxcclxuICAgICAgICAgICAgdGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rOiB0aGlzLl9zZXR0aW5ncy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmssXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdGhpcy5lbnRyeVRyYW5zZm9ybWVyLmdldFRyYW5zZm9ybWVyKClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgX2dldE1pY3JvbWF0Y2hPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRvdDogdGhpcy5fc2V0dGluZ3MuZG90LFxyXG4gICAgICAgICAgICBtYXRjaEJhc2U6IHRoaXMuX3NldHRpbmdzLmJhc2VOYW1lTWF0Y2gsXHJcbiAgICAgICAgICAgIG5vYnJhY2U6ICF0aGlzLl9zZXR0aW5ncy5icmFjZUV4cGFuc2lvbixcclxuICAgICAgICAgICAgbm9jYXNlOiAhdGhpcy5fc2V0dGluZ3MuY2FzZVNlbnNpdGl2ZU1hdGNoLFxyXG4gICAgICAgICAgICBub2V4dDogIXRoaXMuX3NldHRpbmdzLmV4dGdsb2IsXHJcbiAgICAgICAgICAgIG5vZ2xvYnN0YXI6ICF0aGlzLl9zZXR0aW5ncy5nbG9ic3RhcixcclxuICAgICAgICAgICAgcG9zaXg6IHRydWUsXHJcbiAgICAgICAgICAgIHN0cmljdFNsYXNoZXM6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBQcm92aWRlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9zdHJlYW1cIik7XHJcbmNvbnN0IHByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlclwiKTtcclxuY2xhc3MgUHJvdmlkZXJBc3luYyBleHRlbmRzIHByb3ZpZGVyXzEuZGVmYXVsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBzdHJlYW1fMS5kZWZhdWx0KHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH1cclxuICAgIHJlYWQodGFzaykge1xyXG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLl9nZXRSb290RGlyZWN0b3J5KHRhc2spO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9nZXRSZWFkZXJPcHRpb25zKHRhc2spO1xyXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBbXTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLmFwaShyb290LCB0YXNrLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgc3RyZWFtLm9uY2UoJ2Vycm9yJywgcmVqZWN0KTtcclxuICAgICAgICAgICAgc3RyZWFtLm9uKCdkYXRhJywgKGVudHJ5KSA9PiBlbnRyaWVzLnB1c2gob3B0aW9ucy50cmFuc2Zvcm0oZW50cnkpKSk7XHJcbiAgICAgICAgICAgIHN0cmVhbS5vbmNlKCdlbmQnLCAoKSA9PiByZXNvbHZlKGVudHJpZXMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFwaShyb290LCB0YXNrLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHRhc2suZHluYW1pYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLmR5bmFtaWMocm9vdCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuc3RhdGljKHRhc2sucGF0dGVybnMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3ZpZGVyQXN5bmM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcclxuY29uc3Qgc3RyZWFtXzIgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9zdHJlYW1cIik7XHJcbmNvbnN0IHByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlclwiKTtcclxuY2xhc3MgUHJvdmlkZXJTdHJlYW0gZXh0ZW5kcyBwcm92aWRlcl8xLmRlZmF1bHQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLl9yZWFkZXIgPSBuZXcgc3RyZWFtXzIuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICByZWFkKHRhc2spIHtcclxuICAgICAgICBjb25zdCByb290ID0gdGhpcy5fZ2V0Um9vdERpcmVjdG9yeSh0YXNrKTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKTtcclxuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmFwaShyb290LCB0YXNrLCBvcHRpb25zKTtcclxuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IG5ldyBzdHJlYW1fMS5SZWFkYWJsZSh7IG9iamVjdE1vZGU6IHRydWUsIHJlYWQ6ICgpID0+IHsgfSB9KTtcclxuICAgICAgICBzb3VyY2VcclxuICAgICAgICAgICAgLm9uY2UoJ2Vycm9yJywgKGVycm9yKSA9PiBkZXN0aW5hdGlvbi5lbWl0KCdlcnJvcicsIGVycm9yKSlcclxuICAgICAgICAgICAgLm9uKCdkYXRhJywgKGVudHJ5KSA9PiBkZXN0aW5hdGlvbi5lbWl0KCdkYXRhJywgb3B0aW9ucy50cmFuc2Zvcm0oZW50cnkpKSlcclxuICAgICAgICAgICAgLm9uY2UoJ2VuZCcsICgpID0+IGRlc3RpbmF0aW9uLmVtaXQoJ2VuZCcpKTtcclxuICAgICAgICBkZXN0aW5hdGlvblxyXG4gICAgICAgICAgICAub25jZSgnY2xvc2UnLCAoKSA9PiBzb3VyY2UuZGVzdHJveSgpKTtcclxuICAgICAgICByZXR1cm4gZGVzdGluYXRpb247XHJcbiAgICB9XHJcbiAgICBhcGkocm9vdCwgdGFzaywgb3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0YXNrLmR5bmFtaWMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRlci5keW5hbWljKHJvb3QsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLnN0YXRpYyh0YXNrLnBhdHRlcm5zLCBvcHRpb25zKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBQcm92aWRlclN0cmVhbTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XHJcbmNvbnN0IGZzV2FsayA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy53YWxrXCIpO1xyXG5jb25zdCByZWFkZXJfMSA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxuY2xhc3MgUmVhZGVyU3luYyBleHRlbmRzIHJlYWRlcl8xLmRlZmF1bHQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLl93YWxrU3luYyA9IGZzV2Fsay53YWxrU3luYztcclxuICAgICAgICB0aGlzLl9zdGF0U3luYyA9IGZzU3RhdC5zdGF0U3luYztcclxuICAgIH1cclxuICAgIGR5bmFtaWMocm9vdCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93YWxrU3luYyhyb290LCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyhwYXR0ZXJucywgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLl9nZXRGdWxsRW50cnlQYXRoKHBhdHRlcm4pO1xyXG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuX2dldEVudHJ5KGZpbGVwYXRoLCBwYXR0ZXJuLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaWYgKGVudHJ5ID09PSBudWxsIHx8ICFvcHRpb25zLmVudHJ5RmlsdGVyKGVudHJ5KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZW50cmllcy5wdXNoKGVudHJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVudHJpZXM7XHJcbiAgICB9XHJcbiAgICBfZ2V0RW50cnkoZmlsZXBhdGgsIHBhdHRlcm4sIG9wdGlvbnMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0cyA9IHRoaXMuX2dldFN0YXQoZmlsZXBhdGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFrZUVudHJ5KHN0YXRzLCBwYXR0ZXJuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVycm9yRmlsdGVyKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX2dldFN0YXQoZmlsZXBhdGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdFN5bmMoZmlsZXBhdGgsIHRoaXMuX2ZzU3RhdFNldHRpbmdzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFkZXJTeW5jO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzeW5jXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9zeW5jXCIpO1xyXG5jb25zdCBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XHJcbmNsYXNzIFByb3ZpZGVyU3luYyBleHRlbmRzIHByb3ZpZGVyXzEuZGVmYXVsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBzeW5jXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICByZWFkKHRhc2spIHtcclxuICAgICAgICBjb25zdCByb290ID0gdGhpcy5fZ2V0Um9vdERpcmVjdG9yeSh0YXNrKTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKTtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5hcGkocm9vdCwgdGFzaywgb3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGVudHJpZXMubWFwKG9wdGlvbnMudHJhbnNmb3JtKTtcclxuICAgIH1cclxuICAgIGFwaShyb290LCB0YXNrLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHRhc2suZHluYW1pYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLmR5bmFtaWMocm9vdCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuc3RhdGljKHRhc2sucGF0dGVybnMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3ZpZGVyU3luYztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmNvbnN0IG9zID0gcmVxdWlyZShcIm9zXCIpO1xyXG5jb25zdCBDUFVfQ09VTlQgPSBvcy5jcHVzKCkubGVuZ3RoO1xyXG5leHBvcnRzLkRFRkFVTFRfRklMRV9TWVNURU1fQURBUFRFUiA9IHtcclxuICAgIGxzdGF0OiBmcy5sc3RhdCxcclxuICAgIGxzdGF0U3luYzogZnMubHN0YXRTeW5jLFxyXG4gICAgc3RhdDogZnMuc3RhdCxcclxuICAgIHN0YXRTeW5jOiBmcy5zdGF0U3luYyxcclxuICAgIHJlYWRkaXI6IGZzLnJlYWRkaXIsXHJcbiAgICByZWFkZGlyU3luYzogZnMucmVhZGRpclN5bmNcclxufTtcclxuY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoX29wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgICAgICB0aGlzLmFic29sdXRlID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5hYnNvbHV0ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuYmFzZU5hbWVNYXRjaCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuYmFzZU5hbWVNYXRjaCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuYnJhY2VFeHBhbnNpb24gPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmJyYWNlRXhwYW5zaW9uLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmNhc2VTZW5zaXRpdmVNYXRjaCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuY2FzZVNlbnNpdGl2ZU1hdGNoLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmNvbmN1cnJlbmN5ID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeSwgQ1BVX0NPVU5UKTtcclxuICAgICAgICB0aGlzLmN3ZCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuY3dkLCBwcm9jZXNzLmN3ZCgpKTtcclxuICAgICAgICB0aGlzLmRlZXAgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmRlZXAsIEluZmluaXR5KTtcclxuICAgICAgICB0aGlzLmRvdCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuZG90LCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5leHRnbG9iID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5leHRnbG9iLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmZvbGxvd1N5bWJvbGljTGlua3MgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmZvbGxvd1N5bWJvbGljTGlua3MsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuZnMgPSB0aGlzLl9nZXRGaWxlU3lzdGVtTWV0aG9kcyh0aGlzLl9vcHRpb25zLmZzKTtcclxuICAgICAgICB0aGlzLmdsb2JzdGFyID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5nbG9ic3RhciwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5pZ25vcmUgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmlnbm9yZSwgW10pO1xyXG4gICAgICAgIHRoaXMubWFya0RpcmVjdG9yaWVzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5tYXJrRGlyZWN0b3JpZXMsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLm9iamVjdE1vZGUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm9ubHlEaXJlY3RvcmllcyA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMub25seURpcmVjdG9yaWVzLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5vbmx5RmlsZXMgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLm9ubHlGaWxlcywgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zdGF0cyA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuc3RhdHMsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnN1cHByZXNzRXJyb3JzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5zdXBwcmVzc0Vycm9ycywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmssIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnVuaXF1ZSA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMudW5pcXVlLCB0cnVlKTtcclxuICAgICAgICBpZiAodGhpcy5vbmx5RGlyZWN0b3JpZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5vbmx5RmlsZXMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHMpIHtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RNb2RlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfZ2V0VmFsdWUob3B0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBvcHRpb24gPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogb3B0aW9uO1xyXG4gICAgfVxyXG4gICAgX2dldEZpbGVTeXN0ZW1NZXRob2RzKG1ldGhvZHMgPSB7fSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV4cG9ydHMuREVGQVVMVF9GSUxFX1NZU1RFTV9BREFQVEVSKSwgbWV0aG9kcyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gU2V0dGluZ3M7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5jb25zdCB0YXNrTWFuYWdlciA9IHJlcXVpcmUoXCIuL21hbmFnZXJzL3Rhc2tzXCIpO1xyXG5jb25zdCBhc3luY18xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL2FzeW5jXCIpO1xyXG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zdHJlYW1cIik7XHJcbmNvbnN0IHN5bmNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xyXG5jb25zdCBzZXR0aW5nc18xID0gcmVxdWlyZShcIi4vc2V0dGluZ3NcIik7XHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XHJcbmFzeW5jIGZ1bmN0aW9uIEZhc3RHbG9iKHNvdXJjZSwgb3B0aW9ucykge1xyXG4gICAgYXNzZXJ0UGF0dGVybnNJbnB1dChzb3VyY2UpO1xyXG4gICAgY29uc3Qgd29ya3MgPSBnZXRXb3Jrcyhzb3VyY2UsIGFzeW5jXzEuZGVmYXVsdCwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLmFsbCh3b3Jrcyk7XHJcbiAgICByZXR1cm4gdXRpbHMuYXJyYXkuZmxhdHRlbihyZXN1bHQpO1xyXG59XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90eXBlc2NyaXB0LWVzbGludC90eXBlc2NyaXB0LWVzbGludC9pc3N1ZXMvNjBcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxyXG4oZnVuY3Rpb24gKEZhc3RHbG9iKSB7XHJcbiAgICBmdW5jdGlvbiBzeW5jKHNvdXJjZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcclxuICAgICAgICBjb25zdCB3b3JrcyA9IGdldFdvcmtzKHNvdXJjZSwgc3luY18xLmRlZmF1bHQsIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiB1dGlscy5hcnJheS5mbGF0dGVuKHdvcmtzKTtcclxuICAgIH1cclxuICAgIEZhc3RHbG9iLnN5bmMgPSBzeW5jO1xyXG4gICAgZnVuY3Rpb24gc3RyZWFtKHNvdXJjZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcclxuICAgICAgICBjb25zdCB3b3JrcyA9IGdldFdvcmtzKHNvdXJjZSwgc3RyZWFtXzEuZGVmYXVsdCwgb3B0aW9ucyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0cmVhbSByZXR1cm5lZCBieSB0aGUgcHJvdmlkZXIgY2Fubm90IHdvcmsgd2l0aCBhbiBhc3luY2hyb25vdXMgaXRlcmF0b3IuXHJcbiAgICAgICAgICogVG8gc3VwcG9ydCBhc3luY2hyb25vdXMgaXRlcmF0b3JzLCByZWdhcmRsZXNzIG9mIHRoZSBudW1iZXIgb2YgdGFza3MsIHdlIGFsd2F5cyBtdWx0aXBsZXggc3RyZWFtcy5cclxuICAgICAgICAgKiBUaGlzIGFmZmVjdHMgcGVyZm9ybWFuY2UgKCsyNSUpLiBJIGRvbid0IHNlZSBiZXN0IHNvbHV0aW9uIHJpZ2h0IG5vdy5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXR1cm4gdXRpbHMuc3RyZWFtLm1lcmdlKHdvcmtzKTtcclxuICAgIH1cclxuICAgIEZhc3RHbG9iLnN0cmVhbSA9IHN0cmVhbTtcclxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlVGFza3Moc291cmNlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgYXNzZXJ0UGF0dGVybnNJbnB1dChzb3VyY2UpO1xyXG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gW10uY29uY2F0KHNvdXJjZSk7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBuZXcgc2V0dGluZ3NfMS5kZWZhdWx0KG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiB0YXNrTWFuYWdlci5nZW5lcmF0ZShwYXR0ZXJucywgc2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgRmFzdEdsb2IuZ2VuZXJhdGVUYXNrcyA9IGdlbmVyYXRlVGFza3M7XHJcbiAgICBmdW5jdGlvbiBpc0R5bmFtaWNQYXR0ZXJuKHNvdXJjZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IG5ldyBzZXR0aW5nc18xLmRlZmF1bHQob3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLnBhdHRlcm4uaXNEeW5hbWljUGF0dGVybihzb3VyY2UsIHNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIEZhc3RHbG9iLmlzRHluYW1pY1BhdHRlcm4gPSBpc0R5bmFtaWNQYXR0ZXJuO1xyXG4gICAgZnVuY3Rpb24gZXNjYXBlUGF0aChzb3VyY2UpIHtcclxuICAgICAgICBhc3NlcnRQYXR0ZXJuc0lucHV0KHNvdXJjZSk7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLnBhdGguZXNjYXBlKHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBGYXN0R2xvYi5lc2NhcGVQYXRoID0gZXNjYXBlUGF0aDtcclxufSkoRmFzdEdsb2IgfHwgKEZhc3RHbG9iID0ge30pKTtcclxuZnVuY3Rpb24gZ2V0V29ya3Moc291cmNlLCBfUHJvdmlkZXIsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHBhdHRlcm5zID0gW10uY29uY2F0KHNvdXJjZSk7XHJcbiAgICBjb25zdCBzZXR0aW5ncyA9IG5ldyBzZXR0aW5nc18xLmRlZmF1bHQob3B0aW9ucyk7XHJcbiAgICBjb25zdCB0YXNrcyA9IHRhc2tNYW5hZ2VyLmdlbmVyYXRlKHBhdHRlcm5zLCBzZXR0aW5ncyk7XHJcbiAgICBjb25zdCBwcm92aWRlciA9IG5ldyBfUHJvdmlkZXIoc2V0dGluZ3MpO1xyXG4gICAgcmV0dXJuIHRhc2tzLm1hcChwcm92aWRlci5yZWFkLCBwcm92aWRlcik7XHJcbn1cclxuZnVuY3Rpb24gYXNzZXJ0UGF0dGVybnNJbnB1dChpbnB1dCkge1xyXG4gICAgY29uc3Qgc291cmNlID0gW10uY29uY2F0KGlucHV0KTtcclxuICAgIGNvbnN0IGlzVmFsaWRTb3VyY2UgPSBzb3VyY2UuZXZlcnkoKGl0ZW0pID0+IHV0aWxzLnN0cmluZy5pc1N0cmluZyhpdGVtKSAmJiAhdXRpbHMuc3RyaW5nLmlzRW1wdHkoaXRlbSkpO1xyXG4gICAgaWYgKCFpc1ZhbGlkU291cmNlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGF0dGVybnMgbXVzdCBiZSBhIHN0cmluZyAobm9uIGVtcHR5KSBvciBhbiBhcnJheSBvZiBzdHJpbmdzJyk7XHJcbiAgICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBGYXN0R2xvYjtcclxuIiwiaW1wb3J0IGZhc3RHbG9iIGZyb20gXCJmYXN0LWdsb2JcIjtcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5jbGFzcyBNb2R1bGVSZXNvbHZlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXN0UnVubmVyKSB7XHJcbiAgICAgICAgdGhpcy50ZXN0UnVubmVyID0gdGVzdFJ1bm5lcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQSBoZWxwZXIgbWV0aG9kIHdoaWNoIHdpbGwgcmVzb2x2ZSBtb2R1bGVzIG1hdGNoaW5nIHRoZSBpbnB1dCBnbG9iLlxyXG4gICAgICogQHBhcmFtIGlucHV0R2xvYnNcclxuICAgICAqIEByZXR1cm4gYSBwcm9taXNlIHdoaWNoIHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiBhbGwgbW9kdWxlcyBhcmUuXHJcbiAgICAgKi9cclxuICAgIHJlc29sdmVHbG9iKGlucHV0R2xvYnMpIHtcclxuICAgICAgICByZXR1cm4gZmFzdEdsb2IoaW5wdXRHbG9icywgeyBpZ25vcmU6IFtcIm5vZGVfbW9kdWxlcy8qKi8qXCJdIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNvbHZlZEVudHJpZXMpID0+IHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiByZXNvbHZlZEVudHJpZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkUGF0aCA9IHBhdGgucmVzb2x2ZShlbnRyeS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGVzdFJ1bm5lci5zZXRDdXJyZW50RmlsZShyZXNvbHZlZFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZShyZXNvbHZlZFBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IHsgTW9kdWxlUmVzb2x2ZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVFc5a2RXeGxVbVZ6YjJ4MlpYSXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12VFc5a2RXeGxVbVZ6YjJ4MlpYSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1QwRkJUeXhSUVVGUkxFMUJRVTBzVjBGQlZ5eERRVUZETzBGQlEycERMRTlCUVU4c1MwRkJTeXhKUVVGSkxFMUJRVTBzVFVGQlRTeERRVUZETzBGQlJ6ZENMRTFCUVUwc1kwRkJZenRKUVVsb1FpeFpRVUZaTEZWQlFYTkNPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMGxCUTJwRExFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGtzVjBGQlZ5eERRVUZETEZWQlFXOUNPMUZCUTI1RExFOUJRVThzVVVGQlVTeERRVUZETEZWQlFWVXNSVUZCUlN4RlFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRVZCUVVNc1EwRkJRenRoUVVOMlJDeEpRVUZKTEVOQlFVTXNRMEZCUXl4bFFVRmxMRVZCUVVVc1JVRkJSVHRaUVVOMFFpeExRVUZMTEUxQlFVMHNTMEZCU3l4SlFVRkpMR1ZCUVdVc1JVRkJSVHRuUWtGRGFrTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJRenRuUWtGRGNFUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhqUVVGakxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdaMEpCUXpkRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0aFFVTjZRanRSUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExZ3NRMEZCUXp0RFFVTktPMEZCUlVRc1QwRkJUeXhGUVVGRExHTkJRV01zUlVGQlF5eERRVUZESW4wPSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL1N0YXJ0dXBTdGFnZXMvRXhwb3J0R2xvYmFscy50c1wiIC8+XHJcbmltcG9ydCB7IGluc3RhbGwgYXMgaW5zdGFsbFNvdXJjZU1hcFN1cHBvcnQgfSBmcm9tIFwic291cmNlLW1hcC1zdXBwb3J0XCI7XHJcbmltcG9ydCB7IFNlbGVjdFJlcG9ydGVycyB9IGZyb20gXCIuL1N0YXJ0dXBTdGFnZXMvU2VsZWN0UmVwb3J0ZXJzXCI7XHJcbmltcG9ydCB7IEF0dGFjaFJlcG9ydGVycyB9IGZyb20gXCIuL1N0YXJ0dXBTdGFnZXMvQXR0YWNoUmVwb3J0ZXJzXCI7XHJcbmltcG9ydCB7IEV4cG9ydEdsb2JhbHMgfSBmcm9tIFwiLi9TdGFydHVwU3RhZ2VzL0V4cG9ydEdsb2JhbHNcIjtcclxuaW1wb3J0IHsgQ29tcG9zaXRlQ29uZmlnUmVzb2x2ZXIgfSBmcm9tIFwiLi9Db25maWcvQ29tcG9zaXRlQ29uZmlnUmVzb2x2ZXJcIjtcclxuaW1wb3J0IHsgQ3JlYXRlQ29udGV4dCB9IGZyb20gXCIuL1N0YXJ0dXBTdGFnZXMvQ3JlYXRlQ29udGV4dFwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSdW5uZXIgfSBmcm9tIFwiLi9TdGFydHVwU3RhZ2VzL0NyZWF0ZVJ1bm5lclwiO1xyXG5pbXBvcnQgeyBJbml0aWFsaXplUmVwb3J0ZXJzIH0gZnJvbSBcIi4vU3RhcnR1cFN0YWdlcy9Jbml0aWFsaXplUmVwb3J0ZXJzXCI7XHJcbmltcG9ydCB7IFJ1blRlc3RzIH0gZnJvbSBcIi4vU3RhcnR1cFN0YWdlcy9SdW5UZXN0c1wiO1xyXG5pbnN0YWxsU291cmNlTWFwU3VwcG9ydCgpO1xyXG5jb25zdCBjb25maWdSZXNvbHZlciA9IG5ldyBDb21wb3NpdGVDb25maWdSZXNvbHZlcigpO1xyXG5jb25maWdSZXNvbHZlci5yZXNvbHZlKHByb2Nlc3MuYXJndilcclxuICAgIC50aGVuKENyZWF0ZUNvbnRleHQpXHJcbiAgICAudGhlbihDcmVhdGVSdW5uZXIpXHJcbiAgICAudGhlbihTZWxlY3RSZXBvcnRlcnMpXHJcbiAgICAudGhlbihBdHRhY2hSZXBvcnRlcnMpXHJcbiAgICAudGhlbihFeHBvcnRHbG9iYWxzKVxyXG4gICAgLnRoZW4oSW5pdGlhbGl6ZVJlcG9ydGVycylcclxuICAgIC50aGVuKFJ1blRlc3RzKVxyXG4gICAgLnRoZW4oKHJ1blJlc3VsdHMpID0+IHtcclxuICAgIGlmIChydW5SZXN1bHRzLnRvdGFsRmFpbHVyZXMgPiAwIHx8IHJ1blJlc3VsdHMudG90YWxUaW1lb3V0cyA+IDApIHtcclxuICAgICAgICBwcm9jZXNzLmV4aXQoMik7XHJcbiAgICB9XHJcbn0pXHJcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIHByb2Nlc3MuZXhpdCgxKTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNlVVJCUVhsRU8wRkJRM3BFTEU5QlFVOHNSVUZCUXl4UFFVRlBMRWxCUVVrc2RVSkJRWFZDTEVWQlFVTXNUVUZCVFN4dlFrRkJiMElzUTBGQlF6dEJRVVYwUlN4UFFVRlBMRVZCUVVNc1pVRkJaU3hGUVVGRExFMUJRVTBzYVVOQlFXbERMRU5CUVVNN1FVRkRhRVVzVDBGQlR5eEZRVUZETEdWQlFXVXNSVUZCUXl4TlFVRk5MR2xEUVVGcFF5eERRVUZETzBGQlEyaEZMRTlCUVU4c1JVRkJReXhoUVVGaExFVkJRVU1zVFVGQlRTd3JRa0ZCSzBJc1EwRkJRenRCUVVNMVJDeFBRVUZQTEVWQlFVTXNkVUpCUVhWQ0xFVkJRVU1zVFVGQlRTeHJRMEZCYTBNc1EwRkJRenRCUVVONlJTeFBRVUZQTEVWQlFVTXNZVUZCWVN4RlFVRkRMRTFCUVUwc0swSkJRU3RDTEVOQlFVTTdRVUZETlVRc1QwRkJUeXhGUVVGRExGbEJRVmtzUlVGQlF5eE5RVUZOTERoQ1FVRTRRaXhEUVVGRE8wRkJRekZFTEU5QlFVOHNSVUZCUXl4dFFrRkJiVUlzUlVGQlF5eE5RVUZOTEhGRFFVRnhReXhEUVVGRE8wRkJRM2hGTEU5QlFVOHNSVUZCUXl4UlFVRlJMRVZCUVVNc1RVRkJUU3d3UWtGQk1FSXNRMEZCUXp0QlFVVnNSQ3gxUWtGQmRVSXNSVUZCUlN4RFFVRkRPMEZCUlRGQ0xFMUJRVTBzWTBGQll5eEhRVUZITEVsQlFVa3NkVUpCUVhWQ0xFVkJRVVVzUTBGQlF6dEJRVU55UkN4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTTdTMEZETDBJc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF6dExRVU51UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRE8wdEJRMnhDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNN1MwRkRja0lzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXp0TFFVTnlRaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETzB0QlEyNUNMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0TFFVTjZRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzB0QlEyUXNTVUZCU1N4RFFVRkRMRU5CUVVNc1ZVRkJjMElzUlVGQlJTeEZRVUZGTzBsQlF6ZENMRWxCUVVrc1ZVRkJWU3hEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRMR0ZCUVdFc1IwRkJSeXhEUVVGRExFVkJRVVU3VVVGRE9VUXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU51UWp0QlFVTk1MRU5CUVVNc1EwRkJRenRMUVVORUxFdEJRVXNzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZPMGxCUTJJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTnlRaXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNCQ0xFTkJRVU1zUTBGQlF5eERRVUZESW4wPSIsImNvbnN0IENyZWF0ZUNvbnRleHQgPSAoY29uZmlnKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNvbmZpZzogY29uZmlnXHJcbiAgICB9O1xyXG59O1xyXG5leHBvcnQgeyBDcmVhdGVDb250ZXh0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVEzSmxZWFJsUTI5dWRHVjRkQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OVRkR0Z5ZEhWd1UzUmhaMlZ6TDBOeVpXRjBaVU52Ym5SbGVIUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUjBFc1RVRkJUU3hoUVVGaExFZEJRVWNzUTBGQlF5eE5RVUZ0UWl4RlFVRjNReXhGUVVGRk8wbEJRMmhHTEU5QlFVODdVVUZEU0N4TlFVRk5MRVZCUVVVc1RVRkJUVHRMUVVOcVFpeERRVUZCTzBGQlEwd3NRMEZCUXl4RFFVRkRPMEZCUlVZc1QwRkJUeXhGUVVGRExHRkJRV0VzUlVGQlF5eERRVUZESW4wPSIsImltcG9ydCB7IFRlc3RSdW5uZXIgfSBmcm9tIFwiQHVtYnJhLXRlc3QvdW1icmEtdGVzdC1ydW5uZXJcIjtcclxuY29uc3QgQ3JlYXRlUnVubmVyID0gKGNvbnRleHQpID0+IHtcclxuICAgIGNvbnRleHQucnVubmVyID0gbmV3IFRlc3RSdW5uZXIoe1xyXG4gICAgICAgIHRpbWVvdXRNczogY29udGV4dC5jb25maWcudGltZW91dE1zLFxyXG4gICAgICAgIHN0b3BPbkZpcnN0RmFpbDogZmFsc2VcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNvbnRleHQ7XHJcbn07XHJcbmV4cG9ydCB7IENyZWF0ZVJ1bm5lciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lRM0psWVhSbFVuVnVibVZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMMU4wWVhKMGRYQlRkR0ZuWlhNdlEzSmxZWFJsVW5WdWJtVnlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVOQkxFOUJRVThzUlVGQlF5eFZRVUZWTEVWQlFVTXNUVUZCVFN3clFrRkJLMElzUTBGQlF6dEJRVVY2UkN4TlFVRk5MRmxCUVZrc1IwRkJSeXhEUVVGRExFOUJRVFpETEVWQlFXbEVMRVZCUVVVN1NVRkRiRWdzVDBGQlR5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRlZCUVZVc1EwRkJRenRSUVVNMVFpeFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVE8xRkJRMjVETEdWQlFXVXNSVUZCUlN4TFFVRkxPMHRCUTNwQ0xFTkJRVU1zUTBGQlF6dEpRVVZJTEU5QlFVOHNUMEZCZDBRc1EwRkJRenRCUVVOd1JTeERRVUZETEVOQlFVTTdRVUZGUml4UFFVRlBMRVZCUVVNc1dVRkJXU3hGUVVGRExFTkJRVU1pZlE9PSIsImltcG9ydCB7IEJhc2ljUmVwb3J0ZXIgfSBmcm9tIFwiLi4vUmVwb3J0ZXIvU3RvY2svQmFzaWNSZXBvcnRlclwiO1xyXG5pbXBvcnQgeyBTdG9ja1JlcG9ydGVyTWFwIH0gZnJvbSBcIi4uL1JlcG9ydGVyL1N0b2NrL1N0b2NrUmVwb3J0ZXJNYXBcIjtcclxuY29uc3QgU2VsZWN0UmVwb3J0ZXJzID0gKGNvbnRleHQpID0+IHtcclxuICAgIGNvbnN0IHJlcG9ydGluZ0NvbmZpZyA9IGNvbnRleHQuY29uZmlnLnJlcG9ydGluZztcclxuICAgIGNvbnN0IHJlcG9ydGVyTmFtZXMgPSByZXBvcnRpbmdDb25maWcgPyByZXBvcnRpbmdDb25maWcucmVwb3J0ZXJzIDogbnVsbDtcclxuICAgIGlmICghcmVwb3J0ZXJOYW1lcyB8fCByZXBvcnRlck5hbWVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnRleHQucmVwb3J0ZXJzID0gW25ldyBCYXNpY1JlcG9ydGVyKCldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29udGV4dC5yZXBvcnRlcnMgPSByZXBvcnRlck5hbWVzLm1hcCgobmFtZSkgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUobmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChTdG9ja1JlcG9ydGVyTWFwW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdG9ja1JlcG9ydGVyTWFwW25hbWVdKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2FkIHJlcG9ydGVyOiAke25hbWV9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb250ZXh0O1xyXG59O1xyXG5leHBvcnQgeyBTZWxlY3RSZXBvcnRlcnMgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pVTJWc1pXTjBVbVZ3YjNKMFpYSnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwxTjBZWEowZFhCVGRHRm5aWE12VTJWc1pXTjBVbVZ3YjNKMFpYSnpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVThzUlVGQlF5eGhRVUZoTEVWQlFVTXNUVUZCVFN4cFEwRkJhVU1zUTBGQlF6dEJRVU01UkN4UFFVRlBMRVZCUVVNc1owSkJRV2RDTEVWQlFVTXNUVUZCVFN4dlEwRkJiME1zUTBGQlF6dEJRVWR3UlN4TlFVRk5MR1ZCUVdVc1IwRkJSeXhEUVVGRExFOUJRWE5FTEVWQlFXdENMRVZCUVVVN1NVRkRMMFlzVFVGQlRTeGxRVUZsTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU03U1VGRGFrUXNUVUZCVFN4aFFVRmhMRWRCUVVjc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRGVrVXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1NVRkJTU3hoUVVGaExFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNSVUZCUlR0UlFVTTVReXhQUVVGUExFTkJRVU1zVTBGQlV5eEhRVUZITEVOQlFVTXNTVUZCU1N4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE8wdEJRemRETzFOQlFVMDdVVUZEU0N4UFFVRlBMRU5CUVVNc1UwRkJVeXhIUVVGSExHRkJRV0VzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVNelF5eEpRVUZKTzJkQ1FVTkJMRTlCUVU4c1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJGQlEzaENPMWxCUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3WjBKQlExSXNTVUZCU1N4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0dlFrRkRlRUlzVDBGQlR5eEpRVUZKTEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdhVUpCUTNaRE8yZENRVVZFTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc05FSkJRVFJDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1lVRkRka1E3VVVGRFRDeERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTk9PMGxCUlVRc1QwRkJUeXhQUVVGNVFpeERRVUZETzBGQlEzSkRMRU5CUVVNc1EwRkJRenRCUVVWR0xFOUJRVThzUlVGQlF5eGxRVUZsTEVWQlFVTXNRMEZCUXlKOSIsImNvbnN0IEF0dGFjaFJlcG9ydGVycyA9IChjb250ZXh0KSA9PiB7XHJcbiAgICBjb25zdCBydW5uZXIgPSBjb250ZXh0LnJ1bm5lcjtcclxuICAgIGZvciAoY29uc3QgcmVwb3J0ZXIgb2YgY29udGV4dC5yZXBvcnRlcnMpIHtcclxuICAgICAgICBydW5uZXIub24oXCJvblRlc3RTdGFydFwiLCByZXBvcnRlci5vblRlc3RTdGFydC5iaW5kKHJlcG9ydGVyKSk7XHJcbiAgICAgICAgcnVubmVyLm9uKFwib25UZXN0RW5kXCIsIHJlcG9ydGVyLm9uVGVzdEVuZC5iaW5kKHJlcG9ydGVyKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGV4dDtcclxufTtcclxuZXhwb3J0IHsgQXR0YWNoUmVwb3J0ZXJzIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVFYUjBZV05vVW1Wd2IzSjBaWEp6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMMU4wWVhKMGRYQlRkR0ZuWlhNdlFYUjBZV05vVW1Wd2IzSjBaWEp6TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVVkJMRTFCUVUwc1pVRkJaU3hIUVVGSExFTkJRVU1zVDBGQmRVSXNSVUZCYTBJc1JVRkJSVHRKUVVOb1JTeE5RVUZOTEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRemxDTEV0QlFVc3NUVUZCVFN4UlFVRlJMRWxCUVVrc1QwRkJUeXhEUVVGRExGTkJRVk1zUlVGQlJUdFJRVU4wUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExHRkJRV0VzUlVGQlJTeFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6bEVMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZETjBRN1NVRkZSQ3hQUVVGUExFOUJRVThzUTBGQlF6dEJRVU51UWl4RFFVRkRMRU5CUVVNN1FVRkZSaXhQUVVGUExFVkJRVU1zWlVGQlpTeEZRVUZETEVOQlFVTWlmUT09IiwiY29uc3QgSW5pdGlhbGl6ZVJlcG9ydGVycyA9IChjb250ZXh0KSA9PiB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoY29udGV4dC5yZXBvcnRlcnMubWFwKChyZXBvcnRlcikgPT4gcmVwb3J0ZXIuaW5pdGlhbGl6ZSgpKSkudGhlbigoKSA9PiBjb250ZXh0KTtcclxufTtcclxuZXhwb3J0IHsgSW5pdGlhbGl6ZVJlcG9ydGVycyB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lTVzVwZEdsaGJHbDZaVkpsY0c5eWRHVnljeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OVRkR0Z5ZEhWd1UzUmhaMlZ6TDBsdWFYUnBZV3hwZW1WU1pYQnZjblJsY25NdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJSVUVzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhEUVVGRExFOUJRWFZDTEVWQlFUSkNMRVZCUVVVN1NVRkROMFVzVDBGQlR5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTjJSeXhEUVVGRExFTkJRVU03UVVGRlJpeFBRVUZQTEVWQlFVTXNiVUpCUVcxQ0xFVkJRVU1zUTBGQlF5SjkiLCJpbXBvcnQgeyBNb2R1bGVSZXNvbHZlciB9IGZyb20gXCIuLi9Nb2R1bGVSZXNvbHZlclwiO1xyXG5jb25zdCBSdW5UZXN0cyA9IChjb250ZXh0KSA9PiB7XHJcbiAgICBpZiAoIWNvbnRleHQuY29uZmlnLmlucHV0KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uZmlnIGlzIG1pc3NpbmcgYW4gaW5wdXQgZmlsZS5cIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IE1vZHVsZVJlc29sdmVyKGNvbnRleHQucnVubmVyKVxyXG4gICAgICAgIC5yZXNvbHZlR2xvYihjb250ZXh0LmNvbmZpZy5pbnB1dClcclxuICAgICAgICAudGhlbigoKSA9PiBjb250ZXh0LnJ1bm5lci5ydW4oKSlcclxuICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgcmVwb3J0ZXIgb2YgY29udGV4dC5yZXBvcnRlcnMpIHtcclxuICAgICAgICAgICAgcmVwb3J0ZXIub25SdW5FbmQocmVzdWx0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydCB7IFJ1blRlc3RzIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVVuVnVWR1Z6ZEhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12VTNSaGNuUjFjRk4wWVdkbGN5OVNkVzVVWlhOMGN5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4UFFVRlBMRVZCUVVNc1kwRkJZeXhGUVVGRExFMUJRVTBzYlVKQlFXMUNMRU5CUVVNN1FVRkhha1FzVFVGQlRTeFJRVUZSTEVkQlFVY3NRMEZCUXl4UFFVRjFRaXhGUVVGMVFpeEZRVUZGTzBsQlF6bEVMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlR0UlFVTjJRaXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEd0RFFVRnJReXhEUVVGRExFTkJRVU03UzBGRGRrUTdTVUZEUkN4UFFVRlBMRWxCUVVrc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTTdVMEZEY0VNc1YwRkJWeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMU5CUTJwRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzFOQlEyaERMRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeEZRVUZGTzFGQlEyUXNTMEZCU3l4TlFVRk5MRkZCUVZFc1NVRkJTU3hQUVVGUExFTkJRVU1zVTBGQlV5eEZRVUZGTzFsQlEzUkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVMEZET1VJN1VVRkZSQ3hQUVVGUExFOUJRVThzUTBGQlF6dEpRVU51UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOWUxFTkJRVU1zUTBGQlF6dEJRVVZHTEU5QlFVOHNSVUZCUXl4UlFVRlJMRVZCUVVNc1EwRkJReUo5Il0sIm5hbWVzIjpbImludFRvQ2hhck1hcCIsInNwbGl0IiwibnVtYmVyIiwibGVuZ3RoIiwiVHlwZUVycm9yIiwiY2hhckNvZGUiLCJhVmFsdWUiLCJkaWdpdCIsImVuY29kZWQiLCJ2bHEiLCJ0b1ZMUVNpZ25lZCIsIlZMUV9CQVNFIiwiYmFzZTY0IiwiYVN0ciIsImFJbmRleCIsImFPdXRQYXJhbSIsImNvbnRpbnVhdGlvbiIsInNoaWZ0ZWQiLCJzdHJMZW4iLCJyZXN1bHQiLCJzaGlmdCIsIkVycm9yIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsInZhbHVlIiwicmVzdCIsImV4cG9ydHMiLCJhQXJncyIsImFOYW1lIiwiYURlZmF1bHRWYWx1ZSIsImFyZ3VtZW50cyIsInVybFJlZ2V4cCIsImRhdGFVcmxSZWdleHAiLCJ1cmxQYXJzZSIsImFVcmwiLCJtYXRjaCIsInNjaGVtZSIsImF1dGgiLCJob3N0IiwicG9ydCIsInBhdGgiLCJ1cmxHZW5lcmF0ZSIsImFQYXJzZWRVcmwiLCJ1cmwiLCJub3JtYWxpemUiLCJhUGF0aCIsInBhcnQiLCJpc0Fic29sdXRlIiwicGFydHMiLCJ1cCIsImkiLCJzcGxpY2UiLCJqb2luIiwiYVJvb3QiLCJhUGF0aFVybCIsImFSb290VXJsIiwiam9pbmVkIiwicmVwbGFjZSIsInRlc3QiLCJsZXZlbCIsImluZGV4T2YiLCJpbmRleCIsImxhc3RJbmRleE9mIiwic2xpY2UiLCJBcnJheSIsInN1YnN0ciIsInN1cHBvcnRzTnVsbFByb3RvIiwiT2JqZWN0IiwiY3JlYXRlIiwiaWRlbnRpdHkiLCJzIiwiaXNQcm90b1N0cmluZyIsInN0cmNtcCIsImFTdHIxIiwiYVN0cjIiLCJtYXBwaW5nQSIsIm1hcHBpbmdCIiwib25seUNvbXBhcmVPcmlnaW5hbCIsImNtcCIsInNvdXJjZSIsIm9yaWdpbmFsTGluZSIsIm9yaWdpbmFsQ29sdW1uIiwiZ2VuZXJhdGVkQ29sdW1uIiwiZ2VuZXJhdGVkTGluZSIsIm5hbWUiLCJvbmx5Q29tcGFyZUdlbmVyYXRlZCIsInN0ciIsIkpTT04iLCJwYXJzZSIsInNvdXJjZVJvb3QiLCJzb3VyY2VVUkwiLCJzb3VyY2VNYXBVUkwiLCJwYXJzZWQiLCJzdWJzdHJpbmciLCJoYXMiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImhhc05hdGl2ZU1hcCIsIk1hcCIsIkFycmF5U2V0IiwidGhpcyIsIl9hcnJheSIsIl9zZXQiLCJmcm9tQXJyYXkiLCJhQXJyYXkiLCJhQWxsb3dEdXBsaWNhdGVzIiwic2V0IiwibGVuIiwiYWRkIiwic2l6ZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJzU3RyIiwidXRpbCIsInRvU2V0U3RyaW5nIiwiaXNEdXBsaWNhdGUiLCJjYWxsIiwiaWR4IiwicHVzaCIsImdldCIsImF0IiwiYUlkeCIsInRvQXJyYXkiLCJNYXBwaW5nTGlzdCIsIl9zb3J0ZWQiLCJfbGFzdCIsInVuc29ydGVkRm9yRWFjaCIsImFDYWxsYmFjayIsImFUaGlzQXJnIiwiZm9yRWFjaCIsImFNYXBwaW5nIiwibGluZUEiLCJsaW5lQiIsImNvbHVtbkEiLCJjb2x1bW5CIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQiLCJzb3J0IiwicmVxdWlyZSQkMCIsIlNvdXJjZU1hcEdlbmVyYXRvciIsIl9maWxlIiwiZ2V0QXJnIiwiX3NvdXJjZVJvb3QiLCJfc2tpcFZhbGlkYXRpb24iLCJfc291cmNlcyIsIl9uYW1lcyIsIl9tYXBwaW5ncyIsIl9zb3VyY2VzQ29udGVudHMiLCJfdmVyc2lvbiIsImZyb21Tb3VyY2VNYXAiLCJhU291cmNlTWFwQ29uc3VtZXIiLCJnZW5lcmF0b3IiLCJmaWxlIiwiZWFjaE1hcHBpbmciLCJtYXBwaW5nIiwibmV3TWFwcGluZyIsImdlbmVyYXRlZCIsImxpbmUiLCJjb2x1bW4iLCJyZWxhdGl2ZSIsIm9yaWdpbmFsIiwiYWRkTWFwcGluZyIsInNvdXJjZXMiLCJzb3VyY2VGaWxlIiwic291cmNlUmVsYXRpdmUiLCJjb250ZW50Iiwic291cmNlQ29udGVudEZvciIsInNldFNvdXJjZUNvbnRlbnQiLCJfdmFsaWRhdGVNYXBwaW5nIiwiU3RyaW5nIiwiYVNvdXJjZUZpbGUiLCJhU291cmNlQ29udGVudCIsImtleXMiLCJhcHBseVNvdXJjZU1hcCIsImFTb3VyY2VNYXBQYXRoIiwibmV3U291cmNlcyIsIm5ld05hbWVzIiwib3JpZ2luYWxQb3NpdGlvbkZvciIsImFHZW5lcmF0ZWQiLCJhT3JpZ2luYWwiLCJhU291cmNlIiwic3RyaW5naWZ5IiwiX3NlcmlhbGl6ZU1hcHBpbmdzIiwibmV4dCIsIm5hbWVJZHgiLCJzb3VyY2VJZHgiLCJwcmV2aW91c0dlbmVyYXRlZENvbHVtbiIsInByZXZpb3VzR2VuZXJhdGVkTGluZSIsInByZXZpb3VzT3JpZ2luYWxDb2x1bW4iLCJwcmV2aW91c09yaWdpbmFsTGluZSIsInByZXZpb3VzTmFtZSIsInByZXZpb3VzU291cmNlIiwibWFwcGluZ3MiLCJiYXNlNjRWTFEiLCJfZ2VuZXJhdGVTb3VyY2VzQ29udGVudCIsImFTb3VyY2VzIiwiYVNvdXJjZVJvb3QiLCJtYXAiLCJrZXkiLCJ0b0pTT04iLCJ2ZXJzaW9uIiwibmFtZXMiLCJzb3VyY2VzQ29udGVudCIsInRvU3RyaW5nIiwiYU5lZWRsZSIsImFIYXlzdGFjayIsImFDb21wYXJlIiwiYUJpYXMiLCJyZWN1cnNpdmVTZWFyY2giLCJhTG93IiwiYUhpZ2giLCJtaWQiLCJNYXRoIiwiZmxvb3IiLCJMRUFTVF9VUFBFUl9CT1VORCIsIkdSRUFURVNUX0xPV0VSX0JPVU5EIiwic3dhcCIsImFyeSIsIngiLCJ5IiwidGVtcCIsImRvUXVpY2tTb3J0IiwiY29tcGFyYXRvciIsInAiLCJyIiwibG93IiwiaGlnaCIsInJvdW5kIiwicmFuZG9tIiwicGl2b3QiLCJqIiwicSIsInF1aWNrU29ydCIsIlNvdXJjZU1hcENvbnN1bWVyIiwiYVNvdXJjZU1hcCIsImFTb3VyY2VNYXBVUkwiLCJzb3VyY2VNYXAiLCJwYXJzZVNvdXJjZU1hcElucHV0Iiwic2VjdGlvbnMiLCJJbmRleGVkU291cmNlTWFwQ29uc3VtZXIiLCJCYXNpY1NvdXJjZU1hcENvbnN1bWVyIiwiX19nZW5lcmF0ZWRNYXBwaW5ncyIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIl9wYXJzZU1hcHBpbmdzIiwiX19vcmlnaW5hbE1hcHBpbmdzIiwiX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IiLCJjIiwiR0VORVJBVEVEX09SREVSIiwiT1JJR0lOQUxfT1JERVIiLCJhQ29udGV4dCIsImFPcmRlciIsImNvbnRleHQiLCJfZ2VuZXJhdGVkTWFwcGluZ3MiLCJfb3JpZ2luYWxNYXBwaW5ncyIsImNvbXB1dGVTb3VyY2VVUkwiLCJfc291cmNlTWFwVVJMIiwiYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yIiwibmVlZGxlIiwiX2ZpbmRTb3VyY2VJbmRleCIsIl9maW5kTWFwcGluZyIsImNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zIiwiYmluYXJ5U2VhcmNoIiwidW5kZWZpbmVkIiwibGFzdENvbHVtbiIsIl9hYnNvbHV0ZVNvdXJjZXMiLCJNYXBwaW5nIiwiY29uc3VtZXIiLCJyZWxhdGl2ZVNvdXJjZSIsInNtYyIsImdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdEdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdE9yaWdpbmFsTWFwcGluZ3MiLCJzcmNNYXBwaW5nIiwiZGVzdE1hcHBpbmciLCJzZWdtZW50IiwiZW5kIiwiY2FjaGVkU2VnbWVudHMiLCJvcmlnaW5hbE1hcHBpbmdzIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQiLCJhTWFwcGluZ3MiLCJhTGluZU5hbWUiLCJhQ29sdW1uTmFtZSIsImFDb21wYXJhdG9yIiwic2VhcmNoIiwiY29tcHV0ZUNvbHVtblNwYW5zIiwibmV4dE1hcHBpbmciLCJsYXN0R2VuZXJhdGVkQ29sdW1uIiwiSW5maW5pdHkiLCJoYXNDb250ZW50c09mQWxsU291cmNlcyIsInNvbWUiLCJzYyIsIm51bGxPbk1pc3NpbmciLCJmaWxlVXJpQWJzUGF0aCIsImdlbmVyYXRlZFBvc2l0aW9uRm9yIiwibGFzdE9mZnNldCIsIl9zZWN0aW9ucyIsIm9mZnNldCIsIm9mZnNldExpbmUiLCJvZmZzZXRDb2x1bW4iLCJnZW5lcmF0ZWRPZmZzZXQiLCJjb25zdHJ1Y3RvciIsInNlY3Rpb25JbmRleCIsInNlY3Rpb24iLCJiaWFzIiwiZXZlcnkiLCJnZW5lcmF0ZWRQb3NpdGlvbiIsInNlY3Rpb25NYXBwaW5ncyIsImFkanVzdGVkTWFwcGluZyIsIlJFR0VYX05FV0xJTkUiLCJpc1NvdXJjZU5vZGUiLCJTb3VyY2VOb2RlIiwiYUxpbmUiLCJhQ29sdW1uIiwiYUNodW5rcyIsImNoaWxkcmVuIiwic291cmNlQ29udGVudHMiLCJmcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCIsImFHZW5lcmF0ZWRDb2RlIiwiYVJlbGF0aXZlUGF0aCIsIm5vZGUiLCJyZW1haW5pbmdMaW5lcyIsInJlbWFpbmluZ0xpbmVzSW5kZXgiLCJzaGlmdE5leHRMaW5lIiwiZ2V0TmV4dExpbmUiLCJsYXN0R2VuZXJhdGVkTGluZSIsImxhc3RNYXBwaW5nIiwiY29kZSIsIm5leHRMaW5lIiwiYWRkTWFwcGluZ1dpdGhDb2RlIiwiYUNodW5rIiwiaXNBcnJheSIsImNodW5rIiwicHJlcGVuZCIsInVuc2hpZnQiLCJ3YWxrIiwiYUZuIiwiYVNlcCIsIm5ld0NoaWxkcmVuIiwicmVwbGFjZVJpZ2h0IiwiYVBhdHRlcm4iLCJhUmVwbGFjZW1lbnQiLCJsYXN0Q2hpbGQiLCJ3YWxrU291cmNlQ29udGVudHMiLCJmcm9tU2V0U3RyaW5nIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwic291cmNlTWFwcGluZ0FjdGl2ZSIsImxhc3RPcmlnaW5hbFNvdXJjZSIsImxhc3RPcmlnaW5hbExpbmUiLCJsYXN0T3JpZ2luYWxDb2x1bW4iLCJsYXN0T3JpZ2luYWxOYW1lIiwic291cmNlQ29udGVudCIsInJlcXVpcmUkJDEiLCJpc01vZGVybiIsIkJ1ZmZlciIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwiZnMiLCJlbmNvZGluZ09yT2Zmc2V0IiwiaW5wdXQiLCJvYmoiLCJieXRlT2Zmc2V0IiwibWF4TGVuZ3RoIiwiYnl0ZUxlbmd0aCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiZnJvbVN0cmluZyIsInJlcXVpcmUkJDIiLCJleGlzdHNTeW5jIiwicmVhZEZpbGVTeW5jIiwiZXJyIiwiZXJyb3JGb3JtYXR0ZXJJbnN0YWxsZWQiLCJ1bmNhdWdodFNoaW1JbnN0YWxsZWQiLCJlbXB0eUNhY2hlQmV0d2Vlbk9wZXJhdGlvbnMiLCJlbnZpcm9ubWVudCIsImZpbGVDb250ZW50c0NhY2hlIiwic291cmNlTWFwQ2FjaGUiLCJyZVNvdXJjZU1hcCIsInJldHJpZXZlRmlsZUhhbmRsZXJzIiwicmV0cmlldmVNYXBIYW5kbGVycyIsImlzSW5Ccm93c2VyIiwid2luZG93IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1aXJlIiwibW9kdWxlIiwicHJvY2VzcyIsInR5cGUiLCJoYW5kbGVyRXhlYyIsImxpc3QiLCJhcmciLCJyZXQiLCJyZXRyaWV2ZUZpbGUiLCJzdXBwb3J0UmVsYXRpdmVVUkwiLCJkaXIiLCJkaXJuYW1lIiwiZXhlYyIsInByb3RvY29sIiwic3RhcnRQYXRoIiwicmVzb2x2ZSIsInRyaW0iLCJkcml2ZSIsImNvbnRlbnRzIiwieGhyIiwib3BlbiIsInNlbmQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwiZXIiLCJyZXRyaWV2ZVNvdXJjZU1hcCIsIm1hcFNvdXJjZVBvc2l0aW9uIiwicG9zaXRpb24iLCJ1cmxBbmRNYXAiLCJvcmlnaW5hbFBvc2l0aW9uIiwiQ2FsbFNpdGVUb1N0cmluZyIsImZpbGVOYW1lIiwiZmlsZUxvY2F0aW9uIiwiaXNOYXRpdmUiLCJnZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwiLCJpc0V2YWwiLCJnZXRFdmFsT3JpZ2luIiwibGluZU51bWJlciIsImdldExpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJnZXRDb2x1bW5OdW1iZXIiLCJmdW5jdGlvbk5hbWUiLCJnZXRGdW5jdGlvbk5hbWUiLCJhZGRTdWZmaXgiLCJpc0NvbnN0cnVjdG9yIiwiaXNUb3BsZXZlbCIsInR5cGVOYW1lIiwiZ2V0VHlwZU5hbWUiLCJtZXRob2ROYW1lIiwiZ2V0TWV0aG9kTmFtZSIsImNsb25lQ2FsbFNpdGUiLCJmcmFtZSIsIm9iamVjdCIsImdldFByb3RvdHlwZU9mIiwid3JhcENhbGxTaXRlIiwic3RhdGUiLCJuZXh0UG9zaXRpb24iLCJjdXJQb3NpdGlvbiIsImdldEZpbGVOYW1lIiwiaGVhZGVyTGVuZ3RoIiwib3JpZ2luYWxGdW5jdGlvbk5hbWUiLCJvcmlnaW4iLCJtYXBFdmFsT3JpZ2luIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJlcnJvciIsInN0YWNrIiwiZXJyb3JTdHJpbmciLCJtZXNzYWdlIiwicHJvY2Vzc2VkU3RhY2siLCJyZXZlcnNlIiwicHJpbnRFcnJvckFuZEV4aXQiLCJnZXRFcnJvclNvdXJjZSIsInN0ZGVyciIsIl9oYW5kbGUiLCJzZXRCbG9ja2luZyIsImNvbnNvbGUiLCJleGl0Iiwic291cmNlTWFwRGF0YSIsInNvdXJjZU1hcHBpbmdVUkwiLCJmaWxlRGF0YSIsInNvdXJjZU1hcEhlYWRlciIsImdldFJlc3BvbnNlSGVhZGVyIiwiZSIsImxhc3RNYXRjaCIsInJlIiwicmV0cmlldmVTb3VyY2VNYXBVUkwiLCJyYXdEYXRhIiwiYnVmZmVyRnJvbSIsImlzSHlwZXIiLCJlbnYiLCJURVJNX1BST0dSQU0iLCJpc1dpbmRvd3MiLCJwbGF0Zm9ybSIsImlzTGludXgiLCJjb21tb24iLCJiYWxsb3REaXNhYmxlZCIsImJhbGxvdE9mZiIsImJhbGxvdE9uIiwiYnVsbGV0IiwiYnVsbGV0V2hpdGUiLCJmdWxsQmxvY2siLCJoZWFydCIsImlkZW50aWNhbFRvIiwibWFyayIsIm1pZGRvdCIsIm1pbnVzIiwibXVsdGlwbGljYXRpb24iLCJvYmVsdXMiLCJwZW5jaWxEb3duUmlnaHQiLCJwZW5jaWxSaWdodCIsInBlbmNpbFVwUmlnaHQiLCJwZXJjZW50IiwicGlsY3JvdzIiLCJwaWxjcm93IiwicGx1c01pbnVzIiwic3RhcnNPZmYiLCJzdGFyc09uIiwidXBEb3duQXJyb3ciLCJ3aW5kb3dzIiwiYXNzaWduIiwiY2hlY2siLCJjcm9zcyIsImVsbGlwc2lzTGFyZ2UiLCJlbGxpcHNpcyIsImluZm8iLCJxdWVzdGlvbiIsInF1ZXN0aW9uU21hbGwiLCJwb2ludGVyIiwicG9pbnRlclNtYWxsIiwicmFkaW9PZmYiLCJyYWRpb09uIiwid2FybmluZyIsIm90aGVyIiwiYmFsbG90Q3Jvc3MiLCJxdWVzdGlvbkZ1bGwiLCJSZWZsZWN0IiwiQU5TSV9SRUdFWCIsImNvbG9ycyIsImVuYWJsZWQiLCJ2aXNpYmxlIiwic3R5bGVzIiwiRk9SQ0VfQ09MT1IiLCJ3cmFwIiwic3R5bGUiLCJuZXdsaW5lIiwibmwiLCJpbmNsdWRlcyIsIm4iLCJTZXQiLCJkZWZpbmUiLCJjb2RlcyIsImNsb3NlIiwicmVnZXgiLCJSZWdFeHAiLCJvdXRwdXQiLCJhbnNpIiwiW29iamVjdCBPYmplY3RdIiwiYWxpYXMiLCJjb2xvciIsInNldFByb3RvdHlwZU9mIiwiY29uY2F0IiwiYW5zaVJlZ2V4IiwiaGFzQ29sb3IiLCJoYXNBbnNpIiwibGFzdEluZGV4IiwiZm4iLCJ0aGVtZSIsImN1c3RvbSIsInZhbCIsIm5vbmUiLCJjbGVhciIsIm5vb3AiLCJzdHJpcENvbG9yIiwidW5zdHlsZSIsInN5bWJvbHMiLCJkZWVwRXF1YWwiLCJhIiwiYiIsIkRhdGUiLCJnZXRUaW1lIiwiZXhpc3RzIiwiYUtleXMiLCJiS2V5cyIsImRlZXBFcXVhbE9iamVjdCIsImFycmF5QSIsImFycmF5QiIsIml0ZW0iLCJhcnJheSIsImluZGV4T2ZJdGVtIiwib25MaXN0ZW5lcnMiLCJvbmNlTGlzdGVuZXJzIiwiZXZlbnQiLCJjYWxsYmFjayIsIkFycmF5VXRpbHNfMSIsInVuaW9uIiwid2l0aG91dCIsImFyZ3MiLCJwcm9taXNlcyIsIlByb21pc2UiLCJyZWplY3QiLCJhbGwiLCJ0aGVuIiwicmVzdWx0cyIsImNvbXBhcmVEZWZhdWx0IiwiY29tcGFyZSIsImluaXRpYWxWYWx1ZXMiLCJjb21wYXJlRnVuY3Rpb24iLCJpbnNlcnQiLCJlbGVtZW50IiwiZm91bmRJbmRleCIsInNlYXJjaEludGVybmFsIiwiaGlnaGVzdEluZGV4Iiwib3JkZXJpbmciLCJtb2NrZXJEYXRhIiwibW9jayIsImludGVybmFsTW9ja2VyIiwiR2V0TW9ja2VyRGF0YVNhZmUiLCJtb2NrTmFtZSIsInZhbGlkYXRvciIsInByZWNlZGVuY2UiLCJtYXRjaGVzIiwiZGVzY3JpcHRpb24iLCJlcXVhbHMiLCJyZWFsVmFsdWUiLCJTdHJpbmdpZnlfMSIsInByaW50T2JqZWN0IiwiRGVlcEVxdWFsXzEiLCJzdGFydHNXaXRoIiwiZnVuYyIsIlNpbXBsZUV2ZW50RW1pdHRlcl8xIiwiU2ltcGxlRXZlbnRFbWl0dGVyIiwiU29ydGVkQXJyYXlfMSIsIlNvcnRlZEFycmF5IiwiQXJndW1lbnRWYWxpZGF0b3JfMSIsImFueSIsImVxIiwiZ3QiLCJndGUiLCJsdCIsImx0ZSIsIm1hdGNoZXIiLCJyZWdleE1hdGNoZXMiLCJJTlRFUk5BTF9NT0NLRVJfTkFNRSIsIkJhc2ljUmVwb3J0ZXIiLCJjdXJyZW50RGVzY3JpYmVUaXRsZUNoYWluIiwibG9nIiwid2hpdGVCcmlnaHQiLCJkcmF3SG9yaXpvbnRhbExpbmUiLCJ0ZXN0SW5mbyIsInRlc3RSZXN1bHQiLCJkZXNjcmliZVRpdGxlQ2hhaW4iLCJpbmRlbnRMZXZlbCIsImN5YW4iLCJnZXRJbmRlbnRlZFRleHQiLCJyZWRCcmlnaHQiLCJ0aXRsZSIsInJlZCIsInllbGxvdyIsImdyZWVuIiwidG90YWxGYWlsdXJlcyIsInRvdGFsVGltZW91dHMiLCJ0b3RhbFN1Y2Nlc3NlcyIsInRvdGFsVGVzdHMiLCJlbGFwc2VkVGltZU1zIiwidGV4dCIsInN0ZG91dCIsImNvbHVtbnMiLCJ3cml0ZSIsIlN0b2NrUmVwb3J0ZXJNYXAiLCJiYXNpYyIsImdsb2JhbEFueSIsImdsb2JhbCIsIlNpbXBsZUFyZ1BhcnNlciIsIndhdGNoZWRBcmdzIiwiYmFubmVyIiwiYWxpYXNlcyIsImhlbHAiLCJyZXF1aXJlZCIsImFsbEFsaWFzZXMiLCJhcmdJbmZvIiwiYXJndiIsInRyaW1tZWRBcmd2IiwicmVxdWlyZWRBcmdzIiwiZmlsdGVyIiwicmVxdWlyZWRBcmdJbmZvIiwiYXJnTmFtZSIsImFyZ1Jlc3VsdHMiLCJleHRyYWN0Qm9vbGVhbiIsImV4dHJhY3RTdHJpbmciLCJleHRyYWN0VHJhaWxpbmciLCJuZXh0VmFsdWUiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0T2ZUYWlsIiwiZ2V0U3RhcnRPZlRhaWwiLCJ0eXBlTWFwIiwiY3VycmVudEFyZyIsInByZXZpb3VzQXJnIiwiQ2xpQ29uZmlnUmVzb2x2ZXIiLCJhcmdQYXJzZXIiLCJhZGRBcmd1bWVudCIsIlNpbXBsZVRTQ1dyYXBwZXIiLCJzcGF3blJlZiIsInNwYXduIiwiaW5GaWxlIiwib3V0RmlsZSIsInRzY1Byb2Nlc3MiLCJzdGRpbyIsInNoZWxsIiwib24iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJkb25lIiwiYXBwbHkiLCJDb25maWdGaWxlTG9hZGVyIiwibWtkaXJQcm9taXNlIiwiZnNQcm9taXNlcyIsIm1rZGlyIiwic3RhdFByb21pc2UiLCJzdGF0IiwicmVxdWlyZVByb3h5IiwidHNFeGVjdXRvciIsIm1ha2VDYWNoZURpciIsImNhY2hlRGlyIiwiY2F0Y2giLCJnZXRKc0NvbmZpZ1BhdGgiLCJ0c0NvbmZpZ1BhdGgiLCJwYXRoLmJhc2VuYW1lIiwicGF0aC5yZXNvbHZlIiwiY29tcGlsZVRzQ29uZmlnIiwiY29uZmlnUGF0aCIsImZpbmFsUGF0aCIsInJlcXVpcmVSZWYiLCJyZXNvbHZlZFBhdGgiLCJlbmRzV2l0aCIsImxvYWRKc0NvbmZpZyIsImxvYWRUc0NvbmZpZyIsInBhdGguZXh0bmFtZSIsIkRlZmF1bHRDb25maWciLCJkZWJ1ZyIsImRlYnVnQnJlYWsiLCJ3YXRjaCIsInRpbWVvdXRNcyIsIml0IiwiYmVmb3JlIiwiYmVmb3JlRWFjaCIsImFmdGVyIiwiYWZ0ZXJFYWNoIiwicmVwb3J0aW5nIiwib3V0cHV0UGF0aCIsInJlcG9ydGVycyIsInBhcmFsbGVsIiwiaWRlbXBvdGVudEZpbGVzIiwiaWRlbXBvdGVudFRlc3RzIiwiUGFja2FnZUpzb25Db25maWdMb2FkZXIiLCJwYWNrYWdlSnNvbiIsImN3ZCIsInVtYnJhIiwiQ29uZmlnTWVyZ2VyIiwiYmFzZUNvbmZpZyIsImNvbmZpZ3MiLCJjb25maWciLCJhdHRyaWJ1dGUiLCJ3cml0YWJsZSIsIlRpbWVvdXRFcnJvciIsImVsYXBzZWRNcyIsInN1cGVyIiwicHJvbWlzZSIsInN0YXJ0VGltZSIsIm5vdyIsInRpbWVySWQiLCJ0aW1lb3V0UHJvbWlzZSIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJyYWNlIiwidG8iLCJlbnRyeVR5cGUiLCJzdG9wT25GaXJzdEZhaWwiLCJxdWV1ZSIsInBvcCIsIlF1ZXVlU3RhY2tUeXBlcyIsImV2ZW50RW1pdHRlciIsImFzeW5jUHJvbWlzaWZpZXIiLCJBc3luY1Byb21pc2lmaWVyXzEiLCJBc3luY1Byb21pc2lmaWVyIiwidGltZW91dFByb21pc2lmaWVyIiwiVGltZW91dFByb21pc2lmaWVyXzEiLCJUaW1lb3V0UHJvbWlzaWZpZXIiLCJ0ZXN0UXVldWVTdGFjayIsInF1ZXVlU3RhY2tzIiwiUXVldWVTdGFja18xIiwiUXVldWVTdGFjayIsImN1cnJlbnRUZXN0IiwidGVzdFJ1bkNhbmNlbGxlZCIsImRlc2NyaWJlIiwiZXhlY0Jsb2NrIiwidGhyb3dJZlRlc3RJblByb2dyZXNzIiwicHVzaFRvQ3VycmVudFRlc3RRdWV1ZSIsImRlc2NyaWJlT25seSIsImRlc2NyaWJlU2tpcCIsIm9wdGlvbnMiLCJpdE9ubHkiLCJpdFNraXAiLCJydW5OZXh0VGVzdFF1ZXVlIiwiZXZhbHVhdGVkVGVzdCIsImZpcnN0T25seUluZGV4IiwiZXhlY3V0ZVRlc3QiLCJ0ZXN0cyIsImV2YWx1YXRlUXVldWVXaXRoVGltZW91dCIsInJlc2V0UnVuUmVzdWx0cyIsInJ1blJlc3VsdHMiLCJ0ZXN0UmVzdWx0cyIsIlRlc3RSdW5uZXJDb25maWdfMSIsIm1lcmdlQ29uZmlnIiwiRGVmYXVsdFRlc3RSdW5uZXJDb25maWdfMSIsIkRlZmF1bHRUZXN0UnVubmVyQ29uZmlnIiwib25seSIsInNraXAiLCJhYnNvbHV0ZVBhdGgiLCJsYXN0RmlsZVBhdGhTZXQiLCJvbmNlIiwib2ZmIiwicHVzaE9uVG9wIiwiY3VycmVudFJ1biIsInJlc2V0IiwidGVzdFF1ZXVlIiwiZXZhbHVhdGVkQmVmb3JlcyIsInNraXBBbGxUZXN0cyIsImN1cnJlbnRFbnRyeSIsInRlc3RFbnRyeSIsImFic29sdXRlRmlsZVBhdGgiLCJlbnRyeSIsImN1cnJlbnRseUV4ZWN1dGluZ0ZpbGVQYXRoIiwiZXZhbHVhdGVEZXNjcmliZSIsImV2YWx1YXRlVGVzdCIsInB1c2hTdGFjayIsInNoaWZ0U3RhY2siLCJlbWl0IiwiZXhlY3V0ZVRlc3RDYWxsYmFjayIsInRpbWVvdXRWYWx1ZSIsImdldFRpbWVvdXRWYWx1ZSIsImVtaXRBbmRXYWl0Rm9yQ29tcGxldGlvbiIsImV2YWx1YXRlUXVldWUiLCJxdWV1ZVN0YWNrIiwidHJhdmVyc2VMZXZlbE9yZGVyIiwidHJhdmVyc2VJbnZlcnNlTGV2ZWxPcmRlciIsInRpbWVvdXQiLCJUZXN0UnVubmVyXzEiLCJUZXN0UnVubmVyIiwiaXRlbXMiLCJyZWR1Y2UiLCJjb2xsZWN0aW9uIiwicHJlZGljYXRlIiwiZ3JvdXBJbmRleCIsIkRpcmVudEZyb21TdGF0cyIsInN0YXRzIiwiaXNCbG9ja0RldmljZSIsImJpbmQiLCJpc0NoYXJhY3RlckRldmljZSIsImlzRGlyZWN0b3J5IiwiaXNGSUZPIiwiaXNGaWxlIiwiaXNTb2NrZXQiLCJpc1N5bWJvbGljTGluayIsIlVORVNDQVBFRF9HTE9CX1NZTUJPTFNfUkUiLCJmaWxlcGF0aCIsInBhdHRlcm4iLCJzZWNvbmRDaGFyYWN0ZXJ5IiwiY2hhcnMiLCJ7IiwiKCIsIlsiLCJzdHJpY3RSZWdleCIsInJlbGF4ZWRSZWdleCIsImlzRXh0Z2xvYiIsInN0cmljdCIsInBhdGhQb3NpeERpcm5hbWUiLCJwb3NpeCIsImlzV2luMzIiLCJiYWNrc2xhc2giLCJlbmNsb3N1cmUiLCJnbG9iYnkiLCJlc2NhcGVkIiwibnVtIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwibm9kZXMiLCJmaW5kIiwibWluIiwibWF4IiwibGltaXQiLCJibG9jayIsImNvbW1hcyIsInJhbmdlcyIsImludmFsaWQiLCJkb2xsYXIiLCJhY2MiLCJmbGF0IiwiYXJyIiwiZWxlIiwiYXN0IiwicGFyZW50IiwiaW52YWxpZEJsb2NrIiwiZXNjYXBlSW52YWxpZCIsInV0aWxzIiwiaXNJbnZhbGlkQnJhY2UiLCJpbnZhbGlkTm9kZSIsImlzT3Blbk9yQ2xvc2UiLCJjaGlsZCIsImlzRmluaXRlIiwidG9SZWdleFJhbmdlIiwiaXNOdW1iZXIiLCJvcHRzIiwicmVsYXhaZXJvcyIsInN0cmljdFplcm9zIiwiY2FjaGVLZXkiLCJzaG9ydGhhbmQiLCJjYXB0dXJlIiwiY2FjaGUiLCJhYnMiLCJpc1BhZGRlZCIsImhhc1BhZGRpbmciLCJwb3NpdGl2ZXMiLCJuZWdhdGl2ZXMiLCJtYXhMZW4iLCJzcGxpdFRvUGF0dGVybnMiLCJuZWciLCJwb3MiLCJvbmx5TmVnYXRpdmUiLCJmaWx0ZXJQYXR0ZXJucyIsIm9ubHlQb3NpdGl2ZSIsImludGVyc2VjdGVkIiwiY29sbGF0ZVBhdHRlcm5zIiwicmFuZ2VUb1BhdHRlcm4iLCJzdGFydCIsInN0b3AiLCJjb3VudCIsImRpZ2l0cyIsInppcHBlZCIsInppcCIsInN0YXJ0RGlnaXQiLCJzdG9wRGlnaXQiLCJ0b0NoYXJhY3RlckNsYXNzIiwidG9rIiwicHJldiIsIm5pbmVzIiwiemVyb3MiLCJjb3VudE5pbmVzIiwic3RvcHMiLCJjb3VudFplcm9zIiwic3BsaXRUb1JhbmdlcyIsInRva2VucyIsInBhZFplcm9zIiwidG9RdWFudGlmaWVyIiwiY29tcGFyaXNvbiIsInByZWZpeCIsImludGVyc2VjdGlvbiIsImNvbnRhaW5zIiwicmVwZWF0IiwiaW50ZWdlciIsInBvdyIsImRpZmYiLCJyZWxheCIsImNsZWFyQ2FjaGUiLCJpc09iamVjdCIsImlzVmFsaWRWYWx1ZSIsInBhZCIsInRvTnVtYmVyIiwiZGFzaCIsInBhZFN0YXJ0IiwidG9NYXhMZW4iLCJuZWdhdGl2ZSIsInRvUmFuZ2UiLCJpc051bWJlcnMiLCJmcm9tQ2hhckNvZGUiLCJ0b1JlZ2V4IiwicmFuZ2VFcnJvciIsImluc3BlY3QiLCJpbnZhbGlkUmFuZ2UiLCJzdHJpY3RSYW5nZXMiLCJmaWxsTnVtYmVycyIsImRlc2NlbmRpbmciLCJzdGFydFN0cmluZyIsImVuZFN0cmluZyIsInN0ZXBTdHJpbmciLCJwYWRkZWQiLCJmb3JtYXQiLCJ0cmFuc2Zvcm0iLCJyYW5nZSIsInRvU2VxdWVuY2UiLCJmaWxsIiwiZmlsbExldHRlcnMiLCJpbnZhbGlkU3RlcCIsImlzT3BlbiIsImlzQ2xvc2UiLCJhcHBlbmQiLCJzdGFzaCIsImVuY2xvc2UiLCJmbGF0dGVuIiwicmFuZ2VMaW1pdCIsImV4Y2VlZHNMaW1pdCIsImVuY2xvc2VCcmFjZSIsIk1BWF9MRU5HVEgiLCJDSEFSX0JBQ0tTTEFTSCIsIkNIQVJfQkFDS1RJQ0siLCJDSEFSX0NPTU1BIiwiQ0hBUl9ET1QiLCJDSEFSX0xFRlRfUEFSRU5USEVTRVMiLCJDSEFSX1JJR0hUX1BBUkVOVEhFU0VTIiwiQ0hBUl9MRUZUX0NVUkxZX0JSQUNFIiwiQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSIsIkNIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCIsIkNIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQiLCJDSEFSX0RPVUJMRV9RVU9URSIsIkNIQVJfU0lOR0xFX1FVT1RFIiwiQ0hBUl9OT19CUkVBS19TUEFDRSIsIkNIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFIiwiQ0hBUl8wIiwiQ0hBUl85IiwiQ0hBUl9VUFBFUkNBU0VfQSIsIkNIQVJfTE9XRVJDQVNFX0EiLCJDSEFSX1VQUEVSQ0FTRV9aIiwiQ0hBUl9MT1dFUkNBU0VfWiIsIkNIQVJfQVNURVJJU0siLCJDSEFSX0FNUEVSU0FORCIsIkNIQVJfQVQiLCJDSEFSX0NBUlJJQUdFX1JFVFVSTiIsIkNIQVJfQ0lSQ1VNRkxFWF9BQ0NFTlQiLCJDSEFSX0NPTE9OIiwiQ0hBUl9ET0xMQVIiLCJDSEFSX0VRVUFMIiwiQ0hBUl9FWENMQU1BVElPTl9NQVJLIiwiQ0hBUl9GT1JNX0ZFRUQiLCJDSEFSX0ZPUldBUkRfU0xBU0giLCJDSEFSX0hBU0giLCJDSEFSX0hZUEhFTl9NSU5VUyIsIkNIQVJfTEVGVF9BTkdMRV9CUkFDS0VUIiwiQ0hBUl9MSU5FX0ZFRUQiLCJDSEFSX1BFUkNFTlQiLCJDSEFSX1BMVVMiLCJDSEFSX1FVRVNUSU9OX01BUksiLCJDSEFSX1JJR0hUX0FOR0xFX0JSQUNLRVQiLCJDSEFSX1NFTUlDT0xPTiIsIkNIQVJfU1BBQ0UiLCJDSEFSX1RBQiIsIkNIQVJfVU5ERVJTQ09SRSIsIkNIQVJfVkVSVElDQUxfTElORSIsIlN5bnRheEVycm9yIiwiYnJhY2tldHMiLCJkZXB0aCIsImFkdmFuY2UiLCJzaWJsaW5ncyIsImtlZXBRdW90ZXMiLCJrZWVwRXNjYXBpbmciLCJicmFjZXMiLCJleHBhbmQiLCJub2R1cGVzIiwiY29tcGlsZSIsIm5vZW1wdHkiLCJCb29sZWFuIiwiUE9TSVhfQ0hBUlMiLCJET1RfTElURVJBTCIsIlBMVVNfTElURVJBTCIsIlFNQVJLX0xJVEVSQUwiLCJTTEFTSF9MSVRFUkFMIiwiT05FX0NIQVIiLCJRTUFSSyIsIkVORF9BTkNIT1IiLCJET1RTX1NMQVNIIiwiTk9fRE9UIiwiTk9fRE9UUyIsIk5PX0RPVF9TTEFTSCIsIk5PX0RPVFNfU0xBU0giLCJRTUFSS19OT19ET1QiLCJTVEFSIiwiU1RBUlRfQU5DSE9SIiwiV0lORE9XU19DSEFSUyIsIlBPU0lYX1JFR0VYX1NPVVJDRSIsImFsbnVtIiwiYWxwaGEiLCJhc2NpaSIsImJsYW5rIiwiY250cmwiLCJncmFwaCIsImxvd2VyIiwicHJpbnQiLCJwdW5jdCIsInNwYWNlIiwidXBwZXIiLCJ3b3JkIiwieGRpZ2l0IiwiUkVHRVhfQkFDS1NMQVNIIiwiUkVHRVhfTk9OX1NQRUNJQUxfQ0hBUlMiLCJSRUdFWF9TUEVDSUFMX0NIQVJTIiwiUkVHRVhfU1BFQ0lBTF9DSEFSU19CQUNLUkVGIiwiUkVHRVhfU1BFQ0lBTF9DSEFSU19HTE9CQUwiLCJSRUdFWF9SRU1PVkVfQkFDS1NMQVNIIiwiUkVQTEFDRU1FTlRTIiwiKioqIiwiKiovKioiLCIqKi8qKi8qKiIsIkNIQVJfQkFDS1dBUkRfU0xBU0giLCJDSEFSX0dSQVZFX0FDQ0VOVCIsIlNFUCIsInNlcCIsImV4dGdsb2JDaGFycyIsIiEiLCI/IiwiKyIsIioiLCJAIiwiZ2xvYkNoYXJzIiwid2luMzIiLCJoYXNSZWdleENoYXJzIiwic2VncyIsImNoYXIiLCJsYXN0SWR4IiwiZXNjYXBlTGFzdCIsIm5lZ2F0ZWQiLCJpc1BhdGhTZXBhcmF0b3IiLCJ0b2tlbiIsImlzUHJlZml4IiwiaXNHbG9ic3RhciIsInNjYW5Ub0VuZCIsInNsYXNoZXMiLCJpc0JyYWNlIiwiaXNCcmFja2V0IiwiaXNHbG9iIiwiYnJhY2VFc2NhcGVkIiwiYmFja3NsYXNoZXMiLCJmaW5pc2hlZCIsImVvcyIsIm5vZXh0Iiwibm9uZWdhdGUiLCJub3BhcmVuIiwiYmFzZSIsImdsb2IiLCJ1bmVzY2FwZSIsInJlbW92ZUJhY2tzbGFzaGVzIiwibWF4RGVwdGgiLCJwcmV2SW5kZXgiLCJjb25zdGFudHMiLCJleHBhbmRSYW5nZSIsImV4IiwidiIsImVzY2FwZVJlZ2V4Iiwic3ludGF4RXJyb3IiLCJib3MiLCJQTEFURk9STV9DSEFSUyIsIkVYVEdMT0JfQ0hBUlMiLCJnbG9ic3RhciIsImRvdCIsIm5vZG90IiwicW1hcmtOb0RvdCIsInN0YXIiLCJiYXNoIiwibm9leHRnbG9iIiwiY29uc3VtZWQiLCJiYWNrdHJhY2siLCJwYXJlbnMiLCJxdW90ZXMiLCJyZW1vdmVQcmVmaXgiLCJleHRnbG9icyIsInBlZWsiLCJyZW1haW5pbmciLCJjb25zdW1lIiwibmVnYXRlIiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiZXh0Z2xvYiIsImlubmVyIiwiZXh0Z2xvYk9wZW4iLCJjb25kaXRpb25zIiwiZXh0Z2xvYkNsb3NlIiwiZXh0Z2xvYlN0YXIiLCJuZWdhdGVkRXh0Z2xvYiIsImZhc3RwYXRocyIsIm0iLCJlc2MiLCJmaXJzdCIsIndyYXBPdXRwdXQiLCJwcmUiLCJzdHJpY3RCcmFja2V0cyIsIm5vYnJhY2tldCIsInByZXZWYWx1ZSIsImxpdGVyYWxCcmFja2V0cyIsIm5vYnJhY2UiLCJvdXRwdXRJbmRleCIsInRva2Vuc0luZGV4IiwiYnJhY2UiLCJkb3RzIiwiY29tbWEiLCJvdXQiLCJ0b2tzIiwidCIsInN1cHBvcnRzTG9va2JlaGluZHMiLCJub2dsb2JzdGFyIiwicHJpb3IiLCJpc1N0YXJ0IiwiYWZ0ZXJTdGFyIiwic3RyaWN0U2xhc2hlcyIsInN1ZmZpeCIsInNsYXNoRG90IiwicGljb21hdGNoIiwicmV0dXJuU3RhdGUiLCJmbnMiLCJpc01hdGNoIiwiaXNTdGF0ZSIsImNvbXBpbGVSZSIsIm1ha2VSZSIsImlzSWdub3JlZCIsImlnbm9yZSIsImlnbm9yZU9wdHMiLCJvbk1hdGNoIiwib25SZXN1bHQiLCJyZXR1cm5PYmplY3QiLCJvbklnbm9yZSIsInRvUG9zaXhTbGFzaGVzIiwibWF0Y2hCYXNlIiwiYmFzZW5hbWUiLCJwYXR0ZXJucyIsInNjYW4iLCJyZXR1cm5PdXRwdXQiLCJmbGFncyIsIm5vY2FzZSIsImlzRW1wdHlTdHJpbmciLCJtaWNyb21hdGNoIiwib21pdCIsImtlZXAiLCJtYXRjaGVkIiwiZGVsZXRlIiwiZmFpbGdsb2IiLCJub251bGwiLCJudWxsZ2xvYiIsIm5vdCIsIm1hdGNoS2V5cyIsInJlcyIsImJyYWNlRXhwYW5kIiwiQ09NTU9OX0dMT0JfU1lNQk9MU19SRSIsIlJFR0VYX0NIQVJBQ1RFUl9DTEFTU19TWU1CT0xTX1JFIiwiUkVHRVhfR1JPVVBfU1lNQk9MU19SRSIsIkdMT0JfRVhURU5TSU9OX1NZTUJPTFNfUkUiLCJCUkFDRV9FWFBBTlNJT05TX1NZTUJPTFNfUkUiLCJpc1N0YXRpY1BhdHRlcm4iLCJpc0R5bmFtaWNQYXR0ZXJuIiwiY2FzZVNlbnNpdGl2ZU1hdGNoIiwiYnJhY2VFeHBhbnNpb24iLCJpc05lZ2F0aXZlUGF0dGVybiIsImlzUG9zaXRpdmVQYXR0ZXJuIiwiZW5kc1dpdGhTbGFzaEdsb2JTdGFyIiwiZXhwYW5kQnJhY2VFeHBhbnNpb24iLCJmbGlwQmFja3NsYXNoZXMiLCJnbG9iUGFyZW50IiwicGF0dGVybnNSZSIsInBhdHRlcm5SZSIsIlBhc3NUaHJvdWdoIiwiU3RyZWFtIiwic3RyZWFtc1F1ZXVlIiwibWVyZ2luZyIsInBpcGUiLCJkb0VuZCIsIm9iamVjdE1vZGUiLCJoaWdoV2F0ZXJNYXJrIiwibWVyZ2VkU3RyZWFtIiwiYWRkU3RyZWFtIiwicGF1c2VTdHJlYW1zIiwibWVyZ2VTdHJlYW0iLCJzdHJlYW1zIiwibmV4dFRpY2siLCJlbmRTdHJlYW0iLCJwaXBlc0NvdW50Iiwic3RyZWFtIiwib25lbmQiLCJyZW1vdmVMaXN0ZW5lciIsIl9yZWFkYWJsZVN0YXRlIiwiZW5kRW1pdHRlZCIsInJlc3VtZSIsInNldE1heExpc3RlbmVycyIsInBhdXNlIiwicHJvcGFnYXRlQ2xvc2VFdmVudFRvU291cmNlcyIsIm1lcmdlMiIsImVycm5vIiwiY29udmVydFBhdHRlcm5zVG9UYXNrcyIsInBvc2l0aXZlIiwiZHluYW1pYyIsInBvc2l0aXZlUGF0dGVybnNHcm91cCIsImdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3RvcnkiLCJjb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrIiwiY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzIiwiZ2V0UG9zaXRpdmVQYXR0ZXJucyIsImdldE5lZ2F0aXZlUGF0dGVybnNBc1Bvc2l0aXZlIiwiZ2V0TmVnYXRpdmVQYXR0ZXJucyIsImNvbnZlcnRUb1Bvc2l0aXZlUGF0dGVybiIsImdldEJhc2VEaXJlY3RvcnkiLCJjb252ZXJ0VG9OZWdhdGl2ZVBhdHRlcm4iLCJzZXR0aW5ncyIsInBvc2l0aXZlUGF0dGVybnMiLCJuZWdhdGl2ZVBhdHRlcm5zIiwic3RhdGljUGF0dGVybnMiLCJkeW5hbWljUGF0dGVybnMiLCJzdGF0aWNUYXNrcyIsImR5bmFtaWNUYXNrcyIsImNhbGxGYWlsdXJlQ2FsbGJhY2siLCJjYWxsU3VjY2Vzc0NhbGxiYWNrIiwibHN0YXQiLCJsc3RhdEVycm9yIiwiZm9sbG93U3ltYm9saWNMaW5rIiwic3RhdEVycm9yIiwidGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rIiwibWFya1N5bWJvbGljTGluayIsImxzdGF0U3luYyIsInN0YXRTeW5jIiwiZnNNZXRob2RzIiwiRklMRV9TWVNURU1fQURBUFRFUiIsIl9vcHRpb25zIiwiX2dldFZhbHVlIiwiY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIiLCJvcHRpb24iLCJnZXRTZXR0aW5ncyIsInNldHRpbmdzT3JPcHRpb25zIiwic2V0dGluZ3NfMSIsImRlZmF1bHQiLCJvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2siLCJhc3luYyIsInJlYWQiLCJvcHRpb25zT3JTZXR0aW5ncyIsInN5bmMiLCJ0YXNrcyIsImNiIiwicGVuZGluZyIsImlzU3luYyIsImVhY2giLCJ0YXNrIiwiTk9ERV9QUk9DRVNTX1ZFUlNJT05fUEFSVFMiLCJ2ZXJzaW9ucyIsIk1BSk9SX1ZFUlNJT04iLCJwYXJzZUludCIsIk1JTk9SX1ZFUlNJT04iLCJJU19NQVRDSEVEX0JZX01BSk9SIiwiSVNfTUFUQ0hFRF9CWV9NQUpPUl9BTkRfTUlOT1IiLCJyZWFkZGlyV2l0aEZpbGVUeXBlcyIsImRpcmVjdG9yeSIsInJlYWRkaXIiLCJ3aXRoRmlsZVR5cGVzIiwicmVhZGRpckVycm9yIiwiZGlyZW50cyIsImVudHJpZXMiLCJkaXJlbnQiLCJwYXRoU2VnbWVudFNlcGFyYXRvciIsImZvbGxvd1N5bWJvbGljTGlua3MiLCJjcmVhdGVEaXJlbnRGcm9tU3RhdHMiLCJtYWtlUnBsVGFza0VudHJ5IiwicnBsIiwicnBsRXJyb3IiLCJycGxFbnRyaWVzIiwiZmlsZXBhdGhzIiwiZnNTdGF0IiwiZnNTdGF0U2V0dGluZ3MiLCJjb25zdGFudHNfMSIsIklTX1NVUFBPUlRfUkVBRERJUl9XSVRIX0ZJTEVfVFlQRVMiLCJyZWFkZGlyU3luYyIsImVudHJ5UGF0aCIsIlNldHRpbmdzIiwiQ29uc3RydWN0b3IiLCJoZWFkIiwidGFpbCIsImN1cnJlbnQiLCJyZWxlYXNlIiwiVGFzayIsInNlbGYiLCJ3b3JrZWQiLCJ3b3JrZXIiLCJjb25jdXJyZW5jeSIsInJldXNpZnkiLCJxdWV1ZUhlYWQiLCJxdWV1ZVRhaWwiLCJfcnVubmluZyIsInBhdXNlZCIsInNhdHVyYXRlZCIsImRyYWluIiwicnVubmluZyIsImlkbGUiLCJjb3VudGVyIiwiZW1wdHkiLCJraWxsIiwia2lsbEFuZERyYWluIiwiaG9sZGVyIiwiZXJyb3JGaWx0ZXIiLCJzZXBhcmF0b3IiLCJfcm9vdCIsIl9zZXR0aW5ncyIsInJlcGxhY2VQYXRoU2VnbWVudFNlcGFyYXRvciIsIkFzeW5jUmVhZGVyIiwicmVhZGVyXzEiLCJfc2NhbmRpciIsImZzU2NhbmRpciIsInNjYW5kaXIiLCJfZW1pdHRlciIsImV2ZW50c18xIiwiRXZlbnRFbWl0dGVyIiwiX3F1ZXVlIiwiZmFzdHEiLCJfd29ya2VyIiwiX2lzRmF0YWxFcnJvciIsIl9pc0Rlc3Ryb3llZCIsInNldEltbWVkaWF0ZSIsIl9wdXNoVG9RdWV1ZSIsImJhc2VQYXRoIiwicXVldWVJdGVtIiwiX2hhbmRsZUVycm9yIiwiZnNTY2FuZGlyU2V0dGluZ3MiLCJfaGFuZGxlRW50cnkiLCJpc0ZhdGFsRXJyb3IiLCJmdWxscGF0aCIsImpvaW5QYXRoU2VnbWVudHMiLCJpc0FwcGxpZWRGaWx0ZXIiLCJlbnRyeUZpbHRlciIsIl9lbWl0RW50cnkiLCJkZWVwRmlsdGVyIiwiX3JlYWRlciIsImFzeW5jXzEiLCJfc3RvcmFnZSIsIm9uRXJyb3IiLCJvbkVudHJ5Iiwib25FbmQiLCJfc3RyZWFtIiwic3RyZWFtXzEiLCJSZWFkYWJsZSIsImRlc3Ryb3kiLCJTeW5jUmVhZGVyIiwic2NhbmRpclN5bmMiLCJfaGFuZGxlUXVldWUiLCJ2YWx1ZXMiLCJfaGFuZGxlRGlyZWN0b3J5IiwiX3B1c2hUb1N0b3JhZ2UiLCJzeW5jXzEiLCJfZnNTdGF0U2V0dGluZ3MiLCJpc0Vub2VudENvZGVFcnJvciIsInN1cHByZXNzRXJyb3JzIiwiUmVhZGVyU3RyZWFtIiwiX3dhbGtTdHJlYW0iLCJmc1dhbGsiLCJ3YWxrU3RyZWFtIiwiX3N0YXQiLCJyb290IiwiX2dldEZ1bGxFbnRyeVBhdGgiLCJfd3JpdGUiLCJfZW5jIiwiX2dldEVudHJ5IiwiX2dldFN0YXQiLCJfbWFrZUVudHJ5IiwiX3BhdHRlcm5zIiwiX21pY3JvbWF0Y2hPcHRpb25zIiwiX2ZpbGxTdG9yYWdlIiwiZXhwYW5kUGF0dGVybnNXaXRoQnJhY2VFeHBhbnNpb24iLCJzZWdtZW50cyIsIl9nZXRQYXR0ZXJuU2VnbWVudHMiLCJfc3BsaXRTZWdtZW50c0ludG9TZWN0aW9ucyIsImNvbXBsZXRlIiwiZ2V0UGF0dGVyblBhcnRzIiwic3BsaXRXaGVuIiwiaGFzR2xvYlN0YXIiLCJQYXJ0aWFsTWF0Y2hlciIsIm1hdGNoZXJfMSIsImxldmVscyIsIl9nZXRNYXRjaGVyIiwibmVnYXRpdmVSZSIsIl9nZXROZWdhdGl2ZVBhdHRlcm5zUmUiLCJfZmlsdGVyIiwicGFydGlhbF8xIiwiYWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJucyIsImlzQWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJuIiwiY29udmVydFBhdHRlcm5zVG9SZSIsIl9nZXRFbnRyeUxldmVsIiwiX2lzU2tpcHBlZEJ5RGVlcCIsIl9pc1NraXBwZWRTeW1ib2xpY0xpbmsiLCJyZW1vdmVMZWFkaW5nRG90U2VnbWVudCIsIl9pc1NraXBwZWRCeVBvc2l0aXZlUGF0dGVybnMiLCJfaXNTa2lwcGVkQnlOZWdhdGl2ZVBhdHRlcm5zIiwiZW50cnlEZXB0aCIsImRlZXAiLCJiYXNlUGF0aERlcHRoIiwiYmFzZU5hbWVNYXRjaCIsIm1hdGNoQW55IiwicG9zaXRpdmVSZSIsInVuaXF1ZSIsIl9pc0R1cGxpY2F0ZUVudHJ5IiwiX2NyZWF0ZUluZGV4UmVjb3JkIiwiX29ubHlGaWxlRmlsdGVyIiwiX29ubHlEaXJlY3RvcnlGaWx0ZXIiLCJfaXNTa2lwcGVkQnlBYnNvbHV0ZU5lZ2F0aXZlUGF0dGVybnMiLCJfaXNNYXRjaFRvUGF0dGVybnMiLCJvbmx5RmlsZXMiLCJvbmx5RGlyZWN0b3JpZXMiLCJhYnNvbHV0ZSIsIm1ha2VBYnNvbHV0ZSIsIl9pc05vbkZhdGFsRXJyb3IiLCJfdHJhbnNmb3JtIiwidW5peGlmeSIsIm1hcmtEaXJlY3RvcmllcyIsImVycm9yXzEiLCJlbnRyeV8xIiwiX2dldE1pY3JvbWF0Y2hPcHRpb25zIiwiZGVlcF8xIiwiZW50cnlUcmFuc2Zvcm1lciIsImVudHJ5XzIiLCJnZXRGaWx0ZXIiLCJnZXRUcmFuc2Zvcm1lciIsIlByb3ZpZGVyQXN5bmMiLCJwcm92aWRlcl8xIiwiX2dldFJvb3REaXJlY3RvcnkiLCJfZ2V0UmVhZGVyT3B0aW9ucyIsImFwaSIsInN0YXRpYyIsIlByb3ZpZGVyU3RyZWFtIiwic3RyZWFtXzIiLCJkZXN0aW5hdGlvbiIsIlJlYWRlclN5bmMiLCJfd2Fsa1N5bmMiLCJ3YWxrU3luYyIsIl9zdGF0U3luYyIsIlByb3ZpZGVyU3luYyIsIkNQVV9DT1VOVCIsIm9zIiwiY3B1cyIsIl9nZXRGaWxlU3lzdGVtTWV0aG9kcyIsIm1ldGhvZHMiLCJERUZBVUxUX0ZJTEVfU1lTVEVNX0FEQVBURVIiLCJGYXN0R2xvYiIsImFzc2VydFBhdHRlcm5zSW5wdXQiLCJ3b3JrcyIsImdldFdvcmtzIiwiX1Byb3ZpZGVyIiwidGFza01hbmFnZXIiLCJnZW5lcmF0ZSIsInByb3ZpZGVyIiwiaXNTdHJpbmciLCJpc0VtcHR5IiwibWVyZ2UiLCJnZW5lcmF0ZVRhc2tzIiwiZXNjYXBlUGF0aCIsImVzY2FwZSIsIk1vZHVsZVJlc29sdmVyIiwidGVzdFJ1bm5lciIsImlucHV0R2xvYnMiLCJmYXN0R2xvYiIsInJlc29sdmVkRW50cmllcyIsInNldEN1cnJlbnRGaWxlIiwib3ZlcnJpZGVSZXRyaWV2ZUZpbGUiLCJvdmVycmlkZVJldHJpZXZlU291cmNlTWFwIiwiaG9va1JlcXVpcmUiLCJNb2R1bGUiLCJyZXF1aXJlJCQzIiwiJGNvbXBpbGUiLCJfY29tcGlsZSIsIl9fc291cmNlTWFwU3VwcG9ydCIsImZpbGVuYW1lIiwib3JpZ0VtaXQiLCJoYW5kbGVVbmNhdWdodEV4Y2VwdGlvbnMiLCJoYXNTdGFjayIsImhhc0xpc3RlbmVycyIsImxpc3RlbmVycyIsImluc3RhbGxTb3VyY2VNYXBTdXBwb3J0IiwiY29uZmlnRmlsZUxvYWRlciIsInBhY2thZ2VKc29uQ29uZmlnTG9hZGVyIiwiY29uZmlnTWVyZ2VyIiwiY2xpQ29uZmlnUmVzb2x2ZXIiLCJjbGlDb25maWciLCJmaWxlQ29uZmlnIiwiZ2V0RmlsZUNvbmZpZyIsInBhY2thZ2VKc29uQ29uZmlnIiwibG9hZENvbmZpZyIsImNsaUNvbmZpZ1BhdGgiLCJydW5uZXIiLCJyZXBvcnRpbmdDb25maWciLCJyZXBvcnRlck5hbWVzIiwicmVwb3J0ZXIiLCJvblRlc3RTdGFydCIsIm9uVGVzdEVuZCIsImdsb2JhbEZ1bmN0aW9ucyIsImZuTmFtZSIsImluaXRpYWxpemUiLCJyZXNvbHZlR2xvYiIsInJ1biIsIm9uUnVuRW5kIl0sIm1hcHBpbmdzIjoiNE9BT0EsSUFBSUEsRUFBZSxtRUFBbUVDLE1BQU0sTUFLM0UsU0FBVUMsR0FDekIsR0FBSSxHQUFLQSxHQUFVQSxFQUFTRixFQUFhRyxPQUN2QyxPQUFPSCxFQUFhRSxHQUV0QixNQUFNLElBQUlFLFVBQVUsNkJBQStCRixNQU9wQyxTQUFVRyxHQWlCekIsT0FoQlcsSUFnQkNBLEdBQVlBLEdBZmIsR0FnQkRBLEVBakJDLEdBR0csSUFrQkNBLEdBQVlBLEdBakJiLElBa0JKQSxFQW5CSSxHQVNLLEdBTlIsSUFvQkNBLEdBQVlBLEdBbkJi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
