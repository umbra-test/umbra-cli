import{spawnSync as e}from"child_process";import{resolve as t,extname as r}from"path";import{existsSync as o,mkdirSync as i}from"fs";import{stream as s}from"fast-glob";import{TestRunner as a}from"umbra-test-runner";import{ArgumentParser as n}from"argparse";var u=function(e,t,r,o){return new(r||(r=Promise))((function(i,s){function a(e){try{u(o.next(e))}catch(e){s(e)}}function n(e){try{u(o.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,n)}u((o=o.apply(e,t||[])).next())}))},c=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(r){t[r]=e[r]&&function(t){return new Promise((function(o,i){(function(e,t,r,o){Promise.resolve(o).then((function(t){e({value:t,done:r})}),t)})(o,i,(t=e[r](t)).done,t.value)}))}}};const d=(new class{constructor(){this.DEFAULT_TIMEOUT_MS=100,this.argsParser=new n({description:"Run tests using the Umbra test framework."}),this.addGeneralOptions(),this.addTimeoutOptions(),this.addReportingOptions(),this.addParallelOptions()}parse(){const e=this.argsParser.parseArgs();return{input:e.input[0],cacheDir:e.cacheDir,configPath:t(e.configPath),debug:e.debug,debugBreak:e.debugBrk,watch:e.watch,timeoutMs:{it:e.itTimeoutMs,before:e.beforeTimeoutMs,beforeEach:e.beforeEachTimeoutMs,after:e.afterTimeoutMs,afterEach:e.afterEachTimeoutMs},reporting:{reporters:e.reporters,outputPath:e.outputPath},parallel:{idempotentFiles:e.idempotentFiles,idempotentTests:e.idempotentTests}}}addGeneralOptions(){this.argsParser.addArgument("input",{help:"Files, or globs, to run with the Umbra Test Runner",action:"append",nargs:"+"}),this.argsParser.addArgument(["-d","--debug"],{help:"Enables the Node debugger",required:!1,action:"storeTrue",dest:"debug"}),this.argsParser.addArgument(["-db","--debug-brk"],{help:"Enables the Node debugger, breaking once the first test is evaluated",required:!1,action:"storeTrue",dest:"debugBrk"}),this.argsParser.addArgument(["-w","--watch"],{help:"Enables watch mode, which will evaluate all tests first and then again once changes occur.",required:!1,action:"storeTrue",dest:"watch"}),this.argsParser.addArgument(["-c","--config"],{help:"Sets the config file path.",required:!1,dest:"configPath",defaultValue:"./umbra.config.ts"}),this.argsParser.addArgument(["--cacheDir"],{help:"The directory in which to store umbra cache files used for dynamic optimization.",required:!1,dest:"cacheDir",defaultValue:".umbra-cache"})}addTimeoutOptions(){this.argsParser.addArgument(["--timeoutMs"],{help:"Specifies the general asynchronous timeout value in milliseconds. This affects *all* async methods (it, before, after, etc.)",required:!1,defaultValue:this.DEFAULT_TIMEOUT_MS,dest:"timeoutMs"});for(const e of["it","before","beforeEach","after","afterEach"])this.argsParser.addArgument([`--${e}TimeoutMs`],{help:`Specifies the asynchronous timeout value for \`${e}\` blocks in milliseconds. This overrides general settings.`,required:!1,defaultValue:this.DEFAULT_TIMEOUT_MS,dest:`${e}TimeoutMs`})}addReportingOptions(){this.argsParser.addArgument(["-o","--outputPath"],{help:"The output directory to write the final results to.",required:!1,dest:"outputPath"}),this.argsParser.addArgument(["-r","--reporters"],{help:"The output directory to write the final results to.",required:!1,action:"append",defaultValue:[],dest:"reporters"})}addParallelOptions(){this.argsParser.addArgument(["--idempotentFiles"],{help:"If set, files are treated as idempotent (meaning other file execution does not affect it).",required:!1,action:"storeTrue",dest:"idempotentFiles"}),this.argsParser.addArgument(["--idempotentTests"],{help:"If set, tests are treated as idempotent (meaning other test execution does not affect it). Requires idempotent files.",required:!1,action:"storeTrue",dest:"idempotentTests"})}}).parse();o(d.cacheDir)||i(d.cacheDir);let h=d;if(o(d.configPath)){let o=d.configPath;"ts"===r(d.configPath)&&(o=t(d.cacheDir,"config.js"),e("tsc",["--outFile",o,d.configPath],{stdio:"inherit"}));const i=require(o);console.error("got config!"),console.error(i)}const l=new a,f=["it","describe","after","afterEach","before","beforeEach"];for(const e of f)global[e]=l[e];(function(){var e,r;return u(this,void 0,void 0,(function*(){const o=s(h.input);try{for(var i,a=c(o);!(i=yield a.next()).done;){const e=i.value,r=t(e.toString());require(r)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(r=a.return)&&(yield r.call(a))}finally{if(e)throw e.error}}return l.run()}))})().then(e=>{console.error(e)}).catch(e=>{console.error(e),process.exit(1)});
